import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix1 = org.la4j.Matrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.random((int) 'a', (int) (short) 1, 0.0d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix4 = org.la4j.matrix.SparseMatrix.random((int) '4', (int) (byte) 1, 100.0d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        int int0 = org.la4j.LinearAlgebra.ROUND_FACTOR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 52 + "'", int0 == 52);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.RAW_LU;
        org.la4j.Matrix matrix1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.MatrixDecompositor matrixDecompositor2 = decompositorFactory0.create(matrix1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.RawLUDecompositor rawLUDecompositor1 = new org.la4j.decomposition.RawLUDecompositor(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = new org.la4j.matrix.sparse.CRSMatrix((int) '4', 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector1 = org.la4j.Vector.fromArray(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.EigenDecompositor eigenDecompositor1 = new org.la4j.decomposition.EigenDecompositor(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.LU;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SOLVER;
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LinearSystemSolver linearSystemSolver5 = solverFactory0.create((org.la4j.Matrix) rowMajorSparseMatrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Underdetermined system of linear equations can not be solved.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.random((int) ' ', random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.random((int) (byte) 1, 0, (double) 0, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Vector vector5 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str6 = vector5.toCSV();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector7 = rowMajorSparseMatrix3.multiply(vector5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 10 does not equal to 35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str6, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SWEEP;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.fromCSV("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double18 = rowMajorSparseMatrix14.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix19 = rowMajorSparseMatrix14.toSparseMatrix();
        org.la4j.Matrix matrix22 = org.la4j.Matrix.diagonal((int) (short) 10, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix23 = org.la4j.matrix.ColumnMajorSparseMatrix.block((org.la4j.Matrix) rowMajorSparseMatrix3, (org.la4j.Matrix) cCSMatrix10, (org.la4j.Matrix) rowMajorSparseMatrix14, matrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix19);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = rowMajorSparseMatrix3.get(100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.LOWER_TRIANGULAR_MATRIX;
        org.junit.Assert.assertNotNull(matrixPredicate0);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix1 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"hi!\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = sparseMatrix8.foldColumn((int) 'a', vectorAccumulator12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '97' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        int int0 = org.la4j.Vectors.ROUND_FACTOR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 52 + "'", int0 == 52);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix39 = basic2DMatrix36.blankOfShape((int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) 100, (double) 'a', random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 10000.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector9 = denseVector3.sliceLeft((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.vector.functor.VectorProcedure vectorProcedure10 = null;
        // The following exception was thrown during execution in test generation
        try {
            sparseMatrix8.eachInRow((int) (short) 100, vectorProcedure10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SweepSolver sweepSolver9 = new org.la4j.linear.SweepSolver((org.la4j.Matrix) rowMajorSparseMatrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.lang.String str0 = org.la4j.LinearAlgebra.NAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "la4j" + "'", str0, "la4j");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        basic2DMatrix36.setAll((double) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double47 = rowMajorSparseMatrix43.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix48 = rowMajorSparseMatrix43.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate49 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean50 = sparseMatrix48.is(advancedMatrixPredicate49);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator52 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double53 = sparseMatrix48.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator52);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = basic2DMatrix36.foldColumn((int) (short) 10, vectorAccumulator52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix48);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.vector.functor.VectorProcedure vectorProcedure10 = null;
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix3.eachInRow(0, vectorProcedure10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random4 = null;
        org.la4j.vector.DenseVector denseVector5 = org.la4j.vector.DenseVector.random(0, random4);
        java.util.Random random7 = null;
        org.la4j.vector.DenseVector denseVector8 = org.la4j.vector.DenseVector.random(0, random7);
        org.la4j.Matrix matrix9 = ooPlaceOuterProduct2.apply(denseVector5, denseVector8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector10 = vector1.subtract((org.la4j.Vector) denseVector8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 10 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(denseVector5);
        org.junit.Assert.assertNotNull(denseVector8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix7 = rowMajorSparseMatrix6.removeLastRow();
        double double9 = matrix7.maxInColumn((int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        double double18 = rowMajorSparseMatrix13.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix28 = org.la4j.matrix.ColumnMajorSparseMatrix.block((org.la4j.Matrix) basic2DMatrix2, matrix7, (org.la4j.Matrix) rowMajorSparseMatrix13, (org.la4j.Matrix) sparseMatrix27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.NEGATIVE_INFINITY + "'", double9 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.String str0 = org.la4j.LinearAlgebra.VERSION;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "0.5.5" + "'", str0, "0.5.5");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = matrix7.get((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_SUBTRACTION;
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation0);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation4 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix8 = cCSMatrix2.apply(matrixMatrixMatrixOperation4, (org.la4j.Matrix) cRSMatrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '10' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = new org.la4j.matrix.sparse.CRSMatrix((int) (byte) -1, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double6 = matrix4.maxInColumn((int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix14 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix18 = org.la4j.matrix.sparse.CRSMatrix.block(matrix4, matrix11, (org.la4j.Matrix) denseMatrix14, (org.la4j.Matrix) cCSMatrix17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.NEGATIVE_INFINITY + "'", double6 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(denseMatrix14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.vector.functor.VectorProcedure vectorProcedure6 = null;
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.eachNonZeroInColumn(0, vectorProcedure6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix2.setRow(0, (double) '4');
        org.la4j.vector.functor.VectorProcedure vectorProcedure7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.eachNonZeroInRow((int) (short) -1, vectorProcedure7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        java.text.NumberFormat numberFormat11 = null;
        java.lang.String str12 = sparseMatrix8.toMatrixMarket(numberFormat11);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n" + "'", str12, "%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.zero(52, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 52x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.la4j.vector.VectorFactory<?>[] wildcardVectorFactoryArray0 = org.la4j.Vectors.FACTORIES;
        org.junit.Assert.assertNotNull(wildcardVectorFactoryArray0);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.SparseVector sparseVector11 = null;
        org.la4j.vector.SparseVector sparseVector12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix13 = ooPlaceOuterProduct9.apply(sparseVector11, sparseVector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.randomSymmetric((int) (short) 10, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.SWEEP;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation2 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray9 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray16 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray23 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray30 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray37 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray38 = new double[][] { doubleArray9, doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix39 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray38);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = matrixMatrixMatrixOperation2.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix39);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix41 = denseMatrix1.apply(matrixMatrixOperation40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(basic2DMatrix39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.randomSymmetric((-1), random1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be positive: -1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.vector.SparseVector sparseVector1 = null;
        org.la4j.vector.dense.BasicVector basicVector3 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector4 = basicVector3.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix5 = ooPlaceOuterProduct0.apply(sparseVector1, (org.la4j.vector.DenseVector) basicVector3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector4);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector9 = rowMajorSparseMatrix3.toRowVector();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate10 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean14 = advancedMatrixPredicate10.test((org.la4j.Matrix) columnMajorSparseMatrix13);
        org.la4j.vector.functor.VectorFunction vectorFunction16 = null;
        org.la4j.Matrix matrix17 = columnMajorSparseMatrix13.transformRow(0, vectorFunction16);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix20 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray22 = cCSMatrix20.foldRows(vectorAccumulator21);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix26.removeLastRow();
        double double31 = rowMajorSparseMatrix26.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector32 = rowMajorSparseMatrix26.toRowVector();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix33 = org.la4j.matrix.SparseMatrix.block((org.la4j.Matrix) rowMajorSparseMatrix3, (org.la4j.Matrix) columnMajorSparseMatrix13, (org.la4j.Matrix) cCSMatrix20, (org.la4j.Matrix) rowMajorSparseMatrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(cCSMatrix20);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(vector32);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.la4j.Matrix matrix0 = null;
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector10 = rowMajorSparseMatrix4.toRowVector();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation11 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation12 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray48 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation12.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.Matrix matrix52 = basic2DMatrix49.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction59 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator60 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction59);
        double double61 = matrix57.fold(matrixAccumulator60);
        double double62 = matrix57.manhattanNorm();
        matrixMatrixMatrixOperation11.ensureApplicableTo(matrix52, matrix57);
        org.la4j.matrix.DenseMatrix denseMatrix65 = org.la4j.matrix.DenseMatrix.identity(100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.block(matrix0, (org.la4j.Matrix) rowMajorSparseMatrix4, matrix57, (org.la4j.Matrix) denseMatrix65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation11);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixAccumulator60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix65);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.Matrix matrix4 = org.la4j.Matrix.zero(100, 52);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix12 = rowMajorSparseMatrix11.removeLastRow();
        double double16 = rowMajorSparseMatrix11.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector17 = rowMajorSparseMatrix11.toRowVector();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.block((org.la4j.Matrix) denseMatrix1, matrix4, (org.la4j.Matrix) columnMajorSparseMatrix7, (org.la4j.Matrix) rowMajorSparseMatrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(vector17);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction6 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator7 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction6);
        double double8 = matrix4.fold(matrixAccumulator7);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix10 = matrix4.removeRow((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixAccumulator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 10, (byte) 100, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 10, 100, 10]");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        ooPlaceOuterProduct2.ensureApplicableTo((org.la4j.Vector) basicVector11, (org.la4j.Vector) basicVector20);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = vector1.innerProduct((org.la4j.Vector) basicVector20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 10 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SQUARE_ROOT;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.RawQRDecompositor rawQRDecompositor39 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double13 = sparseMatrix8.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator12);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = sparseMatrix8.getOrElse(52, (int) (short) -1, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.LUDecompositor lUDecompositor39 = new org.la4j.decomposition.LUDecompositor((org.la4j.Matrix) basic2DMatrix37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) (short) 10, (double) '#');
        org.la4j.Vector vector3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector4 = matrix2.multiply(vector3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double13 = sparseMatrix8.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator12);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.RawQRDecompositor rawQRDecompositor14 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) sparseMatrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor3 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) cCSMatrix2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        double double81 = matrix80.diagonalProduct();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0E10d + "'", double81 == 1.0E10d);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = sparseMatrix8.isZeroAt(52, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector1 = org.la4j.Vector.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double13 = sparseMatrix8.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator12);
        org.la4j.vector.functor.VectorProcedure vectorProcedure14 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator12);
        // The following exception was thrown during execution in test generation
        try {
            vectorProcedure14.apply(0, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure14);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.sparse.CCSMatrix> cCSMatrixMatrixFactory0 = org.la4j.Matrices.SPARSE_COLUMN_MAJOR;
        org.junit.Assert.assertNotNull(cCSMatrixMatrixFactory0);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.Matrix matrix40 = basic2DMatrix37.blankOfColumns(52);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.GaussianSolver gaussianSolver41 = new org.la4j.linear.GaussianSolver((org.la4j.Matrix) basic2DMatrix37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector1 = org.la4j.Vector.zero((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = new org.la4j.matrix.sparse.CRSMatrix((int) (byte) -1, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.Random random1 = null;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.random(0, random1);
        java.lang.String str3 = denseVector2.toString();
        int[] intArray8 = new int[] { (-1), (byte) 10, 0, 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector9 = denseVector2.select(intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 0, 10]");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = vector1.mkString(numberFormat3, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorFunction vectorFunction4 = org.la4j.Vectors.INC_FUNCTION;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix5 = cCSMatrix2.transformRow((int) (byte) 100, vectorFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorFunction4);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix3.setColumn((int) '4', (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix11 = new org.la4j.matrix.dense.Basic1DMatrix(0, (-1), doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 0x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.set(100, (int) (short) 0, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = cCSMatrix2.nonZeroAt((int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector3 = org.la4j.vector.sparse.CompressedVector.random((int) (short) 100, (double) 100L, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic2DMatrix> basic2DMatrixMatrixFactory0 = org.la4j.Matrices.BASIC_2D;
        org.junit.Assert.assertNotNull(basic2DMatrixMatrixFactory0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.text.NumberFormat numberFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = vector1.mkString(numberFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.DenseVector denseVector2 = vector1.toDenseVector();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = vector1.cosineSimilarity((org.la4j.Vector) basicVector11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 10 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asModFunction(0.0d);
        double double5 = matrixFunction1.evaluate((int) '4', 0, 1.0d);
        org.junit.Assert.assertNotNull(matrixFunction1);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.randomSymmetric((int) ' ', (double) (short) 10, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 1024.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        java.text.NumberFormat numberFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = basicVector1.toCSV(numberFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator9 = columnMajorSparseMatrix8.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double18 = rowMajorSparseMatrix14.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix19 = rowMajorSparseMatrix14.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate20 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean21 = sparseMatrix19.is(advancedMatrixPredicate20);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double24 = sparseMatrix19.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator23);
        org.la4j.vector.functor.VectorProcedure vectorProcedure25 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator23);
        columnMajorSparseMatrix8.eachNonZeroInRow((-1), vectorProcedure25);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.eachInColumn((int) (byte) 100, vectorProcedure25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix19);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure25);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.blankOfRows(0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SweepSolver sweepSolver6 = new org.la4j.linear.SweepSolver((org.la4j.Matrix) rowMajorSparseMatrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.SparseVector sparseVector1 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation2 = vectorVectorVectorOperation0.partiallyApply(sparseVector1);
        org.la4j.vector.sparse.CompressedVector compressedVector4 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector4.swapElements(10, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector8 = vectorVectorOperation2.apply((org.la4j.vector.SparseVector) compressedVector4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation0);
        org.junit.Assert.assertNotNull(vectorVectorOperation2);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) (short) 10, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double4 = matrix2.maxInRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.Matrix matrix40 = basic2DMatrix37.blankOfColumns(52);
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory41 = org.la4j.LinearAlgebra.DecompositorFactory.CHOLESKY;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.MatrixDecompositor matrixDecompositor42 = matrix40.withDecompositor(decompositorFactory41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(decompositorFactory41);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.zero((int) (byte) 100, (int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be positive: -1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        org.la4j.vector.functor.VectorProcedure vectorProcedure19 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator17);
        columnMajorSparseMatrix2.eachNonZeroInRow((-1), vectorProcedure19);
        java.lang.Class<?> wildcardClass21 = vectorProcedure19.getClass();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix11 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) (byte) 100, (int) (byte) 10, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator56 = columnMajorSparseMatrix55.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate67 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean68 = sparseMatrix66.is(advancedMatrixPredicate67);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator70 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double71 = sparseMatrix66.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator70);
        org.la4j.vector.functor.VectorProcedure vectorProcedure72 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator70);
        columnMajorSparseMatrix55.eachNonZeroInRow((-1), vectorProcedure72);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix76 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator77 = cRSMatrix76.nonZeroIterator();
        org.la4j.Vector vector79 = cRSMatrix76.getColumn(100);
        boolean boolean82 = cRSMatrix76.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix83 = matrixMatrixMatrixOperation0.apply(columnMajorSparseMatrix55, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix76);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure84 = null;
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix76.each(matrixProcedure84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrixIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure72);
        org.junit.Assert.assertNotNull(cRSMatrix76);
        org.junit.Assert.assertNotNull(matrixIterator77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure5 = null;
        rowMajorSparseMatrix3.eachNonZero(matrixProcedure5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = rowMajorSparseMatrix3.isZeroAt((-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double4 = compressedVector1.getOrElse((int) (byte) 100, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SEIDEL;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        int[] intArray12 = new int[] { (short) 10, (-1), (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector13 = basicVector8.select(intArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, -1, 0]");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_HADAMARD_PRODUCT;
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation0);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) 1, (double) 10L, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.sparse.CRSMatrix> cRSMatrixMatrixFactory0 = org.la4j.Matrices.CRS;
        org.junit.Assert.assertNotNull(cRSMatrixMatrixFactory0);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector3 = org.la4j.vector.sparse.CompressedVector.random((int) (short) -1, (double) (short) 0, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        java.lang.String str20 = basicVector9.toMatrixMarket();
        byte[] byteArray21 = basicVector9.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            basicVector9.set((int) (byte) -1, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str20, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(byteArray21);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.QR;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.vector.functor.VectorFunction vectorFunction82 = org.la4j.Vectors.INC_FUNCTION;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix83 = matrix80.transformColumn((int) (byte) -1, vectorFunction82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(vectorFunction82);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal((int) '4', 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = cRSMatrix2.getOrElse(100, (int) (short) 1, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.la4j.vector.functor.VectorPredicate vectorPredicate0 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean3 = vectorPredicate0.test((-1), (double) '#');
        org.junit.Assert.assertNotNull(vectorPredicate0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix3 = rowMajorSparseMatrix2.shuffle();
        org.la4j.vector.sparse.CompressedVector compressedVector6 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = compressedVector6.toMatrixMarket(numberFormat7);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix2.setRow((int) '4', (org.la4j.Vector) compressedVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 32. Should be: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str8, "%%MatrixMarket vector coordinate real\n32 0\n");
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor8 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cCSMatrix2);
        org.la4j.Matrix[] matrixArray9 = rawLUDecompositor8.decompose();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(matrixArray9);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double60 = rowMajorSparseMatrix56.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix61 = rowMajorSparseMatrix56.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate62 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean63 = sparseMatrix61.is(advancedMatrixPredicate62);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator65 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double66 = sparseMatrix61.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator65);
        org.la4j.vector.functor.VectorProcedure vectorProcedure67 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator65);
        double[] doubleArray68 = matrix41.foldRows(vectorAccumulator65);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix71 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator72 = cRSMatrix71.nonZeroIterator();
        org.la4j.Vector vector74 = cRSMatrix71.getColumn(100);
        java.util.Random random77 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random77);
        org.la4j.matrix.DenseMatrix denseMatrix81 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double82 = denseMatrix81.min();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix83 = org.la4j.matrix.RowMajorSparseMatrix.block(matrix41, (org.la4j.Matrix) cRSMatrix71, (org.la4j.Matrix) basic2DMatrix78, (org.la4j.Matrix) denseMatrix81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix61);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(cRSMatrix71);
        org.junit.Assert.assertNotNull(matrixIterator72);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(basic2DMatrix78);
        org.junit.Assert.assertNotNull(denseMatrix81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + Double.POSITIVE_INFINITY + "'", double82 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal((int) (short) -1, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.sparse.CCSMatrix> cCSMatrixMatrixFactory0 = org.la4j.Matrices.CCS;
        org.junit.Assert.assertNotNull(cCSMatrixMatrixFactory0);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.lang.String str0 = org.la4j.LinearAlgebra.DATE;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "March 2015" + "'", str0, "March 2015");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.random((int) '#', random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.functor.VectorAccumulator vectorAccumulator1 = org.la4j.Vectors.asProductAccumulator(Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.zero((int) (short) 1, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be positive: -1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("%%MatrixMarket vector coordinate real\n32 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.random((int) (short) 1, (int) (byte) 1, (double) '#', random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.fromCSV("%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate11 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean15 = advancedMatrixPredicate11.test((org.la4j.Matrix) columnMajorSparseMatrix14);
        org.la4j.vector.functor.VectorFunction vectorFunction17 = null;
        org.la4j.Matrix matrix18 = columnMajorSparseMatrix14.transformRow(0, vectorFunction17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix20 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix14, denseMatrix19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate11);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(matrix18);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        int int11 = vectorIterator10.index();
        // The following exception was thrown during execution in test generation
        try {
            vectorIterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.random((int) (short) 1, (-1), random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector21 = basicVector9.blankOfLength((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.la4j.LinearAlgebra.InverterFactory inverterFactory0 = org.la4j.LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
        org.junit.Assert.assertNotNull(inverterFactory0);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix1 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        boolean boolean5 = sparseVector3.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator6 = sparseVector3.iterator();
        java.text.NumberFormat numberFormat7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = sparseVector3.toMatrixMarket(numberFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(vectorIterator6);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) (byte) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double3 = matrix2.diagonalProduct();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = cRSMatrix2.minInRow((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double13 = sparseMatrix8.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator12);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = sparseMatrix8.foldNonZeroInColumns(vectorAccumulator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.random((int) (byte) 10, (int) 'a', (double) 10, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix1 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("0.5.5");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix7 = rowMajorSparseMatrix6.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction9 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator10 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction9);
        double double11 = matrix7.fold(matrixAccumulator10);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure12 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator10);
        cCSMatrix2.eachNonZero(matrixProcedure12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction23 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator24 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction23);
        double double25 = matrix21.fold(matrixAccumulator24);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator24);
        cCSMatrix16.eachNonZero(matrixProcedure26);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.each(matrixProcedure26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrixAccumulator10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrixAccumulator24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure26);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.DecompositorFactory.RAW_QR;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator1 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double double2 = vectorAccumulator1.accumulate();
        org.junit.Assert.assertNotNull(vectorAccumulator1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.JacobiSolver jacobiSolver1 = new org.la4j.linear.JacobiSolver(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix4 = org.la4j.matrix.dense.Basic1DMatrix.fromBinary(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode Basic1DMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean23 = cCSMatrix22.isRowMajor();
        org.la4j.Matrix matrix24 = cCSMatrix22.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix25 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix19, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        int int11 = vectorIterator10.index();
        org.la4j.iterator.VectorIterator vectorIterator12 = null;
        org.la4j.iterator.VectorIterator vectorIterator13 = vectorIterator10.andAlsoDivide(vectorIterator12);
        // The following exception was thrown during execution in test generation
        try {
            vectorIterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator13);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure24 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix3.eachNonZeroInRow((int) 'a', vectorProcedure24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertNotNull(vectorProcedure24);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        org.la4j.Vector vector25 = org.la4j.Vector.unit((int) (short) 10);
        double double26 = vector25.min();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector27 = forwardBackSubstitutionSolver23.solve(vector25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator8 = columnMajorSparseMatrix7.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator9 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean13 = cCSMatrix12.isRowMajor();
        org.la4j.Matrix matrix16 = cCSMatrix12.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator17 = cCSMatrix12.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator18 = matrixIterator9.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator17);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = columnMajorMatrixIterator17.get();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator17);
        org.junit.Assert.assertNotNull(matrixIterator18);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.random((int) (byte) -1, 1, (double) (short) 10, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asSumAccumulator((double) (short) 10);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.sparse.CRSMatrix> cRSMatrixMatrixFactory0 = org.la4j.Matrices.SPARSE_ROW_MAJOR;
        org.junit.Assert.assertNotNull(cRSMatrixMatrixFactory0);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix4 = cCSMatrix2.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = cCSMatrix2.maxInColumn((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asDivFunction((double) (byte) 1);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean44 = cCSMatrix41.nonZeroAt((int) ' ', (int) '#');
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation45 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray52 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray59 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray66 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray73 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray80 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray81 = new double[][] { doubleArray52, doubleArray59, doubleArray66, doubleArray73, doubleArray80 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix82 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray81);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation83 = matrixMatrixMatrixOperation45.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix82);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix84 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix41, (org.la4j.matrix.DenseMatrix) basic2DMatrix82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(basic2DMatrix82);
        org.junit.Assert.assertNotNull(matrixMatrixOperation83);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix5 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean10 = cCSMatrix9.isRowMajor();
        org.la4j.Matrix matrix13 = cCSMatrix9.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator14 = cCSMatrix9.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix18.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double28 = rowMajorSparseMatrix24.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix29 = rowMajorSparseMatrix24.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct30 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean31 = sparseMatrix29.equals((java.lang.Object) ooPlaceOuterProduct30);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix18.hadamardProduct((org.la4j.Matrix) sparseMatrix29);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix9, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction2.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix5, rowMajorSparseMatrix18);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor35 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix18);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix38 = inPlaceCopyMatrixToMatrix1.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18, (org.la4j.matrix.SparseMatrix) cRSMatrix37);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix41 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double42 = cRSMatrix41.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator43 = cRSMatrix41.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor44 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix41);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix45 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix18, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix5);
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cRSMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator43);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double60 = rowMajorSparseMatrix56.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix61 = rowMajorSparseMatrix56.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate62 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean63 = sparseMatrix61.is(advancedMatrixPredicate62);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator65 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double66 = sparseMatrix61.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator65);
        org.la4j.vector.functor.VectorProcedure vectorProcedure67 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator65);
        double[] doubleArray68 = matrix41.foldRows(vectorAccumulator65);
        org.la4j.Matrix matrix70 = matrix41.subtract((double) (-1.0f));
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix61);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(matrix70);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix2 = org.la4j.Matrix.randomSymmetric((-1), random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix10 = basic1DMatrix7.blankOfShape((int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix7);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector5 = cRSMatrix2.getRow((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector9 = rowMajorSparseMatrix3.toRowVector();
        org.la4j.Vector vector12 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str13 = vector12.toCSV();
        org.la4j.vector.SparseVector sparseVector14 = vector12.toSparseVector();
        boolean boolean16 = sparseVector14.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator17 = sparseVector14.iterator();
        org.la4j.iterator.VectorIterator vectorIterator18 = sparseVector14.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix3.setColumn((int) (byte) 10, (org.la4j.Vector) sparseVector14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 10. Should be: 1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str13, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(vectorIterator17);
        org.junit.Assert.assertNotNull(vectorIterator18);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        org.la4j.matrix.functor.MatrixFunction matrixFunction11 = null;
        // The following exception was thrown during execution in test generation
        try {
            matrix8.updateAt((int) 'a', 52, matrixFunction11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct23 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix27 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix28 = rowMajorSparseMatrix27.removeLastRow();
        double double32 = rowMajorSparseMatrix27.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int33 = rowMajorSparseMatrix27.cardinality();
        org.la4j.Vector vector35 = rowMajorSparseMatrix27.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix38 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix39 = ooPlaceMatrixHadamardProduct23.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix27, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix38);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double47 = rowMajorSparseMatrix43.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix43.multiplyByItsTranspose();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate49 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean53 = advancedMatrixPredicate49.test((org.la4j.Matrix) columnMajorSparseMatrix52);
        org.la4j.vector.functor.VectorFunction vectorFunction55 = null;
        org.la4j.Matrix matrix56 = columnMajorSparseMatrix52.transformRow(0, vectorFunction55);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix57 = org.la4j.matrix.ColumnMajorSparseMatrix.block((org.la4j.Matrix) basic1DMatrix14, matrix39, (org.la4j.Matrix) rowMajorSparseMatrix43, matrix56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(vector35);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate49);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.EIGEN;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.randomSymmetric(100, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.DenseVector denseVector1 = null;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector(doubleArray10);
        double[] doubleArray13 = basicVector12.toArray();
        int[] intArray19 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector20 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray13, intArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix21 = matrixVectorVectorOperation0.apply(denseVector1, (org.la4j.vector.SparseVector) compressedVector20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation0);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        byte[] byteArray2 = denseVector1.toBinary();
        org.junit.Assert.assertNotNull(denseVector1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 20, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        double double4 = denseVector3.product();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation5 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray12 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray41 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix42 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray41);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation43 = matrixMatrixMatrixOperation5.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix42);
        org.la4j.Matrix matrix45 = basic2DMatrix42.blankOfColumns(52);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorByMatrixMultiplication0.ensureApplicableTo((org.la4j.Vector) denseVector3, (org.la4j.Matrix) basic2DMatrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 0 does not equal to 5.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(basic2DMatrix42);
        org.junit.Assert.assertNotNull(matrixMatrixOperation43);
        org.junit.Assert.assertNotNull(matrix45);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = new org.la4j.matrix.sparse.CRSMatrix((int) '#', 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix8 = cRSMatrix3.slice((int) '4', (int) (short) 0, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument 52; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix43 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double44 = columnMajorSparseMatrix43.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory45 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix46 = columnMajorSparseMatrix43.to(basic1DMatrixMatrixFactory45);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix49 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double52 = cCSMatrix49.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction54 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix55 = cCSMatrix49.transformRow(10, vectorFunction54);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix56 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix43, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory45);
        org.junit.Assert.assertNotNull(basic1DMatrix46);
        org.junit.Assert.assertNotNull(cCSMatrix49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction54);
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation5 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray12 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray41 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix42 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray41);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation43 = matrixMatrixMatrixOperation5.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix42);
        java.util.Spliterator<java.lang.Double> doubleSpliterator44 = basic2DMatrix42.spliterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix47 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator48 = columnMajorSparseMatrix47.nonZeroIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate49 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean53 = advancedMatrixPredicate49.test((org.la4j.Matrix) columnMajorSparseMatrix52);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter54 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix52);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix55 = org.la4j.Matrix.block((org.la4j.Matrix) cCSMatrix2, (org.la4j.Matrix) basic2DMatrix42, (org.la4j.Matrix) columnMajorSparseMatrix47, (org.la4j.Matrix) columnMajorSparseMatrix52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(basic2DMatrix42);
        org.junit.Assert.assertNotNull(matrixMatrixOperation43);
        org.junit.Assert.assertNotNull(doubleSpliterator44);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrixIterator48);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate49);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        double double12 = rowMajorSparseMatrix11.determinant();
        org.la4j.Vector vector14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix15 = rowMajorSparseMatrix11.insertColumn((int) (short) 0, vector14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E10d + "'", double12 == 1.0E10d);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        org.la4j.vector.dense.BasicVector basicVector8 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition9 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double13 = cRSMatrix12.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix17.removeLastRow();
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition9.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix12, rowMajorSparseMatrix17);
        boolean boolean20 = basicVector8.equals((java.lang.Object) rowMajorSparseMatrix17);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix21 = rowMajorSparseMatrix3.insertRow((int) (short) 0, (org.la4j.Vector) basicVector8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 0. Should be: 35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(basicVector8);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.RAW_QR;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector2 = org.la4j.Vector.random((int) (byte) 10, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = cCSMatrix2.maxInColumn(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.Vector vector4 = sparseVector3.blank();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(vector4);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = basic2DMatrix36.get((int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = rowMajorSparseMatrix3.foldNonZeroInRow((int) (byte) 1, vectorAccumulator17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix25.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double34 = rowMajorSparseMatrix30.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction35 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean39 = cCSMatrix38.isRowMajor();
        org.la4j.Matrix matrix42 = cCSMatrix38.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator43 = cCSMatrix38.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix47.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double57 = rowMajorSparseMatrix53.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix58 = rowMajorSparseMatrix53.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct59 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean60 = sparseMatrix58.equals((java.lang.Object) ooPlaceOuterProduct59);
        org.la4j.Matrix matrix61 = rowMajorSparseMatrix47.hadamardProduct((org.la4j.Matrix) sparseMatrix58);
        org.la4j.Matrix matrix62 = ooPlaceMatricesSubtraction35.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix38, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix64 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix67 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double68 = denseMatrix67.min();
        org.la4j.Matrix matrix69 = ooPlaceMatricesSubtraction35.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix64, denseMatrix67);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix70 = org.la4j.matrix.DenseMatrix.block(matrix21, (org.la4j.Matrix) rowMajorSparseMatrix25, (org.la4j.Matrix) rowMajorSparseMatrix30, (org.la4j.Matrix) cRSMatrix64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(cRSMatrix64);
        org.junit.Assert.assertNotNull(denseMatrix67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.POSITIVE_INFINITY + "'", double68 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix69);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.vector.sparse.CompressedVector compressedVector9 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector9.swapElements(10, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = denseVector6.cosineSimilarity((org.la4j.Vector) compressedVector9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 0 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 1, (byte) 0, (byte) -1, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 1, 0, -1, 10]");
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix5 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean10 = cCSMatrix9.isRowMajor();
        org.la4j.Matrix matrix13 = cCSMatrix9.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator14 = cCSMatrix9.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix18.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double28 = rowMajorSparseMatrix24.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix29 = rowMajorSparseMatrix24.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct30 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean31 = sparseMatrix29.equals((java.lang.Object) ooPlaceOuterProduct30);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix18.hadamardProduct((org.la4j.Matrix) sparseMatrix29);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix9, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction2.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix5, rowMajorSparseMatrix18);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor35 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix18);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix38 = inPlaceCopyMatrixToMatrix1.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18, (org.la4j.matrix.SparseMatrix) cRSMatrix37);
        org.la4j.Vector vector40 = cRSMatrix37.getColumn((-1));
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator44 = cRSMatrix43.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix45 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix37, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix5);
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertNotNull(matrixIterator44);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant(52, (int) (byte) 10, (double) 100.0f);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.random((int) (byte) -1, 10, (double) (byte) 10, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = cRSMatrix2.nonZeroAt((int) (short) 100, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition2 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double6 = cRSMatrix5.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.Matrix matrix12 = ooPlaceMatricesAddition2.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix5, rowMajorSparseMatrix10);
        boolean boolean13 = basicVector1.equals((java.lang.Object) rowMajorSparseMatrix10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction23 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator24 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction23);
        double double25 = matrix21.fold(matrixAccumulator24);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator24);
        cCSMatrix16.eachNonZero(matrixProcedure26);
        rowMajorSparseMatrix10.eachNonZero(matrixProcedure26);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LeastSquaresSolver leastSquaresSolver29 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) rowMajorSparseMatrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertNotNull(cRSMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrixAccumulator24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure26);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix3 = org.la4j.Matrix.random((int) (byte) 10, (int) (short) -1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.random((int) (short) -1, (int) (byte) 1, (double) 100, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        java.lang.String str20 = basicVector9.toMatrixMarket();
        double double22 = basicVector9.get((int) (short) 0);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str20, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.constant((int) (short) -1, (int) (byte) -1, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix2 = org.la4j.Matrix.unit((int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory4 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = columnMajorSparseMatrix2.to(basic1DMatrixMatrixFactory4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = columnMajorSparseMatrix2.isZeroAt((int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory4);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix4 = cCSMatrix2.transpose();
        double double6 = matrix4.maxInColumn(0);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct39 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix42 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double43 = cRSMatrix42.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate44 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix47 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean48 = advancedMatrixPredicate44.test((org.la4j.Matrix) columnMajorSparseMatrix47);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter49 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix47);
        org.la4j.Matrix matrix50 = ooPlaceMatrixHadamardProduct39.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix42, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix47);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix55 = cCSMatrix53.transpose();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesAddition0.ensureApplicableTo(matrix50, (org.la4j.Matrix) cCSMatrix53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 10x10 does not equal to 52x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cRSMatrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate44);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector(doubleArray10);
        double[] doubleArray13 = basicVector12.toArray();
        int[] intArray19 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector20 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray13, intArray19);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.from1DArray((int) 'a', (int) '#', doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(compressedVector21);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        java.lang.String str48 = basicVector37.toMatrixMarket();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector49 = sparseVector3.hadamardProduct((org.la4j.Vector) basicVector37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 10 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str48, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.blankOfRows(0);
        boolean boolean6 = rowMajorSparseMatrix3.isRowMajor();
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = rowMajorSparseMatrix3.toMatrixMarket(numberFormat7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n" + "'", str8, "%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) ' ', (int) (byte) 100);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation2 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.SparseVector sparseVector3 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation4 = vectorVectorVectorOperation2.partiallyApply(sparseVector3);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector5 = compressedVector1.apply(vectorVectorOperation4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation2);
        org.junit.Assert.assertNotNull(vectorVectorOperation4);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector20 = compressedVector18.copyOfLength(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LeastSquaresSolver leastSquaresSolver1 = new org.la4j.linear.LeastSquaresSolver(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor4 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = matrixMatrixMatrixOperation0.partiallyApply(columnMajorSparseMatrix3);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double11 = cCSMatrix8.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction13 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix14 = cCSMatrix8.transformRow(10, vectorFunction13);
        boolean boolean17 = cCSMatrix8.nonZeroAt(10, (int) (byte) 1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix8.nonZeroColumnMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix19 = matrixMatrixOperation5.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = choleskyDecompositor4.applicableTo(matrix5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication28 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction35 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator36 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction35);
        double double37 = matrix33.fold(matrixAccumulator36);
        double double38 = matrix33.manhattanNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector39 = sparseVector3.apply((org.la4j.operation.VectorMatrixOperation<org.la4j.Vector>) ooPlaceVectorByMatrixMultiplication28, matrix33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 10 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrixAccumulator36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        // The following exception was thrown during execution in test generation
        try {
            double double4 = rowMajorSparseMatrix3.determinant();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can not compute determinant of non-square matrix.");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct15 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean16 = sparseMatrix14.equals((java.lang.Object) ooPlaceOuterProduct15);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix3.hadamardProduct((org.la4j.Matrix) sparseMatrix14);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator18 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double19 = sparseMatrix14.foldNonZero(matrixAccumulator18);
        double double20 = sparseMatrix14.min();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrixAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.NEGATIVE_INFINITY + "'", double19 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.la4j.matrix.DenseMatrix denseMatrix3 = org.la4j.matrix.DenseMatrix.constant((int) ' ', 10, (double) 30);
        org.junit.Assert.assertNotNull(denseMatrix3);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.IDENTITY_MATRIX;
        org.junit.Assert.assertNotNull(matrixPredicate0);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.SVD;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) (-1L));
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean7 = cCSMatrix6.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix6.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator11 = cCSMatrix6.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator12 = columnMajorMatrixIterator3.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator11);
        int int13 = matrixIterator12.columnIndex();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix16 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator17 = cRSMatrix16.nonZeroIterator();
        org.la4j.Vector vector19 = cRSMatrix16.getColumn(100);
        boolean boolean22 = cRSMatrix16.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor23 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix16);
        org.la4j.Matrix matrix24 = rawLUDecompositor23.self();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator25 = matrix24.columnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator26 = matrixIterator12.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator11);
        org.junit.Assert.assertNotNull(matrixIterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(cRSMatrix16);
        org.junit.Assert.assertNotNull(matrixIterator17);
        org.junit.Assert.assertNotNull(vector19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(matrixIterator26);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.Matrix matrix3 = org.la4j.Matrix.from2DArray(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = matrix3.get((int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(denseMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.randomSymmetric((-1), (double) 0.0f, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.util.Random random2 = null;
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.randomSymmetric(100, 0.0d, random2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.matrix.DenseMatrix denseMatrix23 = null;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix26 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator27 = cRSMatrix26.nonZeroIterator();
        org.la4j.Vector vector29 = cRSMatrix26.getColumn(100);
        boolean boolean32 = cRSMatrix26.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator34 = cRSMatrix26.nonZeroIteratorOfColumn((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix35 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix23, (org.la4j.matrix.SparseMatrix) cRSMatrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(cRSMatrix26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(vectorIterator34);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator0 = org.la4j.Matrices.mkMinAccumulator();
        org.junit.Assert.assertNotNull(matrixAccumulator0);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.vector.dense.BasicVector basicVector5 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.la4j.Matrix matrix6 = basicVector5.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate7 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean8 = basicVector5.non(vectorPredicate7);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = basicVector5.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorPredicate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector2 = basicVector1.copy();
        org.la4j.Vector vector4 = vector2.copyOfLength(0);
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertNotNull(vector4);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        org.la4j.vector.sparse.CompressedVector compressedVector19 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray11);
        double double20 = compressedVector19.manhattanNorm();
        // The following exception was thrown during execution in test generation
        try {
            compressedVector19.swapElements(0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(compressedVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.vector.dense.BasicVector basicVector5 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.la4j.Matrix matrix6 = basicVector5.toRowMatrix();
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation7 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.DenseVector denseVector8 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation9 = vectorVectorVectorOperation7.partiallyApply(denseVector8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector10 = basicVector5.apply(vectorVectorOperation9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation7);
        org.junit.Assert.assertNotNull(vectorVectorOperation9);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asDivFunction((double) '4');
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct20 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random22 = null;
        org.la4j.vector.DenseVector denseVector23 = org.la4j.vector.DenseVector.random(0, random22);
        java.util.Random random25 = null;
        org.la4j.vector.DenseVector denseVector26 = org.la4j.vector.DenseVector.random(0, random25);
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct20.apply(denseVector23, denseVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix30 = ooPlaceOuterProduct0.apply(denseVector23, (org.la4j.vector.SparseVector) compressedVector29);
        org.la4j.Vector vector33 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction35 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector36 = vector33.transform(vectorFunction35);
        compressedVector29.updateAt(52, vectorFunction35);
        java.text.NumberFormat numberFormat38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = compressedVector29.toMatrixMarket(numberFormat38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(denseVector23);
        org.junit.Assert.assertNotNull(denseVector26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(vectorFunction35);
        org.junit.Assert.assertNotNull(vector36);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        double[][] doubleArray2 = denseMatrix1.toArray();
        org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray2);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(sparseMatrix3);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.JACOBI;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor4 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = matrixMatrixMatrixOperation0.partiallyApply(columnMajorSparseMatrix3);
        org.la4j.matrix.functor.MatrixFunction matrixFunction9 = org.la4j.Matrices.asModFunction(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            columnMajorSparseMatrix3.updateAt((int) (byte) 10, (int) (byte) 100, matrixFunction9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixFunction9);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) ' ', (int) 'a');
        java.lang.Class<?> wildcardClass3 = basic2DMatrix2.getClass();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = org.la4j.matrix.dense.Basic1DMatrix.fromBinary(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.GAUSSIAN;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = org.la4j.matrix.dense.Basic1DMatrix.fromCSV("0.5.5");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.DenseVector denseVector1 = null;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix5 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean10 = cCSMatrix9.isRowMajor();
        org.la4j.Matrix matrix13 = cCSMatrix9.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator14 = cCSMatrix9.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix18.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double28 = rowMajorSparseMatrix24.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix29 = rowMajorSparseMatrix24.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct30 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean31 = sparseMatrix29.equals((java.lang.Object) ooPlaceOuterProduct30);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix18.hadamardProduct((org.la4j.Matrix) sparseMatrix29);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix9, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction2.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix5, rowMajorSparseMatrix18);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor35 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix18);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector36 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector1, rowMajorSparseMatrix18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix5);
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix2.nonZeroAt((int) ' ', (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double8 = cCSMatrix2.get((int) (short) 10, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = null;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix31 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator32 = cRSMatrix31.nonZeroIterator();
        org.la4j.Vector vector34 = cRSMatrix31.getColumn(100);
        boolean boolean37 = cRSMatrix31.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator39 = cRSMatrix31.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = cRSMatrix31.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix41 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix28, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix31);
        org.junit.Assert.assertNotNull(matrixIterator32);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(vectorIterator39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero((int) (short) 10, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation9 = org.la4j.LinearAlgebra.OO_PLACE_MATRIX_HADAMARD_PRODUCT;
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate10 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean14 = advancedMatrixPredicate10.test((org.la4j.Matrix) columnMajorSparseMatrix13);
        org.la4j.vector.functor.VectorFunction vectorFunction16 = null;
        org.la4j.Matrix matrix17 = columnMajorSparseMatrix13.transformRow(0, vectorFunction16);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix18 = cCSMatrix2.apply(matrixMatrixMatrixOperation9, (org.la4j.Matrix) columnMajorSparseMatrix13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 52x52 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation9);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = cRSMatrix2.getOrElse(52, (int) '#', (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.zero((-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = choleskyDecompositor4.self();
        org.la4j.Matrix matrix6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = choleskyDecompositor4.applicableTo(matrix6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        int int24 = forwardBackSubstitutionSolver23.unknowns();
        org.la4j.Matrix matrix25 = forwardBackSubstitutionSolver23.self();
        int int26 = forwardBackSubstitutionSolver23.equations();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.Matrix matrix60 = cCSMatrix41.copyOfRows(0);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix41.set(52, (int) (byte) 100, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asDivFunction((double) (short) -1);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.zero((-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.Matrix[] matrixArray10 = rawLUDecompositor9.decompose();
        org.la4j.Matrix[] matrixArray11 = rawLUDecompositor9.decompose();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(matrixArray11);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.fromCSV("la4j");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"la4j\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.Vector vector39 = cRSMatrix36.getColumn((-1));
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct40 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix56 = ooPlaceMatrixHadamardProduct40.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix55);
        org.la4j.matrix.DenseMatrix denseMatrix58 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix60 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix61 = ooPlaceMatrixHadamardProduct40.apply(denseMatrix58, denseMatrix60);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix64 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix65 = cRSMatrix36.apply((org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix>) ooPlaceMatrixHadamardProduct40, (org.la4j.Matrix) rowMajorSparseMatrix64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x0 does not equal to 0x10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(denseMatrix58);
        org.junit.Assert.assertNotNull(denseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix64);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero(10, (int) (byte) 1);
        java.text.NumberFormat numberFormat3 = null;
        java.lang.String str4 = rowMajorSparseMatrix2.toMatrixMarket(numberFormat3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure21 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix2.eachNonZeroInRow((int) 'a', vectorProcedure21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n" + "'", str4, "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertNotNull(vectorProcedure21);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.random((int) ' ', (int) (byte) 1, (double) (byte) 100, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal(0, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector4 = basic2DMatrix2.getRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.zero((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix10 = basic1DMatrix7.sliceBottomRight((int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument -1; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix7);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '4', (int) 'a');
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction13 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator14 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction13);
        double double15 = matrix11.fold(matrixAccumulator14);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator14);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.each(matrixProcedure16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrixAccumulator14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure16);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        double double41 = rowMajorSparseMatrix31.density();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        double double0 = org.la4j.Vectors.EPS;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 1.1102230246251565E-14d + "'", double0 == 1.1102230246251565E-14d);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix((int) (byte) 10, 100);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct20 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random22 = null;
        org.la4j.vector.DenseVector denseVector23 = org.la4j.vector.DenseVector.random(0, random22);
        java.util.Random random25 = null;
        org.la4j.vector.DenseVector denseVector26 = org.la4j.vector.DenseVector.random(0, random25);
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct20.apply(denseVector23, denseVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix30 = ooPlaceOuterProduct0.apply(denseVector23, (org.la4j.vector.SparseVector) compressedVector29);
        org.la4j.Vector vector33 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction35 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector36 = vector33.transform(vectorFunction35);
        compressedVector29.updateAt(52, vectorFunction35);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector39 = compressedVector29.sliceLeft((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '32' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(denseVector23);
        org.junit.Assert.assertNotNull(denseVector26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(vectorFunction35);
        org.junit.Assert.assertNotNull(vector36);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction41 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix49 = ooPlaceMatricesSubtraction41.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix45, denseMatrix48);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double53 = columnMajorSparseMatrix52.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory54 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix55 = columnMajorSparseMatrix52.to(basic1DMatrixMatrixFactory54);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure61 = null;
        rowMajorSparseMatrix59.eachNonZero(matrixProcedure61);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction41.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix55, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix59);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix69 = rowMajorSparseMatrix67.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix73 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double77 = rowMajorSparseMatrix73.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix78 = rowMajorSparseMatrix73.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct79 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean80 = sparseMatrix78.equals((java.lang.Object) ooPlaceOuterProduct79);
        org.la4j.Matrix matrix81 = rowMajorSparseMatrix67.hadamardProduct((org.la4j.Matrix) sparseMatrix78);
        org.la4j.Matrix matrix82 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix55, rowMajorSparseMatrix67);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix85 = basic1DMatrix55.blankOfShape((int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory54);
        org.junit.Assert.assertNotNull(basic1DMatrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix73);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray25);
        org.la4j.vector.dense.BasicVector basicVector27 = new org.la4j.vector.dense.BasicVector(doubleArray25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        ooPlaceOuterProduct18.ensureApplicableTo((org.la4j.Vector) basicVector27, (org.la4j.Vector) basicVector36);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random40 = null;
        org.la4j.vector.DenseVector denseVector41 = org.la4j.vector.DenseVector.random(0, random40);
        java.util.Random random43 = null;
        org.la4j.vector.DenseVector denseVector44 = org.la4j.vector.DenseVector.random(0, random43);
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct38.apply(denseVector41, denseVector44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct18.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector47);
        java.text.NumberFormat numberFormat49 = null;
        java.lang.String str51 = denseVector41.mkString(numberFormat49, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double54 = compressedVector53.euclideanNorm();
        org.la4j.Matrix matrix55 = ooPlaceOuterProduct9.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix64 = rowMajorSparseMatrix59.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate65 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean66 = sparseMatrix64.is(advancedMatrixPredicate65);
        boolean boolean67 = matrix55.is(advancedMatrixPredicate65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseVector41);
        org.junit.Assert.assertNotNull(denseVector44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix64);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix56.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double66 = rowMajorSparseMatrix62.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix67 = rowMajorSparseMatrix62.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct68 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean69 = sparseMatrix67.equals((java.lang.Object) ooPlaceOuterProduct68);
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix56.hadamardProduct((org.la4j.Matrix) sparseMatrix67);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix73 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix70, (org.la4j.Matrix) cRSMatrix73);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix79 = cRSMatrix73.slice(0, 0, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument 0; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cRSMatrix73);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct50 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix55 = rowMajorSparseMatrix54.removeLastRow();
        double double59 = rowMajorSparseMatrix54.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int60 = rowMajorSparseMatrix54.cardinality();
        org.la4j.Vector vector62 = rowMajorSparseMatrix54.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix65 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct50.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix54, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix65);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition67 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix70 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double71 = cRSMatrix70.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix75.removeLastRow();
        org.la4j.Matrix matrix77 = ooPlaceMatricesAddition67.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix70, rowMajorSparseMatrix75);
        org.la4j.Matrix matrix78 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix65, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix75);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix82 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix84 = rowMajorSparseMatrix82.blankOfRows(0);
        boolean boolean85 = rowMajorSparseMatrix82.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix89 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double93 = rowMajorSparseMatrix89.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix94 = rowMajorSparseMatrix89.toSparseMatrix();
        org.la4j.Matrix matrix95 = rowMajorSparseMatrix89.removeFirstColumn();
        org.la4j.Matrix matrix97 = rowMajorSparseMatrix89.subtract((double) 0);
        org.la4j.Matrix matrix98 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix82, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix89);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(cRSMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix82);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix89);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix97);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct20 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        double double29 = rowMajorSparseMatrix24.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int30 = rowMajorSparseMatrix24.cardinality();
        org.la4j.Vector vector32 = rowMajorSparseMatrix24.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix35 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix36 = ooPlaceMatrixHadamardProduct20.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix35);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix39.shuffle();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesAddition0.ensureApplicableTo((org.la4j.Matrix) columnMajorSparseMatrix35, matrix40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x100 does not equal to 1x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        org.la4j.vector.functor.VectorProcedure vectorProcedure19 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator17);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.eachNonZeroInRow((int) (byte) 100, vectorProcedure19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure19);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix57 = matrix56.removeLastRow();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        double[] doubleArray3 = new double[] { (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.from1DArray((int) (short) 10, 1, doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (short) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix83 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator84 = cRSMatrix83.nonZeroIterator();
        org.la4j.Vector vector86 = cRSMatrix83.getColumn(100);
        boolean boolean89 = cRSMatrix83.nonZeroAt(1, (int) (short) 0);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix92 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor93 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix92);
        org.la4j.Matrix matrix94 = matrixMatrixMatrixOperation0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix83, (org.la4j.matrix.DenseMatrix) basic2DMatrix92);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(cRSMatrix83);
        org.junit.Assert.assertNotNull(matrixIterator84);
        org.junit.Assert.assertNotNull(vector86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix92);
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix3.removeFirstColumn();
        java.text.NumberFormat numberFormat10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = matrix9.mkString(numberFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix60 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix61 = rowMajorSparseMatrix60.removeLastRow();
        double double65 = rowMajorSparseMatrix60.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int66 = rowMajorSparseMatrix60.cardinality();
        org.la4j.Vector vector68 = rowMajorSparseMatrix60.getRow(0);
        org.la4j.matrix.DenseMatrix denseMatrix69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix70 = ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix60, denseMatrix69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(vector68);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.randomSymmetric(10, (double) (short) 10, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition2 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double6 = cRSMatrix5.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.Matrix matrix12 = ooPlaceMatricesAddition2.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix5, rowMajorSparseMatrix10);
        boolean boolean13 = basicVector1.equals((java.lang.Object) rowMajorSparseMatrix10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction23 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator24 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction23);
        double double25 = matrix21.fold(matrixAccumulator24);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator24);
        cCSMatrix16.eachNonZero(matrixProcedure26);
        rowMajorSparseMatrix10.eachNonZero(matrixProcedure26);
        // The following exception was thrown during execution in test generation
        try {
            matrixProcedure26.apply((int) (short) -1, (int) 'a', (-0.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertNotNull(cRSMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrixAccumulator24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure26);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double60 = rowMajorSparseMatrix56.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix61 = rowMajorSparseMatrix56.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate62 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean63 = sparseMatrix61.is(advancedMatrixPredicate62);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator65 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double66 = sparseMatrix61.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator65);
        org.la4j.vector.functor.VectorProcedure vectorProcedure67 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator65);
        double[] doubleArray68 = matrix41.foldRows(vectorAccumulator65);
        org.la4j.Matrix matrix69 = matrix41.multiplyByItsTranspose();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix72 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double73 = columnMajorSparseMatrix72.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor74 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix72);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix81 = matrix69.insert((org.la4j.Matrix) columnMajorSparseMatrix72, 30, (int) (byte) -1, 100, (int) (byte) 10, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination position out of bounds: 100, 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix61);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) ' ', (int) '#');
        org.la4j.vector.dense.BasicVector basicVector8 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition9 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double13 = cRSMatrix12.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix17.removeLastRow();
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition9.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix12, rowMajorSparseMatrix17);
        boolean boolean20 = basicVector8.equals((java.lang.Object) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix27 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix28 = rowMajorSparseMatrix27.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction30 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator31 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction30);
        double double32 = matrix28.fold(matrixAccumulator31);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure33 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator31);
        cCSMatrix23.eachNonZero(matrixProcedure33);
        rowMajorSparseMatrix17.eachNonZero(matrixProcedure33);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.each(matrixProcedure33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(basicVector8);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrixAccumulator31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure33);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.text.NumberFormat numberFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = denseVector1.toMatrixMarket(numberFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector1);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct0 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation1 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector3 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = matrixVectorVectorOperation1.apply(sparseVector3, denseVector6);
        org.la4j.Vector vector9 = denseVector6.divide((double) (-1L));
        org.la4j.Vector vector11 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str12 = vector11.toCSV();
        org.la4j.vector.SparseVector sparseVector13 = vector11.toSparseVector();
        boolean boolean15 = sparseVector13.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator16 = sparseVector13.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct17 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix31 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator32 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray33 = cCSMatrix31.foldRows(vectorAccumulator32);
        org.la4j.matrix.DenseMatrix denseMatrix34 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray33);
        org.la4j.vector.dense.BasicVector basicVector35 = new org.la4j.vector.dense.BasicVector(doubleArray33);
        ooPlaceOuterProduct17.ensureApplicableTo((org.la4j.Vector) basicVector26, (org.la4j.Vector) basicVector35);
        org.la4j.vector.sparse.CompressedVector compressedVector38 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix39 = compressedVector38.toColumnMatrix();
        org.la4j.Matrix matrix40 = sparseVector13.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct17, (org.la4j.Vector) compressedVector38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double double41 = ooPlaceInnerProduct0.applySymmetric(denseVector6, sparseVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation1);
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str12, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(vectorIterator16);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(cCSMatrix31);
        org.junit.Assert.assertNotNull(vectorAccumulator32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix34);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix4 = cCSMatrix2.transpose();
        org.la4j.vector.dense.BasicVector basicVector6 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition7 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix10 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double11 = cRSMatrix10.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        org.la4j.Matrix matrix17 = ooPlaceMatricesAddition7.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix10, rowMajorSparseMatrix15);
        boolean boolean18 = basicVector6.equals((java.lang.Object) rowMajorSparseMatrix15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix25.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction28 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator29 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction28);
        double double30 = matrix26.fold(matrixAccumulator29);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure31 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator29);
        cCSMatrix21.eachNonZero(matrixProcedure31);
        rowMajorSparseMatrix15.eachNonZero(matrixProcedure31);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.eachNonZero(matrixProcedure31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(basicVector6);
        org.junit.Assert.assertNotNull(cRSMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixAccumulator29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure31);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.set(52, (int) '4', (double) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix1 = org.la4j.Matrix.fromCSV("%%MatrixMarket vector coordinate real\n32 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector34 = rowMajorSparseMatrix16.getRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        double double11 = cCSMatrix3.get(0, (int) (byte) 1);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate12 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean16 = advancedMatrixPredicate12.test((org.la4j.Matrix) columnMajorSparseMatrix15);
        org.la4j.vector.functor.VectorFunction vectorFunction18 = null;
        org.la4j.Matrix matrix19 = columnMajorSparseMatrix15.transformRow(0, vectorFunction18);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatrixHadamardProduct0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 52x52 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(matrix19);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix20 = ooPlaceMatricesSubtraction12.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, denseMatrix19);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition21 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix24 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double25 = cRSMatrix24.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix29.removeLastRow();
        org.la4j.Matrix matrix31 = ooPlaceMatricesAddition21.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix24, rowMajorSparseMatrix29);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition32 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix35 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double36 = cRSMatrix35.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix41 = rowMajorSparseMatrix40.removeLastRow();
        org.la4j.Matrix matrix42 = ooPlaceMatricesAddition32.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix35, rowMajorSparseMatrix40);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix45 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix47 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix48 = ooPlaceMatricesAddition32.apply(columnMajorSparseMatrix45, denseMatrix47);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = ooPlaceMatricesAddition21.apply(denseMatrix47, rowMajorSparseMatrix52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix62 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double65 = cCSMatrix62.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction67 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix68 = cCSMatrix62.transformRow(10, vectorFunction67);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix71 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator72 = cRSMatrix71.nonZeroIterator();
        org.la4j.Vector vector74 = cRSMatrix71.getColumn(100);
        boolean boolean77 = cRSMatrix71.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor78 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix71);
        org.la4j.Matrix matrix79 = ooPlaceMatricesAddition21.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix71);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix80 = columnMajorSparseMatrix8.apply((org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix>) ooPlaceMatricesSubtraction12, matrix79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x0 does not equal to 52x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(cRSMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(cRSMatrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(denseMatrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(cCSMatrix62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(cRSMatrix71);
        org.junit.Assert.assertNotNull(matrixIterator72);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) 'a', (double) 0.0f);
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.vector.dense.BasicVector basicVector29 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        int int30 = basicVector29.length();
        org.la4j.Vector vector31 = basicVector29.shuffle();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix32 = rowMajorSparseMatrix20.insertRow((int) '#', vector31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(vector31);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) -1, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.randomSymmetric(52, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        org.la4j.matrix.functor.MatrixFunction matrixFunction53 = org.la4j.Matrices.asModFunction(0.0d);
        rowMajorSparseMatrix41.update(matrixFunction53);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrixFunction53);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asProductAccumulator(52.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray6);
        double[][] doubleArray8 = basic1DMatrix7.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix9 = org.la4j.matrix.ColumnMajorSparseMatrix.from2DArray(doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix18 = denseMatrix15.multiply(10.0d);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double22 = cRSMatrix21.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator23 = cRSMatrix21.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix21);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.Vector vector32 = org.la4j.Vector.fromArray(doubleArray31);
        org.la4j.Matrix matrix33 = org.la4j.Matrix.from1DArray(100, (int) (byte) 10, doubleArray31);
        org.la4j.Matrix matrix34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix35 = org.la4j.matrix.dense.Basic1DMatrix.block((org.la4j.Matrix) denseMatrix15, (org.la4j.Matrix) cRSMatrix21, matrix33, matrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor4 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = matrixMatrixMatrixOperation0.partiallyApply(columnMajorSparseMatrix3);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean10 = cCSMatrix9.isRowMajor();
        org.la4j.Matrix matrix13 = cCSMatrix9.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator14 = cCSMatrix9.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix18.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double28 = rowMajorSparseMatrix24.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix29 = rowMajorSparseMatrix24.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct30 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean31 = sparseMatrix29.equals((java.lang.Object) ooPlaceOuterProduct30);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix18.hadamardProduct((org.la4j.Matrix) sparseMatrix29);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix9, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix37.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double47 = rowMajorSparseMatrix43.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix48 = rowMajorSparseMatrix43.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct49 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean50 = sparseMatrix48.equals((java.lang.Object) ooPlaceOuterProduct49);
        org.la4j.Matrix matrix51 = rowMajorSparseMatrix37.hadamardProduct((org.la4j.Matrix) sparseMatrix48);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double53 = sparseMatrix48.foldNonZero(matrixAccumulator52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double61 = rowMajorSparseMatrix57.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix62 = rowMajorSparseMatrix57.toSparseMatrix();
        org.la4j.Matrix matrix63 = rowMajorSparseMatrix57.removeFirstColumn();
        org.la4j.Matrix matrix64 = ooPlaceMatricesSubtraction6.applySimple(sparseMatrix48, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix57);
        // The following exception was thrown during execution in test generation
        try {
            matrixMatrixOperation5.ensureApplicableTo((org.la4j.Matrix) rowMajorSparseMatrix57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 10 does not equal to 35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + Double.NEGATIVE_INFINITY + "'", double53 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double5 = matrix4.euclideanNorm();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix3.removeFirstColumn();
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix3.subtract((double) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SeidelSolver seidelSolver12 = new org.la4j.linear.SeidelSolver(matrix11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.vector.dense.BasicVector basicVector5 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.la4j.Matrix matrix6 = basicVector5.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate7 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean8 = basicVector5.non(vectorPredicate7);
        org.la4j.vector.sparse.CompressedVector compressedVector10 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat11 = null;
        java.lang.String str12 = compressedVector10.toMatrixMarket(numberFormat11);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector13 = basicVector5.subtract((org.la4j.Vector) compressedVector10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorPredicate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str12, "%%MatrixMarket vector coordinate real\n32 0\n");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.la4j.Vector vector1 = org.la4j.Vector.unit(0);
        org.junit.Assert.assertNotNull(vector1);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 10);
        byte[] byteArray2 = compressedVector1.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector3 = org.la4j.vector.dense.BasicVector.fromBinary(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode BasicVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[16, 0, 0, 0, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        java.lang.String str20 = basicVector9.toMatrixMarket();
        byte[] byteArray21 = basicVector9.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str20, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(byteArray21);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix29 = denseMatrix20.insert((org.la4j.Matrix) cCSMatrix24, 0, (int) (short) 1, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Out of bounds: Cannot get 100 rows and 0 cols at 0, 0 from a 10x1 matrix.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.random(1, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        int int2 = basicVector1.length();
        org.la4j.Vector vector3 = basicVector1.shuffle();
        org.la4j.Vector vector5 = basicVector1.blankOfLength((int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(vector3);
        org.junit.Assert.assertNotNull(vector5);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 0x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.Vector vector9 = denseVector3.copyOfLength((int) 'a');
        org.la4j.Matrix matrix10 = vector9.toDiagonalMatrix();
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct11 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.Vector vector13 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str14 = vector13.toCSV();
        org.la4j.vector.SparseVector sparseVector15 = vector13.toSparseVector();
        boolean boolean17 = sparseVector15.isZeroAt(52);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation18 = ooPlaceInnerProduct11.partiallyApply(sparseVector15);
        boolean boolean20 = vector9.equals((org.la4j.Vector) sparseVector15, (double) 100.0f);
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str14, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleVectorOperation18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        double double2 = cRSMatrix1.max();
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        int int2 = basicVector1.length();
        org.la4j.Vector vector3 = basicVector1.shuffle();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.vector.dense.BasicVector basicVector9 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector10 = basicVector1.subtract((org.la4j.Vector) basicVector9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 10 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(vector3);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector9);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        byte[] byteArray2 = cRSMatrix1.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = cRSMatrix1.nonZeroAt(1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct50 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix55 = rowMajorSparseMatrix54.removeLastRow();
        double double59 = rowMajorSparseMatrix54.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int60 = rowMajorSparseMatrix54.cardinality();
        org.la4j.Vector vector62 = rowMajorSparseMatrix54.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix65 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct50.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix54, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix65);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition67 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix70 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double71 = cRSMatrix70.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix75.removeLastRow();
        org.la4j.Matrix matrix77 = ooPlaceMatricesAddition67.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix70, rowMajorSparseMatrix75);
        org.la4j.Matrix matrix78 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix65, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix75);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix83 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator84 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray85 = cCSMatrix83.foldRows(vectorAccumulator84);
        org.la4j.matrix.DenseMatrix denseMatrix86 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray85);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix88 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix89 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix86, rowMajorSparseMatrix88);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(cRSMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cCSMatrix83);
        org.junit.Assert.assertNotNull(vectorAccumulator84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix86);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix88);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix30 = ooPlaceMatricesAddition11.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix24, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix29);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition31 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix34 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double35 = cRSMatrix34.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix39.removeLastRow();
        org.la4j.Matrix matrix41 = ooPlaceMatricesAddition31.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix34, rowMajorSparseMatrix39);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition42 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix45 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double46 = cRSMatrix45.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix51 = rowMajorSparseMatrix50.removeLastRow();
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition42.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix45, rowMajorSparseMatrix50);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix57 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition42.apply(columnMajorSparseMatrix55, denseMatrix57);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix63 = rowMajorSparseMatrix62.removeLastRow();
        double double67 = rowMajorSparseMatrix62.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector68 = rowMajorSparseMatrix62.toRowVector();
        org.la4j.Matrix matrix69 = ooPlaceMatricesAddition31.apply(denseMatrix57, rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double75 = cCSMatrix72.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction77 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix78 = cCSMatrix72.transformRow(10, vectorFunction77);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator82 = cRSMatrix81.nonZeroIterator();
        org.la4j.Vector vector84 = cRSMatrix81.getColumn(100);
        boolean boolean87 = cRSMatrix81.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor88 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix81);
        org.la4j.Matrix matrix89 = ooPlaceMatricesAddition31.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix72, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix90 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix29, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(cRSMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(cRSMatrix45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(denseMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(vector68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(cCSMatrix72);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrixIterator82);
        org.junit.Assert.assertNotNull(vector84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(matrix89);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix18 = denseMatrix15.multiply(10.0d);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct19 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray26);
        org.la4j.vector.dense.BasicVector basicVector28 = new org.la4j.vector.dense.BasicVector(doubleArray26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        ooPlaceOuterProduct19.ensureApplicableTo((org.la4j.Vector) basicVector28, (org.la4j.Vector) basicVector37);
        java.lang.String str39 = basicVector28.toMatrixMarket();
        byte[] byteArray40 = basicVector28.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector41 = denseMatrix15.multiply((org.la4j.Vector) basicVector28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 52 does not equal to 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str39, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.vector.functor.VectorFunction vectorFunction18 = org.la4j.Vectors.INC_FUNCTION;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix19 = matrix16.transformColumn((int) (byte) 100, vectorFunction18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(vectorFunction18);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        double double10 = cCSMatrix2.get(0, (int) (byte) 1);
        org.la4j.vector.dense.BasicVector basicVector12 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition13 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix16 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double17 = cRSMatrix16.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        org.la4j.Matrix matrix23 = ooPlaceMatricesAddition13.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix16, rowMajorSparseMatrix21);
        boolean boolean24 = basicVector12.equals((java.lang.Object) rowMajorSparseMatrix21);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix27 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction34 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator35 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction34);
        double double36 = matrix32.fold(matrixAccumulator35);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure37 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator35);
        cCSMatrix27.eachNonZero(matrixProcedure37);
        rowMajorSparseMatrix21.eachNonZero(matrixProcedure37);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.each(matrixProcedure37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(basicVector12);
        org.junit.Assert.assertNotNull(cRSMatrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrixAccumulator35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure37);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator85 = cRSMatrix81.iteratorOfRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct20 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        double double29 = rowMajorSparseMatrix24.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int30 = rowMajorSparseMatrix24.cardinality();
        org.la4j.Vector vector32 = rowMajorSparseMatrix24.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix35 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix36 = ooPlaceMatrixHadamardProduct20.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        cCSMatrix39.setAll((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix42 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix35, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(cCSMatrix39);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.fromBinary(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CRSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 1, 0, 0]");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 10);
        byte[] byteArray2 = compressedVector1.toBinary();
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = compressedVector1.mkString(numberFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[16, 0, 0, 0, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.Vector vector20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix21 = basicVector18.outerProduct(vector20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        int int2 = basicVector1.length();
        org.la4j.Vector vector3 = basicVector1.shuffle();
        org.la4j.Matrix matrix4 = vector3.toColumnMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector6 = matrix4.getRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(vector3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 10);
        byte[] byteArray2 = compressedVector1.toBinary();
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication3 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector5.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct9 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        double double18 = rowMajorSparseMatrix13.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int19 = rowMajorSparseMatrix13.cardinality();
        org.la4j.Vector vector21 = rowMajorSparseMatrix13.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix25 = ooPlaceMatrixHadamardProduct9.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix24);
        org.la4j.Vector vector26 = ooPlaceVectorByMatrixMultiplication3.apply((org.la4j.vector.SparseVector) compressedVector5, columnMajorSparseMatrix24);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator30 = cCSMatrix29.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix33 = cCSMatrix29.blankOfShape((int) '4', (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector34 = compressedVector1.apply((org.la4j.operation.VectorMatrixOperation<org.la4j.Vector>) ooPlaceVectorByMatrixMultiplication3, matrix33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 10 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[16, 0, 0, 0, 10, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(vector21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(vector26);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator30);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator5 = columnMajorSparseMatrix2.iteratorOfColumn(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector3 = org.la4j.vector.sparse.CompressedVector.random((int) (short) 0, 3.1622776601683795d, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix60 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator61 = columnMajorSparseMatrix60.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix62 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix57, columnMajorSparseMatrix60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(matrixIterator61);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory4 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = columnMajorSparseMatrix2.to(basic1DMatrixMatrixFactory4);
        org.la4j.Matrix matrix8 = basic1DMatrix5.copyOfShape((int) (byte) 0, (int) (short) 1);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator9 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double10 = matrixAccumulator9.accumulate();
        double double11 = matrix8.fold(matrixAccumulator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory4);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixAccumulator9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.NEGATIVE_INFINITY + "'", double10 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.NEGATIVE_INFINITY + "'", double11 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        basic2DMatrix37.setAll((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix37.swapColumns((int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        boolean boolean11 = cCSMatrix2.nonZeroAt(10, (int) (byte) 1);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix12 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction17 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix20 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean21 = cCSMatrix20.isRowMajor();
        org.la4j.Matrix matrix24 = cCSMatrix20.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator25 = cCSMatrix20.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix29.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double39 = rowMajorSparseMatrix35.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix40 = rowMajorSparseMatrix35.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct41 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean42 = sparseMatrix40.equals((java.lang.Object) ooPlaceOuterProduct41);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix29.hadamardProduct((org.la4j.Matrix) sparseMatrix40);
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction17.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix20, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix29);
        org.la4j.Matrix matrix45 = ooPlaceMatricesSubtraction13.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix16, rowMajorSparseMatrix29);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor46 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix29);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix12.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix29, (org.la4j.matrix.SparseMatrix) cRSMatrix48);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix52 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator53 = cRSMatrix52.nonZeroIterator();
        org.la4j.Vector vector55 = cRSMatrix52.getColumn(100);
        boolean boolean58 = cRSMatrix52.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator60 = cRSMatrix52.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = cRSMatrix52.toRowMajorSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double69 = rowMajorSparseMatrix65.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix70 = rowMajorSparseMatrix65.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate71 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean72 = sparseMatrix70.is(advancedMatrixPredicate71);
        boolean boolean73 = rowMajorSparseMatrix61.non(advancedMatrixPredicate71);
        org.la4j.matrix.DenseMatrix denseMatrix75 = org.la4j.matrix.DenseMatrix.identity(100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix76 = org.la4j.matrix.RowMajorSparseMatrix.block((org.la4j.Matrix) cCSMatrix2, (org.la4j.Matrix) cRSMatrix48, (org.la4j.Matrix) rowMajorSparseMatrix61, (org.la4j.Matrix) denseMatrix75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix16);
        org.junit.Assert.assertNotNull(cCSMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(cRSMatrix52);
        org.junit.Assert.assertNotNull(matrixIterator53);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(vectorIterator60);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix70);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(denseMatrix75);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator10 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray11 = cCSMatrix9.foldRows(vectorAccumulator10);
        org.la4j.matrix.DenseMatrix denseMatrix12 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray11);
        org.la4j.vector.dense.BasicVector basicVector13 = new org.la4j.vector.dense.BasicVector(doubleArray11);
        double[] doubleArray14 = basicVector13.toArray();
        int[] intArray20 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray14, intArray20);
        int[] intArray25 = new int[] { (byte) 0, 100, (byte) 10 };
        int[] intArray28 = new int[] { (short) 10, '4' };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = new org.la4j.matrix.sparse.CCSMatrix((int) (short) 0, (int) (short) 0, 52, doubleArray14, intArray25, intArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertNotNull(vectorAccumulator10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 100, 10]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 52]");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = compressedVector1.toMatrixMarket(numberFormat2);
        org.la4j.Vector vector5 = compressedVector1.add((double) 52);
        org.la4j.Vector vector7 = compressedVector1.sliceRight((int) (byte) 10);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation8 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector10 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random12 = null;
        org.la4j.vector.DenseVector denseVector13 = org.la4j.vector.DenseVector.random(0, random12);
        org.la4j.Matrix matrix14 = matrixVectorVectorOperation8.apply(sparseVector10, denseVector13);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = vector7.cosineSimilarity((org.la4j.Vector) denseVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 22 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str3, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation8);
        org.junit.Assert.assertNotNull(sparseVector10);
        org.junit.Assert.assertNotNull(denseVector13);
        org.junit.Assert.assertNotNull(matrix14);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct0 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double8 = rowMajorSparseMatrix4.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix9 = rowMajorSparseMatrix4.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct10 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean11 = sparseMatrix9.equals((java.lang.Object) ooPlaceOuterProduct10);
        org.la4j.vector.DenseVector denseVector13 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random15 = null;
        org.la4j.vector.DenseVector denseVector16 = org.la4j.vector.DenseVector.random(0, random15);
        java.lang.String str17 = denseVector16.toString();
        ooPlaceOuterProduct10.ensureApplicableTo((org.la4j.Vector) denseVector13, (org.la4j.Vector) denseVector16);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation19 = ooPlaceInnerProduct0.partiallyApply(denseVector16);
        org.la4j.vector.SparseVector sparseVector20 = null;
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct21 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix26 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray28 = cCSMatrix26.foldRows(vectorAccumulator27);
        org.la4j.matrix.DenseMatrix denseMatrix29 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray28);
        org.la4j.vector.dense.BasicVector basicVector30 = new org.la4j.vector.dense.BasicVector(doubleArray28);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator36 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray37 = cCSMatrix35.foldRows(vectorAccumulator36);
        org.la4j.matrix.DenseMatrix denseMatrix38 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray37);
        org.la4j.vector.dense.BasicVector basicVector39 = new org.la4j.vector.dense.BasicVector(doubleArray37);
        ooPlaceOuterProduct21.ensureApplicableTo((org.la4j.Vector) basicVector30, (org.la4j.Vector) basicVector39);
        org.la4j.vector.sparse.CompressedVector compressedVector42 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector42.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct21.apply((org.la4j.vector.SparseVector) compressedVector42, (org.la4j.vector.SparseVector) compressedVector47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double double49 = ooPlaceInnerProduct0.apply(sparseVector20, (org.la4j.vector.SparseVector) compressedVector42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(denseVector13);
        org.junit.Assert.assertNotNull(denseVector16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation19);
        org.junit.Assert.assertNotNull(cCSMatrix26);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix29);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertNotNull(vectorAccumulator36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix38);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix41.swapRows(100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix3 = cRSMatrix1.multiply(100.0d);
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.FORWARD_BACK_SUBSTITUTION;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix4.isRowMajor();
        org.la4j.Matrix matrix8 = cCSMatrix4.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix24 = rowMajorSparseMatrix19.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct25 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean26 = sparseMatrix24.equals((java.lang.Object) ooPlaceOuterProduct25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix13.hadamardProduct((org.la4j.Matrix) sparseMatrix24);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix4, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix4.iterator();
        org.la4j.Matrix matrix32 = cCSMatrix4.blankOfShape(10, (int) '4');
        org.la4j.linear.LinearSystemSolver linearSystemSolver33 = solverFactory0.create((org.la4j.Matrix) cCSMatrix4);
        double double34 = cCSMatrix4.min();
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(linearSystemSolver33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct70 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random72 = null;
        org.la4j.vector.DenseVector denseVector73 = org.la4j.vector.DenseVector.random(0, random72);
        java.util.Random random75 = null;
        org.la4j.vector.DenseVector denseVector76 = org.la4j.vector.DenseVector.random(0, random75);
        org.la4j.Matrix matrix77 = ooPlaceOuterProduct70.apply(denseVector73, denseVector76);
        org.la4j.matrix.DenseMatrix denseMatrix78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector79 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector76, denseMatrix78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(denseVector73);
        org.junit.Assert.assertNotNull(denseVector76);
        org.junit.Assert.assertNotNull(matrix77);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        double double70 = basicVector9.norm();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 7.211102550927978d + "'", double70 == 7.211102550927978d);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.Matrix matrix28 = compressedVector26.toDiagonalMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector30 = compressedVector26.sliceRight((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [97..32].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        byte[] byteArray11 = cRSMatrix3.toBinary();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = cCSMatrix2.nonZeroAt(0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector10 = basicVector9.copy();
        org.la4j.Matrix matrix11 = basicVector9.toDiagonalMatrix();
        org.la4j.Vector vector13 = basicVector9.copyOfLength(10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix14 = matrix6.insertRow((int) 'a', (org.la4j.Vector) basicVector9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(vector13);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector45.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.SparseVector) compressedVector50);
        boolean boolean53 = compressedVector50.isZeroAt((int) (short) 1);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Vector vector58 = cRSMatrix56.getColumn(30);
        org.la4j.Vector vector59 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector50, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56);
        org.la4j.vector.sparse.CompressedVector compressedVector61 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector61.swapElements(10, (int) (byte) 100);
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation65 = ooPlaceVectorByMatrixMultiplication0.partiallyApply((org.la4j.vector.SparseVector) compressedVector61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertNotNull(vectorMatrixOperation65);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) (short) 10, 52.0d);
        org.la4j.linear.SquareRootSolver squareRootSolver3 = new org.la4j.linear.SquareRootSolver(matrix2);
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct4 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct14 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean15 = sparseMatrix13.equals((java.lang.Object) ooPlaceOuterProduct14);
        org.la4j.vector.DenseVector denseVector17 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random19 = null;
        org.la4j.vector.DenseVector denseVector20 = org.la4j.vector.DenseVector.random(0, random19);
        java.lang.String str21 = denseVector20.toString();
        ooPlaceOuterProduct14.ensureApplicableTo((org.la4j.Vector) denseVector17, (org.la4j.Vector) denseVector20);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation23 = ooPlaceInnerProduct4.partiallyApply(denseVector20);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector24 = squareRootSolver3.solve((org.la4j.Vector) denseVector20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(denseVector17);
        org.junit.Assert.assertNotNull(denseVector20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation23);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix40 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray41 = cRSMatrix40.toBinary();
        org.la4j.vector.functor.VectorFunction vectorFunction43 = org.la4j.Vectors.DEC_FUNCTION;
        cRSMatrix40.updateColumn(0, vectorFunction43);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix60 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix61 = ooPlaceMatricesAddition45.apply(columnMajorSparseMatrix58, denseMatrix60);
        org.la4j.Matrix matrix63 = denseMatrix60.multiply(10.0d);
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix40, denseMatrix60);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(cRSMatrix40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(vectorFunction43);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(denseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.random(1, (int) (short) 100, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.Random random2 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random2);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix3.swapRows(1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.DIAGONAL_MATRIX;
        org.junit.Assert.assertNotNull(matrixPredicate0);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        int int0 = org.la4j.Matrices.ROUND_FACTOR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 52 + "'", int0 == 52);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix2.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double double5 = matrixIterator4.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(matrixIterator4);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.Matrix matrix40 = basic2DMatrix37.blankOfColumns(52);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate41 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean42 = matrix40.is(advancedMatrixPredicate41);
        // The following exception was thrown during execution in test generation
        try {
            matrix40.set((int) '4', (int) (short) 0, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate6 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix9 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean10 = advancedMatrixPredicate6.test((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter11 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.Matrix matrix12 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix9);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation13 = ooPlaceMatrixByVectorMultiplication0.partiallyApply(columnMajorSparseMatrix9);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector19 = basicVector18.copy();
        org.la4j.Matrix matrix20 = basicVector18.toDiagonalMatrix();
        org.la4j.Vector vector22 = basicVector18.blankOfLength(52);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector23 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix16, (org.la4j.vector.DenseVector) basicVector18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate6);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(vectorVectorOperation13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(vector19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(vector22);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix3.iterator();
        org.la4j.Matrix matrix31 = cCSMatrix3.blankOfShape(10, (int) '4');
        org.la4j.vector.dense.BasicVector basicVector33 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition34 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double38 = cRSMatrix37.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        org.la4j.Matrix matrix44 = ooPlaceMatricesAddition34.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix37, rowMajorSparseMatrix42);
        boolean boolean45 = basicVector33.equals((java.lang.Object) rowMajorSparseMatrix42);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix48 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction55 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator56 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction55);
        double double57 = matrix53.fold(matrixAccumulator56);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure58 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator56);
        cCSMatrix48.eachNonZero(matrixProcedure58);
        rowMajorSparseMatrix42.eachNonZero(matrixProcedure58);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix3.eachNonZero(matrixProcedure58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(basicVector33);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrixAccumulator56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure58);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.randomSymmetric((int) (short) -1, (double) 1L, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant(10, 0, (double) 0L);
        matrix3.setAll((double) (byte) 100);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean13 = cCSMatrix12.isRowMajor();
        org.la4j.Matrix matrix16 = cCSMatrix12.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = matrix16.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix22 = cRSMatrix2.insert((org.la4j.Matrix) rowMajorSparseMatrix17, 30, 100, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination position out of bounds: 30, 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        org.la4j.Matrix matrix5 = cCSMatrix2.divide((double) 0);
        org.la4j.matrix.functor.MatrixFunction matrixFunction8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.updateAt((int) (byte) 10, (int) (short) -1, matrixFunction8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction3 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector4 = vector1.transform(vectorFunction3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct14 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean15 = sparseMatrix13.equals((java.lang.Object) ooPlaceOuterProduct14);
        org.la4j.vector.DenseVector denseVector17 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random19 = null;
        org.la4j.vector.DenseVector denseVector20 = org.la4j.vector.DenseVector.random(0, random19);
        java.lang.String str21 = denseVector20.toString();
        ooPlaceOuterProduct14.ensureApplicableTo((org.la4j.Vector) denseVector17, (org.la4j.Vector) denseVector20);
        boolean boolean24 = vector1.equals((org.la4j.Vector) denseVector17, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector26 = vector1.sliceRight((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [35..10].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(vectorFunction3);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(denseVector17);
        org.junit.Assert.assertNotNull(denseVector20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.lang.String str0 = org.la4j.LinearAlgebra.FULL_NAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "la4j-0.5.5 (March 2015)" + "'", str0, "la4j-0.5.5 (March 2015)");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction6 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator7 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction6);
        double double8 = matrix4.fold(matrixAccumulator7);
        // The following exception was thrown during execution in test generation
        try {
            matrixAccumulator7.update(10, (int) ' ', (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixAccumulator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication52 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector54 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector54.swapElements(10, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector58 = rowMajorSparseMatrix41.apply((org.la4j.operation.MatrixVectorOperation<org.la4j.Vector>) ooPlaceMatrixByVectorMultiplication52, (org.la4j.Vector) compressedVector54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 32 does not equal to 35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix4 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix37 = rowMajorSparseMatrix36.removeLastRow();
        double double41 = rowMajorSparseMatrix36.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int42 = rowMajorSparseMatrix36.cardinality();
        org.la4j.Vector vector44 = rowMajorSparseMatrix36.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation45 = ooPlaceMatricesSubtraction5.partiallyApply(rowMajorSparseMatrix36);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix46 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation47 = ooPlaceMatricesSubtraction5.partiallyApply((org.la4j.matrix.DenseMatrix) basic1DMatrix46);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix48 = basic2DMatrix3.apply(matrixMatrixOperation47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x0 does not equal to 1x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(vector44);
        org.junit.Assert.assertNotNull(matrixMatrixOperation45);
        org.junit.Assert.assertNotNull(matrixMatrixOperation47);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator24 = rowMajorSparseMatrix18.iteratorOfRow((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction6 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator7 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction6);
        double double8 = matrix4.fold(matrixAccumulator7);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor9 = new org.la4j.decomposition.CholeskyDecompositor(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixAccumulator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.la4j.LinearAlgebra.InverterFactory inverterFactory0 = org.la4j.LinearAlgebra.InverterFactory.GAUSS_JORDAN;
        org.junit.Assert.assertNotNull(inverterFactory0);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.Vector vector7 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str8 = vector7.toCSV();
        org.la4j.vector.SparseVector sparseVector9 = vector7.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean25 = sparseMatrix23.is(advancedMatrixPredicate24);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double28 = sparseMatrix23.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator27);
        org.la4j.vector.functor.VectorProcedure vectorProcedure29 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator27);
        columnMajorSparseMatrix12.eachNonZeroInRow((-1), vectorProcedure29);
        sparseVector9.eachNonZero(vectorProcedure29);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.eachNonZeroInRow((int) (byte) -1, vectorProcedure29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str8, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure29);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.la4j.LinearAlgebra.InverterFactory inverterFactory0 = org.la4j.LinearAlgebra.GAUSS_JORDAN;
        org.junit.Assert.assertNotNull(inverterFactory0);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.UPPER_TRIANGULAR_MATRIX;
        boolean boolean4 = matrixPredicate0.test((int) (short) 10, 52, 1.0E10d);
        org.junit.Assert.assertNotNull(matrixPredicate0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        java.lang.String str12 = cRSMatrix3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector14 = cRSMatrix3.getRow(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n" + "'", str12, "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = cRSMatrix2.get((int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.DecompositorFactory.EIGEN;
        org.junit.Assert.assertNotNull(decompositorFactory0);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor8 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cCSMatrix2);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix13 = rowMajorSparseMatrix12.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction15 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator16 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction15);
        double double17 = matrix13.fold(matrixAccumulator16);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure18 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator16);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.eachNonZero(matrixProcedure18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(matrixAccumulator16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure18);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct17 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        double double26 = rowMajorSparseMatrix21.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int27 = rowMajorSparseMatrix21.cardinality();
        org.la4j.Vector vector29 = rowMajorSparseMatrix21.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix32 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix33 = ooPlaceMatrixHadamardProduct17.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix21, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix32);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix37.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure39 = null;
        rowMajorSparseMatrix37.eachNonZero(matrixProcedure39);
        double[][] doubleArray41 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix42 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray41);
        org.la4j.Matrix matrix43 = ooPlaceMatrixHadamardProduct17.apply(rowMajorSparseMatrix37, denseMatrix42);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate44 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix47 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean48 = advancedMatrixPredicate44.test((org.la4j.Matrix) columnMajorSparseMatrix47);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter49 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix47);
        org.la4j.Matrix matrix50 = denseMatrix42.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix47);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition51 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double55 = cRSMatrix54.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        org.la4j.Matrix matrix61 = ooPlaceMatricesAddition51.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix54, rowMajorSparseMatrix59);
        org.la4j.Matrix matrix62 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix42, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix59);
        java.text.NumberFormat numberFormat63 = null;
        java.lang.String str66 = denseMatrix42.mkString(numberFormat63, "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n", "%%MatrixMarket vector array real\n0\n");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(denseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate44);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.matrix.DenseMatrix denseMatrix20 = null;
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix23 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix20, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.la4j.vector.VectorFactory<org.la4j.vector.sparse.CompressedVector> compressedVectorVectorFactory0 = org.la4j.Vectors.COMPRESSED;
        org.junit.Assert.assertNotNull(compressedVectorVectorFactory0);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix3.iterator();
        org.la4j.Matrix matrix31 = cCSMatrix3.blankOfShape(10, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double32 = matrix31.determinant();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can not compute determinant of non-square matrix.");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(matrix31);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.FORWARD_BACK_SUBSTITUTION;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix4.isRowMajor();
        org.la4j.Matrix matrix8 = cCSMatrix4.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix24 = rowMajorSparseMatrix19.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct25 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean26 = sparseMatrix24.equals((java.lang.Object) ooPlaceOuterProduct25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix13.hadamardProduct((org.la4j.Matrix) sparseMatrix24);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix4, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix4.iterator();
        org.la4j.Matrix matrix32 = cCSMatrix4.blankOfShape(10, (int) '4');
        org.la4j.linear.LinearSystemSolver linearSystemSolver33 = solverFactory0.create((org.la4j.Matrix) cCSMatrix4);
        int int34 = linearSystemSolver33.equations();
        org.la4j.Matrix matrix35 = linearSystemSolver33.self();
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(linearSystemSolver33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = denseMatrix26.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = denseMatrix26.toRowMajorSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct41 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix46 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator47 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray48 = cCSMatrix46.foldRows(vectorAccumulator47);
        org.la4j.matrix.DenseMatrix denseMatrix49 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray48);
        org.la4j.vector.dense.BasicVector basicVector50 = new org.la4j.vector.dense.BasicVector(doubleArray48);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix55 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator56 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray57 = cCSMatrix55.foldRows(vectorAccumulator56);
        org.la4j.matrix.DenseMatrix denseMatrix58 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray57);
        org.la4j.vector.dense.BasicVector basicVector59 = new org.la4j.vector.dense.BasicVector(doubleArray57);
        ooPlaceOuterProduct41.ensureApplicableTo((org.la4j.Vector) basicVector50, (org.la4j.Vector) basicVector59);
        org.la4j.vector.sparse.CompressedVector compressedVector62 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector62.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector67 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix68 = ooPlaceOuterProduct41.apply((org.la4j.vector.SparseVector) compressedVector62, (org.la4j.vector.SparseVector) compressedVector67);
        org.la4j.Matrix matrix69 = compressedVector67.toDiagonalMatrix();
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix40.insert(matrix69);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(cCSMatrix46);
        org.junit.Assert.assertNotNull(vectorAccumulator47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix55);
        org.junit.Assert.assertNotNull(vectorAccumulator56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix58);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter5 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.Matrix matrix6 = noPivotGaussInverter5.inverse();
        org.la4j.Matrix matrix7 = noPivotGaussInverter5.self();
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.Matrix matrix24 = columnMajorSparseMatrix21.rotate();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(matrix24);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.Vector vector39 = cRSMatrix36.getColumn((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector41 = vector39.sliceLeft((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vector39);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.SparseVector sparseVector3 = org.la4j.vector.SparseVector.random((int) (byte) 100, (double) 1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.Random random2 = null;
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.randomSymmetric(30, 1.1102230246251565E-14d, random2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic2DMatrix> basic2DMatrixMatrixFactory0 = org.la4j.Matrices.DENSE;
        org.junit.Assert.assertNotNull(basic2DMatrixMatrixFactory0);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.Matrix matrix5 = cRSMatrix2.blankOfRows((int) (short) 1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double14 = rowMajorSparseMatrix10.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix15 = rowMajorSparseMatrix10.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate16 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean17 = sparseMatrix15.is(advancedMatrixPredicate16);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator19 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double20 = sparseMatrix15.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator19);
        org.la4j.vector.functor.VectorProcedure vectorProcedure21 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator19);
        org.la4j.vector.functor.VectorProcedure vectorProcedure22 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator19);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.eachNonZeroInRow((int) 'a', vectorProcedure22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix15);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure21);
        org.junit.Assert.assertNotNull(vectorProcedure22);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.la4j.matrix.functor.MatrixFunction matrixFunction0 = org.la4j.Matrices.INC_FUNCTION;
        org.junit.Assert.assertNotNull(matrixFunction0);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix17 = matrix16.removeLastColumn();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            matrix6.swapColumns((int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, 0.0d);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        int[] intArray12 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector13 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray9, intArray12);
        int[] intArray18 = new int[] { '4', (byte) 100, (short) 100, 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix19 = cRSMatrix2.select(intArray12, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '10' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[52, 100, 100, 100]");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator56 = columnMajorSparseMatrix55.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate67 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean68 = sparseMatrix66.is(advancedMatrixPredicate67);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator70 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double71 = sparseMatrix66.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator70);
        org.la4j.vector.functor.VectorProcedure vectorProcedure72 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator70);
        columnMajorSparseMatrix55.eachNonZeroInRow((-1), vectorProcedure72);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix76 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator77 = cRSMatrix76.nonZeroIterator();
        org.la4j.Vector vector79 = cRSMatrix76.getColumn(100);
        boolean boolean82 = cRSMatrix76.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix83 = matrixMatrixMatrixOperation0.apply(columnMajorSparseMatrix55, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix76);
        org.la4j.Vector vector85 = cRSMatrix76.getColumn((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = cRSMatrix76.minInRow((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrixIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure72);
        org.junit.Assert.assertNotNull(cRSMatrix76);
        org.junit.Assert.assertNotNull(matrixIterator77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vector85);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.Vector vector5 = org.la4j.Vector.fromArray(doubleArray4);
        org.la4j.vector.SparseVector sparseVector6 = vector5.toSparseVector();
        double double7 = sparseVector6.sum();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(sparseVector6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asSumAccumulator((double) 100L);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = denseMatrix2.toRowMajorSparseMatrix();
        java.lang.Class<?> wildcardClass4 = denseMatrix2.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(denseMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction20 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean24 = cCSMatrix23.isRowMajor();
        org.la4j.Matrix matrix27 = cCSMatrix23.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix23.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix32.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double42 = rowMajorSparseMatrix38.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix43 = rowMajorSparseMatrix38.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct44 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean45 = sparseMatrix43.equals((java.lang.Object) ooPlaceOuterProduct44);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix32.hadamardProduct((org.la4j.Matrix) sparseMatrix43);
        org.la4j.Matrix matrix47 = ooPlaceMatricesSubtraction20.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix23, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator48 = cCSMatrix23.iterator();
        org.la4j.Matrix matrix51 = cCSMatrix23.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix52 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix19, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix23);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator53 = cCSMatrix23.rowMajorIterator();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator48);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator53);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct12 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix15 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double16 = cRSMatrix15.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate17 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean21 = advancedMatrixPredicate17.test((org.la4j.Matrix) columnMajorSparseMatrix20);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter22 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix20);
        org.la4j.Matrix matrix23 = ooPlaceMatrixHadamardProduct12.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix15, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix20);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix26 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int27 = cCSMatrix26.cardinality();
        org.la4j.Matrix matrix29 = cCSMatrix26.divide((double) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix30 = cCSMatrix3.apply((org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix>) ooPlaceMatrixHadamardProduct12, (org.la4j.Matrix) cCSMatrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 52x52 does not equal to 1x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.Vector vector14 = vector12.sliceLeft((int) ' ');
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(vector14);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix3.removeFirstColumn();
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector13 = basicVector12.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix14 = rowMajorSparseMatrix3.insertColumn((int) (byte) 100, (org.la4j.Vector) basicVector12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal column number, must be 0..35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(vector13);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor5 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix4);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation6 = matrixMatrixMatrixOperation1.partiallyApply(columnMajorSparseMatrix4);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction7 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix12 = rowMajorSparseMatrix11.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix14 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix15 = ooPlaceMatricesSubtraction7.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix11, denseMatrix14);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix18 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double19 = columnMajorSparseMatrix18.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory20 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix21 = columnMajorSparseMatrix18.to(basic1DMatrixMatrixFactory20);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix25.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure27 = null;
        rowMajorSparseMatrix25.eachNonZero(matrixProcedure27);
        org.la4j.Matrix matrix29 = ooPlaceMatricesSubtraction7.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix21, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.Matrix matrix30 = basic1DMatrix21.shuffle();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix31 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix4, (org.la4j.matrix.DenseMatrix) basic1DMatrix21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation6);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(denseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory20);
        org.junit.Assert.assertNotNull(basic1DMatrix21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        // The following exception was thrown during execution in test generation
        try {
            columnMajorSparseMatrix13.setColumn((int) (byte) 10, (double) 30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.LinearAlgebra.SolverFactory solverFactory44 = org.la4j.LinearAlgebra.SolverFactory.SQUARE_ROOT;
        org.la4j.linear.LinearSystemSolver linearSystemSolver45 = basic2DMatrix41.withSolver(solverFactory44);
        org.la4j.Vector vector47 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str48 = vector47.toCSV();
        org.la4j.vector.SparseVector sparseVector49 = vector47.toSparseVector();
        boolean boolean51 = sparseVector49.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator52 = sparseVector49.iterator();
        org.la4j.iterator.VectorIterator vectorIterator53 = sparseVector49.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector54 = linearSystemSolver45.solve((org.la4j.Vector) sparseVector49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(solverFactory44);
        org.junit.Assert.assertNotNull(linearSystemSolver45);
        org.junit.Assert.assertNotNull(vector47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str48, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(vectorIterator52);
        org.junit.Assert.assertNotNull(vectorIterator53);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            basicVector1.swapElements((int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix4 = org.la4j.matrix.SparseMatrix.random((int) (short) 10, (int) (byte) 10, (double) (short) -1, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        double[] doubleArray4 = new double[] { 10, '4' };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.from1DArray(100, 30, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, 52.0]");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.random(100, 0, (double) 100.0f, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.Matrix matrix39 = matrix38.copy();
        // The following exception was thrown during execution in test generation
        try {
            matrix38.setColumn((int) (byte) 100, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix76 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix77 = rowMajorSparseMatrix76.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction79 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator80 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction79);
        double double81 = matrix77.fold(matrixAccumulator80);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure82 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator80);
        cCSMatrix72.eachNonZero(matrixProcedure82);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix67.eachNonZero(matrixProcedure82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrixAccumulator80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-1.0d) + "'", double81 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure82);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.Matrix matrix23 = basic1DMatrix14.shuffle();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix46 = compressedVector45.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector48 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition49 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix52 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double53 = cRSMatrix52.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix57.removeLastRow();
        org.la4j.Matrix matrix59 = ooPlaceMatricesAddition49.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix52, rowMajorSparseMatrix57);
        boolean boolean60 = basicVector48.equals((java.lang.Object) rowMajorSparseMatrix57);
        org.la4j.Matrix matrix61 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.DenseVector) basicVector48);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix64 = basic1DMatrix14.insert(matrix61, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Out of bounds: Cannot add 0 rows and 100 cols at 0, 0 in a 0x0 matrix.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(basicVector48);
        org.junit.Assert.assertNotNull(cRSMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix61);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.Vector vector9 = denseVector3.copyOfLength((int) 'a');
        org.la4j.Matrix matrix10 = vector9.toDiagonalMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray17 = cCSMatrix15.foldRows(vectorAccumulator16);
        int[] intArray20 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray17, intArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector22 = vector9.select(intArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[10, 100]");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(52, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix2.setRow((int) (short) -1, 52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.Matrix matrix5 = cRSMatrix2.blankOfRows((int) (short) 1);
        org.la4j.Matrix matrix6 = matrix5.removeLastColumn();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix8 = matrix6.removeColumn((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal column number, must be 0..8");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector2 = org.la4j.vector.sparse.CompressedVector.zero((int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero((int) (short) 10, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 10x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.SparseVector sparseVector3 = org.la4j.vector.SparseVector.random((int) (byte) -1, 100.0d, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator8 = columnMajorSparseMatrix7.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator9 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix12.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator22 = columnMajorMatrixIterator13.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator21);
        org.la4j.iterator.MatrixIterator matrixIterator23 = matrixIterator9.andAlsoMultiply(matrixIterator22);
        // The following exception was thrown during execution in test generation
        try {
            matrixIterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixIterator23);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.LOWER_BIDIAGONAL_MATRIX;
        org.junit.Assert.assertNotNull(matrixPredicate0);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        // The following exception was thrown during execution in test generation
        try {
            columnMajorSparseMatrix3.swapColumns((int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        double double6 = cCSMatrix2.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction13 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator14 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction13);
        double double15 = matrix11.fold(matrixAccumulator14);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator14);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.each(matrixProcedure16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrixAccumulator14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure16);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator13 = cCSMatrix3.nonZeroIteratorOfColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix3 = org.la4j.Matrix.random(10, 30, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        java.util.Random random14 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random14);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition16 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double20 = cRSMatrix19.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.Matrix matrix26 = ooPlaceMatricesAddition16.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix19, rowMajorSparseMatrix24);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition27 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix30 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double31 = cRSMatrix30.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        org.la4j.Matrix matrix37 = ooPlaceMatricesAddition27.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix30, rowMajorSparseMatrix35);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix42 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix43 = ooPlaceMatricesAddition27.apply(columnMajorSparseMatrix40, denseMatrix42);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix47.removeLastRow();
        double double52 = rowMajorSparseMatrix47.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector53 = rowMajorSparseMatrix47.toRowVector();
        org.la4j.Matrix matrix54 = ooPlaceMatricesAddition16.apply(denseMatrix42, rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix57 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double60 = cCSMatrix57.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction62 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix63 = cCSMatrix57.transformRow(10, vectorFunction62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator67 = cRSMatrix66.nonZeroIterator();
        org.la4j.Vector vector69 = cRSMatrix66.getColumn(100);
        boolean boolean72 = cRSMatrix66.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor73 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix74 = ooPlaceMatricesAddition16.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix57, (org.la4j.matrix.SparseMatrix) cRSMatrix66);
        org.la4j.Matrix matrix75 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix57);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix78 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor79 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix78);
        org.la4j.Matrix matrix80 = columnMajorSparseMatrix78.rotate();
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication81 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct82 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix85 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double86 = cRSMatrix85.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate87 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix90 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean91 = advancedMatrixPredicate87.test((org.la4j.Matrix) columnMajorSparseMatrix90);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter92 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix90);
        org.la4j.Matrix matrix93 = ooPlaceMatrixHadamardProduct82.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix85, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix90);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation94 = ooPlaceMatrixByVectorMultiplication81.partiallyApply(columnMajorSparseMatrix90);
        org.la4j.Matrix matrix95 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix78, columnMajorSparseMatrix90);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(cRSMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(denseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(cCSMatrix57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertNotNull(matrixIterator67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(cRSMatrix85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate87);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(vectorVectorOperation94);
        org.junit.Assert.assertNotNull(matrix95);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix84 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double88 = rowMajorSparseMatrix84.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix89 = rowMajorSparseMatrix84.toSparseMatrix();
        org.la4j.Matrix matrix90 = rowMajorSparseMatrix84.copy();
        org.la4j.Matrix matrix91 = denseMatrix40.kroneckerProduct((org.la4j.Matrix) rowMajorSparseMatrix84);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LeastSquaresSolver leastSquaresSolver92 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) rowMajorSparseMatrix84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix84);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        double double12 = rowMajorSparseMatrix11.determinant();
        org.la4j.LinearAlgebra.SolverFactory solverFactory13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LinearSystemSolver linearSystemSolver14 = rowMajorSparseMatrix11.withSolver(solverFactory13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E10d + "'", double12 == 1.0E10d);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix37 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor3 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix2);
        double double4 = basic2DMatrix2.determinant();
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix2.set((int) (short) -1, (int) (short) 1, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0E100d + "'", double4 == 1.0E100d);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        org.la4j.vector.sparse.CompressedVector compressedVector19 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray11);
        double double20 = compressedVector19.manhattanNorm();
        java.text.NumberFormat numberFormat21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = compressedVector19.toMatrixMarket(numberFormat21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(compressedVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.la4j.vector.functor.VectorPredicate vectorPredicate0 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean3 = vectorPredicate0.test((int) (byte) -1, 0.0d);
        org.junit.Assert.assertNotNull(vectorPredicate0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector2 = org.la4j.vector.sparse.CompressedVector.zero((int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix3 = rowMajorSparseMatrix2.shuffle();
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix2.shuffle();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver5 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter5 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.Matrix matrix6 = noPivotGaussInverter5.inverse();
        org.la4j.matrix.SparseMatrix sparseMatrix7 = matrix6.toSparseMatrix();
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(sparseMatrix7);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix4 = org.la4j.matrix.SparseMatrix.random((int) (byte) -1, (int) '4', (double) (byte) -1, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator0 = org.la4j.Vectors.mkManhattanNormAccumulator();
        org.junit.Assert.assertNotNull(vectorAccumulator0);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        boolean boolean5 = sparseVector3.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator6 = sparseVector3.iterator();
        org.la4j.iterator.VectorIterator vectorIterator7 = sparseVector3.nonZeroIterator();
        org.la4j.vector.SparseVector sparseVector8 = sparseVector3.toSparseVector();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(vectorIterator6);
        org.junit.Assert.assertNotNull(vectorIterator7);
        org.junit.Assert.assertNotNull(sparseVector8);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.Matrix matrix5 = cRSMatrix2.blankOfRows((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = cRSMatrix2.get(100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.DenseVector denseVector25 = org.la4j.vector.DenseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation26 = org.la4j.LinearAlgebra.OO_PLACE_MATRIX_BY_ITS_TRANSPOSE_MULTIPLICATION;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator30 = cCSMatrix29.nonZeroColumnMajorIterator();
        matrixMatrixOperation26.ensureApplicableTo((org.la4j.Matrix) cCSMatrix29);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector32 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector25, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(denseVector25);
        org.junit.Assert.assertNotNull(matrixMatrixOperation26);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator30);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.vector.dense.BasicVector basicVector10 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        boolean boolean22 = basicVector10.equals((java.lang.Object) rowMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix29.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction32 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator33 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction32);
        double double34 = matrix30.fold(matrixAccumulator33);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure35 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator33);
        cCSMatrix25.eachNonZero(matrixProcedure35);
        rowMajorSparseMatrix19.eachNonZero(matrixProcedure35);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.each(matrixProcedure35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(basicVector10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixAccumulator33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure35);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.vector.SparseVector sparseVector14 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct15 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix20 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray22 = cCSMatrix20.foldRows(vectorAccumulator21);
        org.la4j.matrix.DenseMatrix denseMatrix23 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray22);
        org.la4j.vector.dense.BasicVector basicVector24 = new org.la4j.vector.dense.BasicVector(doubleArray22);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        ooPlaceOuterProduct15.ensureApplicableTo((org.la4j.Vector) basicVector24, (org.la4j.Vector) basicVector33);
        org.la4j.Matrix matrix35 = basicVector33.toColumnMatrix();
        org.la4j.Matrix matrix36 = sparseVector14.outerProduct((org.la4j.Vector) basicVector33);
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct37 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random39 = null;
        org.la4j.vector.DenseVector denseVector40 = org.la4j.vector.DenseVector.random(0, random39);
        org.la4j.vector.sparse.CompressedVector compressedVector42 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat43 = null;
        java.lang.String str44 = compressedVector42.toMatrixMarket(numberFormat43);
        org.la4j.Vector vector46 = compressedVector42.add((double) 52);
        org.la4j.Vector vector48 = compressedVector42.sliceRight((int) (byte) 10);
        org.la4j.Vector vector49 = ooPlaceVectorHadamardProduct37.apply(denseVector40, (org.la4j.vector.SparseVector) compressedVector42);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorHadamardProduct0.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) compressedVector42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(sparseVector14);
        org.junit.Assert.assertNotNull(cCSMatrix20);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(denseVector40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str44, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector46);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertNotNull(vector49);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.Vector vector4 = compressedVector1.blankOfLength(52);
        org.la4j.iterator.VectorIterator vectorIterator5 = vector4.iterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator9 = cRSMatrix8.nonZeroIterator();
        org.la4j.Vector vector11 = cRSMatrix8.getColumn(100);
        boolean boolean14 = cRSMatrix8.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator16 = cRSMatrix8.nonZeroIteratorOfColumn((-1));
        int int17 = vectorIterator16.index();
        org.la4j.iterator.VectorIterator vectorIterator18 = null;
        org.la4j.iterator.VectorIterator vectorIterator19 = vectorIterator16.andAlsoDivide(vectorIterator18);
        org.la4j.iterator.VectorIterator vectorIterator20 = vectorIterator5.orElseAdd(vectorIterator18);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix23 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator24 = cRSMatrix23.nonZeroIterator();
        org.la4j.Vector vector26 = cRSMatrix23.getColumn(100);
        boolean boolean29 = cRSMatrix23.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator31 = cRSMatrix23.nonZeroIteratorOfColumn((-1));
        int int32 = vectorIterator31.index();
        org.la4j.iterator.VectorIterator vectorIterator33 = null;
        org.la4j.iterator.VectorIterator vectorIterator34 = vectorIterator31.andAlsoDivide(vectorIterator33);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator38 = cRSMatrix37.nonZeroIterator();
        org.la4j.Vector vector40 = cRSMatrix37.getColumn(100);
        boolean boolean43 = cRSMatrix37.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator45 = cRSMatrix37.nonZeroIteratorOfColumn((-1));
        int int46 = vectorIterator45.index();
        org.la4j.iterator.VectorIterator vectorIterator47 = null;
        org.la4j.iterator.VectorIterator vectorIterator48 = vectorIterator45.andAlsoDivide(vectorIterator47);
        org.la4j.iterator.VectorIterator vectorIterator49 = vectorIterator31.andAlsoMultiply(vectorIterator47);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator50 = vectorIterator20.andAlsoMultiply(vectorIterator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(vectorIterator5);
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vectorIterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator19);
        org.junit.Assert.assertNotNull(vectorIterator20);
        org.junit.Assert.assertNotNull(cRSMatrix23);
        org.junit.Assert.assertNotNull(matrixIterator24);
        org.junit.Assert.assertNotNull(vector26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(vectorIterator31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator34);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertNotNull(matrixIterator38);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vectorIterator45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator48);
        org.junit.Assert.assertNotNull(vectorIterator49);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        double[] doubleArray16 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray23 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray30 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray37 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray44 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray45 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix46 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray45);
        basic2DMatrix46.setAll((double) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double56 = rowMajorSparseMatrix52.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix52.multiplyByItsTranspose();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix60 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix61 = rowMajorSparseMatrix60.shuffle();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix62 = org.la4j.Matrix.block((org.la4j.Matrix) cRSMatrix2, (org.la4j.Matrix) basic2DMatrix46, (org.la4j.Matrix) rowMajorSparseMatrix52, matrix61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(basic2DMatrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double47 = cCSMatrix44.get((int) (byte) 0, (int) (short) 1);
        double double48 = cCSMatrix44.min();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix49 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '5' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix4 = cCSMatrix2.transpose();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure21 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = matrix4.foldRow((-1), vectorAccumulator18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertNotNull(vectorProcedure21);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.Matrix matrix41 = basic1DMatrix38.copyOfShape((int) (short) 0, 1);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean45 = cCSMatrix44.isRowMajor();
        org.la4j.Matrix matrix48 = cCSMatrix44.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator49 = cCSMatrix44.nonZeroColumnMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor50 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cCSMatrix44);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix38, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator49);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.la4j.vector.VectorFactory<org.la4j.vector.sparse.CompressedVector> compressedVectorVectorFactory0 = org.la4j.Vectors.SPARSE;
        org.junit.Assert.assertNotNull(compressedVectorVectorFactory0);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator9 = cCSMatrix2.nonZeroIteratorOfColumn((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.la4j.Matrix matrix6 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray9 = matrix6.foldColumns(vectorAccumulator8);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix10 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray((-1), (int) (byte) -1, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix10);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.fromCSV("March 2015");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"March\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant((int) (byte) 0, (int) ' ', 10.0d);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix67 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction74 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator75 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction74);
        double double76 = matrix72.fold(matrixAccumulator75);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure77 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator75);
        cCSMatrix67.eachNonZero(matrixProcedure77);
        org.la4j.Matrix matrix79 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix62, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix67);
        org.la4j.vector.DenseVector denseVector82 = org.la4j.vector.DenseVector.unit(0);
        java.text.NumberFormat numberFormat83 = null;
        java.lang.String str84 = denseVector82.toMatrixMarket(numberFormat83);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix85 = cCSMatrix67.insertColumn((int) ' ', (org.la4j.Vector) denseVector82);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal column number, must be 0..0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrixAccumulator75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(denseVector82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str84, "%%MatrixMarket vector array real\n0\n");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator5 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix6 = cCSMatrix4.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector7 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector1, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix31.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double41 = rowMajorSparseMatrix37.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix42 = rowMajorSparseMatrix37.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct43 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean44 = sparseMatrix42.equals((java.lang.Object) ooPlaceOuterProduct43);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix31.hadamardProduct((org.la4j.Matrix) sparseMatrix42);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator46 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double47 = sparseMatrix42.foldNonZero(matrixAccumulator46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double55 = rowMajorSparseMatrix51.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix56 = rowMajorSparseMatrix51.toSparseMatrix();
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix51.removeFirstColumn();
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix42, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix51);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix63 = sparseMatrix42.slice((int) (short) -1, 1, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument -1; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrixAccumulator46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.NEGATIVE_INFINITY + "'", double47 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asPlusFunction((double) 10);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition2 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double6 = cRSMatrix5.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.Matrix matrix12 = ooPlaceMatricesAddition2.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix5, rowMajorSparseMatrix10);
        boolean boolean13 = basicVector1.equals((java.lang.Object) rowMajorSparseMatrix10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction23 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator24 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction23);
        double double25 = matrix21.fold(matrixAccumulator24);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator24);
        cCSMatrix16.eachNonZero(matrixProcedure26);
        rowMajorSparseMatrix10.eachNonZero(matrixProcedure26);
        // The following exception was thrown during execution in test generation
        try {
            matrixProcedure26.apply((int) (byte) 100, (int) (byte) -1, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertNotNull(cRSMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrixAccumulator24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure26);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix7 = cRSMatrix2.blankOfShape((int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        double double16 = denseVector15.product();
        double[] doubleArray17 = denseVector15.toArray();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean28 = sparseMatrix26.equals((java.lang.Object) ooPlaceOuterProduct27);
        org.la4j.vector.DenseVector denseVector30 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random32 = null;
        org.la4j.vector.DenseVector denseVector33 = org.la4j.vector.DenseVector.random(0, random32);
        java.lang.String str34 = denseVector33.toString();
        ooPlaceOuterProduct27.ensureApplicableTo((org.la4j.Vector) denseVector30, (org.la4j.Vector) denseVector33);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray43 = cCSMatrix41.foldRows(vectorAccumulator42);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray43);
        org.la4j.vector.dense.BasicVector basicVector45 = new org.la4j.vector.dense.BasicVector(doubleArray43);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix50 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray52 = cCSMatrix50.foldRows(vectorAccumulator51);
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray52);
        org.la4j.vector.dense.BasicVector basicVector54 = new org.la4j.vector.dense.BasicVector(doubleArray52);
        ooPlaceOuterProduct36.ensureApplicableTo((org.la4j.Vector) basicVector45, (org.la4j.Vector) basicVector54);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random58 = null;
        org.la4j.vector.DenseVector denseVector59 = org.la4j.vector.DenseVector.random(0, random58);
        java.util.Random random61 = null;
        org.la4j.vector.DenseVector denseVector62 = org.la4j.vector.DenseVector.random(0, random61);
        org.la4j.Matrix matrix63 = ooPlaceOuterProduct56.apply(denseVector59, denseVector62);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct36.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector65);
        java.text.NumberFormat numberFormat67 = null;
        java.lang.String str69 = denseVector59.mkString(numberFormat67, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double72 = compressedVector71.euclideanNorm();
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct27.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.Vector vector74 = ooPlaceVectorHadamardProduct0.apply(denseVector15, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct75 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix80 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator81 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray82 = cCSMatrix80.foldRows(vectorAccumulator81);
        org.la4j.matrix.DenseMatrix denseMatrix83 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray82);
        org.la4j.vector.dense.BasicVector basicVector84 = new org.la4j.vector.dense.BasicVector(doubleArray82);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix89 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator90 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray91 = cCSMatrix89.foldRows(vectorAccumulator90);
        org.la4j.matrix.DenseMatrix denseMatrix92 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray91);
        org.la4j.vector.dense.BasicVector basicVector93 = new org.la4j.vector.dense.BasicVector(doubleArray91);
        ooPlaceOuterProduct75.ensureApplicableTo((org.la4j.Vector) basicVector84, (org.la4j.Vector) basicVector93);
        java.lang.String str95 = basicVector93.toString();
        org.la4j.vector.SparseVector sparseVector96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector97 = ooPlaceVectorHadamardProduct0.apply((org.la4j.vector.DenseVector) basicVector93, sparseVector96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(denseVector30);
        org.junit.Assert.assertNotNull(denseVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(cCSMatrix50);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(denseVector59);
        org.junit.Assert.assertNotNull(denseVector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(cCSMatrix80);
        org.junit.Assert.assertNotNull(vectorAccumulator81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix83);
        org.junit.Assert.assertNotNull(cCSMatrix89);
        org.junit.Assert.assertNotNull(vectorAccumulator90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000" + "'", str95, "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.la4j.Matrix matrix4 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray7 = matrix4.foldColumns(vectorAccumulator6);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix11 = basic2DMatrix8.blankOfShape((int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix8);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) '4', (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = basic2DMatrix2.get((int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        byte[] byteArray3 = basic1DMatrix2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector4 = org.la4j.vector.sparse.CompressedVector.fromBinary(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CompressedVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic1DMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) (short) 100, 52.0d);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.SEIDEL;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix4.isRowMajor();
        org.la4j.Matrix matrix8 = cCSMatrix4.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix24 = rowMajorSparseMatrix19.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct25 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean26 = sparseMatrix24.equals((java.lang.Object) ooPlaceOuterProduct25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix13.hadamardProduct((org.la4j.Matrix) sparseMatrix24);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix4, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        double double37 = rowMajorSparseMatrix32.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int38 = rowMajorSparseMatrix32.cardinality();
        org.la4j.Vector vector40 = rowMajorSparseMatrix32.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation41 = ooPlaceMatricesSubtraction1.partiallyApply(rowMajorSparseMatrix32);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication42 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.Matrix matrix48 = ooPlaceMatrixByItsTransposeMultiplication42.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation49 = ooPlaceMatricesSubtraction1.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.linear.LinearSystemSolver linearSystemSolver50 = solverFactory0.create((org.la4j.Matrix) cCSMatrix45);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = cCSMatrix45.maxInColumn((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(matrixMatrixOperation41);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixMatrixOperation49);
        org.junit.Assert.assertNotNull(linearSystemSolver50);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (-1.0d));
        org.junit.Assert.assertNotNull(cRSMatrix2);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct9 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double13 = cRSMatrix12.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean18 = advancedMatrixPredicate14.test((org.la4j.Matrix) columnMajorSparseMatrix17);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter19 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix17);
        org.la4j.Matrix matrix20 = ooPlaceMatrixHadamardProduct9.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix12, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix17);
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix8, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix17);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean25 = cCSMatrix24.isRowMajor();
        org.la4j.Matrix matrix28 = cCSMatrix24.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix24.nonZeroColumnMajorIterator();
        double[][] doubleArray30 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix31 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix33 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix24, denseMatrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(denseMatrix31);
        org.junit.Assert.assertNotNull(denseMatrix32);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.Matrix matrix40 = basic2DMatrix37.blankOfColumns(52);
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter41 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) basic2DMatrix37);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct42 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix45 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str46 = basic2DMatrix45.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition47 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double51 = cRSMatrix50.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix55 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix56 = rowMajorSparseMatrix55.removeLastRow();
        org.la4j.Matrix matrix57 = ooPlaceMatricesAddition47.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix50, rowMajorSparseMatrix55);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix60 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix62 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition47.apply(columnMajorSparseMatrix60, denseMatrix62);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix66 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray67 = columnMajorSparseMatrix66.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation68 = ooPlaceMatricesAddition47.partiallyApply(columnMajorSparseMatrix66);
        org.la4j.Matrix matrix69 = ooPlaceMatrixHadamardProduct42.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix45, columnMajorSparseMatrix66);
        org.la4j.Matrix matrix71 = basic2DMatrix45.add(1.0E100d);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix72 = basic2DMatrix37.insert(matrix71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Out of bounds: Cannot add 1 rows and 52 cols at 0, 0 in a 5x6 matrix.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(basic2DMatrix45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str46, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(denseMatrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        byte[] byteArray2 = cRSMatrix1.toBinary();
        org.la4j.matrix.functor.MatrixFunction matrixFunction6 = org.la4j.Matrices.asMulFunction(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix1.updateAt(52, (int) '4', matrixFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixFunction6);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        // The following exception was thrown during execution in test generation
        try {
            denseVector12.swapElements(1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean25 = cCSMatrix24.isRowMajor();
        org.la4j.Matrix matrix28 = cCSMatrix24.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix24.nonZeroColumnMajorIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate30 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix33 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean34 = advancedMatrixPredicate30.test((org.la4j.Matrix) columnMajorSparseMatrix33);
        org.la4j.Matrix matrix35 = columnMajorSparseMatrix33.rotate();
        boolean boolean36 = columnMajorSparseMatrix33.isRowMajor();
        boolean boolean37 = columnMajorSparseMatrix33.isRowMajor();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix24, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix33);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        org.la4j.Matrix matrix42 = org.la4j.Matrix.from2DArray(doubleArray39);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix45 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix48 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction55 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator56 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction55);
        double double57 = matrix53.fold(matrixAccumulator56);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure58 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator56);
        cCSMatrix48.eachNonZero(matrixProcedure58);
        org.la4j.Matrix matrix60 = basic2DMatrix45.kroneckerProduct((org.la4j.Matrix) cCSMatrix48);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesAddition0.ensureApplicableTo(matrix42, (org.la4j.Matrix) basic2DMatrix45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x0 does not equal to 1x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate30);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(basic2DMatrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrixAccumulator56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure58);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.Vector vector71 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str72 = vector71.toCSV();
        org.la4j.vector.SparseVector sparseVector73 = vector71.toSparseVector();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix76 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator77 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray78 = cCSMatrix76.foldRows(vectorAccumulator77);
        double double79 = sparseVector73.fold(vectorAccumulator77);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix82 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator83 = columnMajorSparseMatrix82.nonZeroIterator();
        double double84 = columnMajorSparseMatrix82.density();
        org.la4j.Vector vector85 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector73, columnMajorSparseMatrix82);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(vector71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str72, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector73);
        org.junit.Assert.assertNotNull(cCSMatrix76);
        org.junit.Assert.assertNotNull(vectorAccumulator77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 3.1622776601683795d + "'", double79 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix82);
        org.junit.Assert.assertNotNull(matrixIterator83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(vector85);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.Matrix matrix10 = rawLUDecompositor9.self();
        org.la4j.Matrix matrix11 = rawLUDecompositor9.self();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        int int11 = vectorIterator10.index();
        org.la4j.iterator.VectorIterator vectorIterator12 = null;
        org.la4j.iterator.VectorIterator vectorIterator13 = vectorIterator10.orElseAdd(vectorIterator12);
        // The following exception was thrown during execution in test generation
        try {
            vectorIterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator13);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate27 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix30 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean31 = advancedMatrixPredicate27.test((org.la4j.Matrix) columnMajorSparseMatrix30);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter32 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix30);
        org.la4j.Matrix matrix33 = denseMatrix25.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix30);
        org.la4j.vector.functor.VectorFunction vectorFunction36 = org.la4j.Vectors.asModFunction((double) (byte) 0);
        denseMatrix25.updateRow((int) (byte) 100, vectorFunction36);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = denseMatrix25.get((int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate27);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(vectorFunction36);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.FORWARD_BACK_SUBSTITUTION;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix4.isRowMajor();
        org.la4j.Matrix matrix8 = cCSMatrix4.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix24 = rowMajorSparseMatrix19.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct25 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean26 = sparseMatrix24.equals((java.lang.Object) ooPlaceOuterProduct25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix13.hadamardProduct((org.la4j.Matrix) sparseMatrix24);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix4, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix4.iterator();
        org.la4j.Matrix matrix32 = cCSMatrix4.blankOfShape(10, (int) '4');
        org.la4j.linear.LinearSystemSolver linearSystemSolver33 = solverFactory0.create((org.la4j.Matrix) cCSMatrix4);
        int int34 = linearSystemSolver33.equations();
        int int35 = linearSystemSolver33.unknowns();
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(linearSystemSolver33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.identity((int) '#');
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromBinary(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean28 = sparseMatrix26.equals((java.lang.Object) ooPlaceOuterProduct27);
        org.la4j.vector.dense.BasicVector basicVector30 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector31 = basicVector30.copy();
        org.la4j.Matrix matrix32 = basicVector30.toDiagonalMatrix();
        org.la4j.Vector vector34 = basicVector30.blankOfLength(52);
        org.la4j.vector.SparseVector sparseVector36 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator52 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray53 = cCSMatrix51.foldRows(vectorAccumulator52);
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray53);
        org.la4j.vector.dense.BasicVector basicVector55 = new org.la4j.vector.dense.BasicVector(doubleArray53);
        ooPlaceOuterProduct37.ensureApplicableTo((org.la4j.Vector) basicVector46, (org.la4j.Vector) basicVector55);
        org.la4j.Matrix matrix57 = basicVector55.toColumnMatrix();
        org.la4j.Matrix matrix58 = sparseVector36.outerProduct((org.la4j.Vector) basicVector55);
        org.la4j.Matrix matrix59 = basicVector55.toRowMatrix();
        org.la4j.Matrix matrix60 = ooPlaceOuterProduct27.apply((org.la4j.vector.DenseVector) basicVector30, (org.la4j.vector.DenseVector) basicVector55);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication61 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector63 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector63.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct67 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        double double76 = rowMajorSparseMatrix71.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int77 = rowMajorSparseMatrix71.cardinality();
        org.la4j.Vector vector79 = rowMajorSparseMatrix71.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix82 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix83 = ooPlaceMatrixHadamardProduct67.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix71, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix82);
        org.la4j.Vector vector84 = ooPlaceVectorByMatrixMultiplication61.apply((org.la4j.vector.SparseVector) compressedVector63, columnMajorSparseMatrix82);
        boolean boolean86 = compressedVector63.isZeroAt((int) ' ');
        boolean boolean88 = compressedVector63.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory89 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector90 = compressedVector63.to(basicVectorVectorFactory89);
        org.la4j.Matrix matrix91 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector55, (org.la4j.vector.DenseVector) basicVector90);
        org.la4j.vector.DenseVector denseVector92 = null;
        org.la4j.vector.dense.BasicVector basicVector94 = new org.la4j.vector.dense.BasicVector((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix95 = ooPlaceOuterProduct9.apply(denseVector92, (org.la4j.vector.DenseVector) basicVector94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(vector31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertNotNull(sparseVector36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertNotNull(vectorAccumulator52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vector84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory89);
        org.junit.Assert.assertNotNull(basicVector90);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator41 = columnMajorSparseMatrix40.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator42 = columnMajorSparseMatrix40.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix45 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator46 = cRSMatrix45.nonZeroIterator();
        org.la4j.Vector vector48 = cRSMatrix45.getColumn(100);
        boolean boolean51 = cRSMatrix45.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor52 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix45);
        double double53 = cRSMatrix45.infinityNorm();
        org.la4j.Matrix matrix54 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix40, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix45);
        org.la4j.Matrix matrix55 = matrix54.removeFirstRow();
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(cRSMatrix45);
        org.junit.Assert.assertNotNull(matrixIterator46);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        basic2DMatrix36.setAll((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = basic2DMatrix36.get((int) (byte) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        ooPlaceOuterProduct2.ensureApplicableTo((org.la4j.Vector) basicVector11, (org.la4j.Vector) basicVector20);
        java.lang.String str22 = basicVector11.toMatrixMarket();
        double[] doubleArray23 = basicVector11.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix24 = org.la4j.matrix.SparseMatrix.from1DArray((int) (byte) 100, 52, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str22, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct3 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector(doubleArray10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray19 = cCSMatrix17.foldRows(vectorAccumulator18);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray19);
        org.la4j.vector.dense.BasicVector basicVector21 = new org.la4j.vector.dense.BasicVector(doubleArray19);
        ooPlaceOuterProduct3.ensureApplicableTo((org.la4j.Vector) basicVector12, (org.la4j.Vector) basicVector21);
        java.lang.String str23 = basicVector12.toMatrixMarket();
        double[] doubleArray24 = basicVector12.toArray();
        int[] intArray29 = new int[] { 10, (byte) 100, (byte) -1, (-1) };
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        double[] doubleArray41 = basicVector40.toArray();
        int[] intArray47 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector48 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray41, intArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix49 = new org.la4j.matrix.sparse.CRSMatrix((int) (byte) -1, 10, 10, doubleArray24, intArray29, intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str23, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 100, -1, -1]");
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition6 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix9 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double10 = cRSMatrix9.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition6.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix9, rowMajorSparseMatrix14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix25 = ooPlaceMatricesAddition6.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix19, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication26 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator30 = cRSMatrix29.nonZeroIterator();
        org.la4j.Vector vector32 = cRSMatrix29.getColumn(100);
        boolean boolean35 = cRSMatrix29.nonZeroAt(1, (int) (short) 0);
        java.util.Random random38 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix39 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random38);
        org.la4j.Matrix matrix40 = ooPlaceMatricesMultiplication26.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix29, (org.la4j.matrix.DenseMatrix) basic2DMatrix39);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix41 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix19, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '10' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(cRSMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(matrixIterator30);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector2 = org.la4j.vector.sparse.CompressedVector.zero(0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor8 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cCSMatrix2);
        org.la4j.Matrix matrix9 = rawLUDecompositor8.self();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation4 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation5 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray12 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray41 = new double[][] { doubleArray12, doubleArray19, doubleArray26, doubleArray33, doubleArray40 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix42 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray41);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation43 = matrixMatrixMatrixOperation5.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix42);
        org.la4j.Matrix matrix45 = basic2DMatrix42.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction52 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator53 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction52);
        double double54 = matrix50.fold(matrixAccumulator53);
        double double55 = matrix50.manhattanNorm();
        matrixMatrixMatrixOperation4.ensureApplicableTo(matrix45, matrix50);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix59 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator60 = columnMajorSparseMatrix59.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double69 = rowMajorSparseMatrix65.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix70 = rowMajorSparseMatrix65.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate71 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean72 = sparseMatrix70.is(advancedMatrixPredicate71);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator74 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double75 = sparseMatrix70.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator74);
        org.la4j.vector.functor.VectorProcedure vectorProcedure76 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator74);
        columnMajorSparseMatrix59.eachNonZeroInRow((-1), vectorProcedure76);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix80 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator81 = cRSMatrix80.nonZeroIterator();
        org.la4j.Vector vector83 = cRSMatrix80.getColumn(100);
        boolean boolean86 = cRSMatrix80.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix87 = matrixMatrixMatrixOperation4.apply(columnMajorSparseMatrix59, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix80);
        org.la4j.Vector vector89 = cRSMatrix80.getColumn((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix90 = rowMajorSparseMatrix2.insertColumn((int) (byte) 10, vector89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 10. Should be: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation4);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(basic2DMatrix42);
        org.junit.Assert.assertNotNull(matrixMatrixOperation43);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixAccumulator53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrixIterator60);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix70);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure76);
        org.junit.Assert.assertNotNull(cRSMatrix80);
        org.junit.Assert.assertNotNull(matrixIterator81);
        org.junit.Assert.assertNotNull(vector83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(vector89);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) (short) 10, 52.0d);
        org.la4j.linear.SquareRootSolver squareRootSolver3 = new org.la4j.linear.SquareRootSolver(matrix2);
        org.la4j.vector.sparse.CompressedVector compressedVector6 = new org.la4j.vector.sparse.CompressedVector((int) '4', 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector7 = squareRootSolver3.solve((org.la4j.Vector) compressedVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double6 = rowMajorSparseMatrix3.maxInColumn((int) (byte) 1);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int9 = rowMajorSparseMatrix3.cardinality();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix12 = rowMajorSparseMatrix3.sliceBottomRight((int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument 52; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.la4j.matrix.functor.MatrixFunction matrixFunction2 = org.la4j.Matrices.asMulFunction((double) 1.0f);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator3 = org.la4j.Matrices.asProductFunctionAccumulator((double) (short) 0, matrixFunction2);
        org.junit.Assert.assertNotNull(matrixFunction2);
        org.junit.Assert.assertNotNull(matrixAccumulator3);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction20 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix23 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction24 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix27 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean28 = cCSMatrix27.isRowMajor();
        org.la4j.Matrix matrix31 = cCSMatrix27.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator32 = cCSMatrix27.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double46 = rowMajorSparseMatrix42.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix47 = rowMajorSparseMatrix42.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct48 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean49 = sparseMatrix47.equals((java.lang.Object) ooPlaceOuterProduct48);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix36.hadamardProduct((org.la4j.Matrix) sparseMatrix47);
        org.la4j.Matrix matrix51 = ooPlaceMatricesSubtraction24.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix27, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix36);
        org.la4j.Matrix matrix52 = ooPlaceMatricesSubtraction20.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix23, rowMajorSparseMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix56.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix61 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor62 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix61);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction20.apply(rowMajorSparseMatrix56, (org.la4j.matrix.DenseMatrix) basic2DMatrix61);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction64 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix67 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction68 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean72 = cCSMatrix71.isRowMajor();
        org.la4j.Matrix matrix75 = cCSMatrix71.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator76 = cCSMatrix71.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix80 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix82 = rowMajorSparseMatrix80.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix86 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double90 = rowMajorSparseMatrix86.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix91 = rowMajorSparseMatrix86.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct92 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean93 = sparseMatrix91.equals((java.lang.Object) ooPlaceOuterProduct92);
        org.la4j.Matrix matrix94 = rowMajorSparseMatrix80.hadamardProduct((org.la4j.Matrix) sparseMatrix91);
        org.la4j.Matrix matrix95 = ooPlaceMatricesSubtraction68.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix71, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix80);
        org.la4j.Matrix matrix96 = ooPlaceMatricesSubtraction64.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix67, rowMajorSparseMatrix80);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesAddition0.ensureApplicableTo(matrix63, (org.la4j.Matrix) basic2DMatrix67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 100x100 does not equal to 1x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(basic2DMatrix23);
        org.junit.Assert.assertNotNull(cCSMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(basic2DMatrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(basic2DMatrix67);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator76);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix80);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix86);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector2 = org.la4j.Vector.random((int) (byte) -1, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        double double81 = denseMatrix40.diagonalProduct();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.from2DArray(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(cCSMatrix39);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.DecompositorFactory.QR;
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.Matrix matrix11 = ooPlaceMatricesAddition1.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix4, rowMajorSparseMatrix9);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix16 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix17 = ooPlaceMatricesAddition1.apply(columnMajorSparseMatrix14, denseMatrix16);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray21 = columnMajorSparseMatrix20.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation22 = ooPlaceMatricesAddition1.partiallyApply(columnMajorSparseMatrix20);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean26 = cCSMatrix25.isRowMajor();
        org.la4j.Matrix matrix29 = cCSMatrix25.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator30 = cCSMatrix25.nonZeroColumnMajorIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate31 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix34 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean35 = advancedMatrixPredicate31.test((org.la4j.Matrix) columnMajorSparseMatrix34);
        org.la4j.Matrix matrix36 = columnMajorSparseMatrix34.rotate();
        boolean boolean37 = columnMajorSparseMatrix34.isRowMajor();
        boolean boolean38 = columnMajorSparseMatrix34.isRowMajor();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition1.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix25, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix34);
        org.la4j.decomposition.MatrixDecompositor matrixDecompositor40 = decompositorFactory0.create((org.la4j.Matrix) columnMajorSparseMatrix34);
        org.junit.Assert.assertNotNull(decompositorFactory0);
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(denseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation22);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator30);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate31);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrixDecompositor40);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.Matrix matrix44 = org.la4j.Matrix.constant(10, 0, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            matrixMatrixOperation40.ensureApplicableTo(matrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 1x35 does not equal to 10x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.iterator.MatrixIterator matrixIterator39 = basic2DMatrix37.iterator();
        org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape((int) ' ', 10);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = matrix42.trace();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrixIterator39);
        org.junit.Assert.assertNotNull(matrix42);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double9 = rowMajorSparseMatrix5.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix10 = rowMajorSparseMatrix5.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct11 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean12 = sparseMatrix10.equals((java.lang.Object) ooPlaceOuterProduct11);
        org.la4j.vector.dense.BasicVector basicVector14 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector15 = basicVector14.copy();
        org.la4j.Matrix matrix16 = basicVector1.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct11, (org.la4j.Vector) basicVector14);
        org.la4j.Vector vector18 = basicVector1.copyOfLength(1);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vector15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(vector18);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero((-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) ' ', (double) (short) 0);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        double double47 = rowMajorSparseMatrix42.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector48 = rowMajorSparseMatrix42.toRowVector();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = matrixMatrixMatrixOperation0.apply(rowMajorSparseMatrix42, rowMajorSparseMatrix52);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator60 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray61 = rowMajorSparseMatrix42.foldNonZeroInRows(vectorAccumulator60);
        org.la4j.vector.dense.BasicVector basicVector62 = new org.la4j.vector.dense.BasicVector(doubleArray61);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(vectorAccumulator60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray43 = basic2DMatrix37.toArray();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix44 = org.la4j.matrix.sparse.CRSMatrix.from2DArray(doubleArray43);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix45 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix48 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction55 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator56 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction55);
        double double57 = matrix53.fold(matrixAccumulator56);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure58 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator56);
        cCSMatrix48.eachNonZero(matrixProcedure58);
        cRSMatrix45.eachNonZero(matrixProcedure58);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix44.eachNonZero(matrixProcedure58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(cRSMatrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrixAccumulator56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure58);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.Vector vector4 = compressedVector1.blankOfLength(52);
        org.la4j.iterator.VectorIterator vectorIterator5 = vector4.iterator();
        java.text.NumberFormat numberFormat6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = vector4.mkString(numberFormat6, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(vectorIterator5);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix4 = cCSMatrix2.transpose();
        double double5 = cCSMatrix2.max();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = rowMajorSparseMatrix38.get(52, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
    }
}

