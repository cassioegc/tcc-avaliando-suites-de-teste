import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.constant((int) (short) 1, Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(basicVector2);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asConstFunction((-0.0d));
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor33 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero(10, (int) (byte) 1);
        java.text.NumberFormat numberFormat37 = null;
        java.lang.String str38 = rowMajorSparseMatrix36.toMatrixMarket(numberFormat37);
        boolean boolean39 = singularValueDecompositor33.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix36);
        org.la4j.Matrix[] matrixArray40 = singularValueDecompositor33.decompose();
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n" + "'", str38, "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(matrixArray40);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix22 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatrixHadamardProduct0.ensureApplicableTo((org.la4j.Matrix) denseMatrix19, (org.la4j.Matrix) cRSMatrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x0 does not equal to 10x10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(cRSMatrix22);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        java.util.Random random22 = null;
        org.la4j.vector.DenseVector denseVector23 = org.la4j.vector.DenseVector.random(0, random22);
        double double24 = denseVector23.product();
        double[] doubleArray25 = denseVector23.toArray();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix26 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (short) 100, 100, doubleArray25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double34 = rowMajorSparseMatrix30.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix35 = rowMajorSparseMatrix30.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate36 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean37 = sparseMatrix35.is(advancedMatrixPredicate36);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double40 = sparseMatrix35.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator39);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix41 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix26, sparseMatrix35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(denseVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(basic1DMatrix26);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix35);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.DenseVector denseVector1 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation2 = vectorVectorVectorOperation0.partiallyApply(denseVector1);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct3 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector(doubleArray10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray19 = cCSMatrix17.foldRows(vectorAccumulator18);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray19);
        org.la4j.vector.dense.BasicVector basicVector21 = new org.la4j.vector.dense.BasicVector(doubleArray19);
        ooPlaceOuterProduct3.ensureApplicableTo((org.la4j.Vector) basicVector12, (org.la4j.Vector) basicVector21);
        org.la4j.vector.sparse.CompressedVector compressedVector24 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector24.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix30 = ooPlaceOuterProduct3.apply((org.la4j.vector.SparseVector) compressedVector24, (org.la4j.vector.SparseVector) compressedVector29);
        double double31 = compressedVector29.min();
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation32 = vectorVectorVectorOperation0.partiallyApply((org.la4j.vector.SparseVector) compressedVector29);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix35 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator36 = columnMajorSparseMatrix35.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double45 = rowMajorSparseMatrix41.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix46 = rowMajorSparseMatrix41.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate47 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean48 = sparseMatrix46.is(advancedMatrixPredicate47);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator50 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double51 = sparseMatrix46.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator50);
        org.la4j.vector.functor.VectorProcedure vectorProcedure52 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator50);
        columnMajorSparseMatrix35.eachNonZeroInRow((-1), vectorProcedure52);
        compressedVector29.each(vectorProcedure52);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation0);
        org.junit.Assert.assertNotNull(vectorVectorOperation2);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(vectorVectorOperation32);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrixIterator36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix46);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure52);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        basic2DMatrix37.setAll((double) (byte) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix48 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator49 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray50 = cCSMatrix48.foldRows(vectorAccumulator49);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray50);
        org.la4j.vector.dense.BasicVector basicVector52 = new org.la4j.vector.dense.BasicVector(doubleArray50);
        double[] doubleArray53 = basicVector52.toArray();
        int[] intArray59 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector60 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray53, intArray59);
        int[] intArray61 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix62 = basic2DMatrix37.select(intArray59, intArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rows or columns selected.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(cCSMatrix48);
        org.junit.Assert.assertNotNull(vectorAccumulator49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        boolean boolean5 = sparseVector3.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator6 = sparseVector3.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct7 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator13 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray14 = cCSMatrix12.foldRows(vectorAccumulator13);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray14);
        org.la4j.vector.dense.BasicVector basicVector16 = new org.la4j.vector.dense.BasicVector(doubleArray14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray23);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector(doubleArray23);
        ooPlaceOuterProduct7.ensureApplicableTo((org.la4j.Vector) basicVector16, (org.la4j.Vector) basicVector25);
        org.la4j.vector.sparse.CompressedVector compressedVector28 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix29 = compressedVector28.toColumnMatrix();
        org.la4j.Matrix matrix30 = sparseVector3.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct7, (org.la4j.Vector) compressedVector28);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation31 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector33 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random35 = null;
        org.la4j.vector.DenseVector denseVector36 = org.la4j.vector.DenseVector.random(0, random35);
        org.la4j.Matrix matrix37 = matrixVectorVectorOperation31.apply(sparseVector33, denseVector36);
        org.la4j.Vector vector39 = denseVector36.divide((double) (-1L));
        org.la4j.vector.SparseVector sparseVector40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix41 = ooPlaceOuterProduct7.apply(denseVector36, sparseVector40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(vectorIterator6);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertNotNull(vectorAccumulator13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation31);
        org.junit.Assert.assertNotNull(sparseVector33);
        org.junit.Assert.assertNotNull(denseVector36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vector39);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix6 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator7 = cRSMatrix6.nonZeroIterator();
        org.la4j.Vector vector9 = cRSMatrix6.getColumn(100);
        boolean boolean12 = cRSMatrix6.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator14 = cRSMatrix6.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = cRSMatrix6.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix15);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction17 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix25 = ooPlaceMatricesSubtraction17.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix21, denseMatrix24);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix28 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double29 = columnMajorSparseMatrix28.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory30 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix31 = columnMajorSparseMatrix28.to(basic1DMatrixMatrixFactory30);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure37 = null;
        rowMajorSparseMatrix35.eachNonZero(matrixProcedure37);
        org.la4j.Matrix matrix39 = ooPlaceMatricesSubtraction17.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix31, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        cCSMatrix42.setAll((double) (-1L));
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator45 = cCSMatrix42.nonZeroColumnMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix46 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix31, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cRSMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vectorIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory30);
        org.junit.Assert.assertNotNull(basic1DMatrix31);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator45);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = choleskyDecompositor4.self();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        boolean boolean14 = choleskyDecompositor4.applicableTo((org.la4j.Matrix) denseMatrix13);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix15 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix19 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction20 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean24 = cCSMatrix23.isRowMajor();
        org.la4j.Matrix matrix27 = cCSMatrix23.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix23.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix32.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double42 = rowMajorSparseMatrix38.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix43 = rowMajorSparseMatrix38.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct44 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean45 = sparseMatrix43.equals((java.lang.Object) ooPlaceOuterProduct44);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix32.hadamardProduct((org.la4j.Matrix) sparseMatrix43);
        org.la4j.Matrix matrix47 = ooPlaceMatricesSubtraction20.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix23, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32);
        org.la4j.Matrix matrix48 = ooPlaceMatricesSubtraction16.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix19, rowMajorSparseMatrix32);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor49 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix32);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix51 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix52 = inPlaceCopyMatrixToMatrix15.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32, (org.la4j.matrix.SparseMatrix) cRSMatrix51);
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix59 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator60 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray61 = cCSMatrix59.foldRows(vectorAccumulator60);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix62 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray61);
        double[][] doubleArray63 = basic1DMatrix62.toArray();
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix15.apply(denseMatrix54, (org.la4j.matrix.DenseMatrix) basic1DMatrix62);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct65 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix69 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix69.removeLastRow();
        double double74 = rowMajorSparseMatrix69.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int75 = rowMajorSparseMatrix69.cardinality();
        org.la4j.Vector vector77 = rowMajorSparseMatrix69.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix80 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct65.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix69, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix80);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition82 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix85 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double86 = cRSMatrix85.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix90 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix91 = rowMajorSparseMatrix90.removeLastRow();
        org.la4j.Matrix matrix92 = ooPlaceMatricesAddition82.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix85, rowMajorSparseMatrix90);
        org.la4j.Matrix matrix93 = inPlaceCopyMatrixToMatrix15.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix80, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix90);
        org.la4j.Matrix matrix95 = rowMajorSparseMatrix90.blankOfRows(52);
        boolean boolean96 = choleskyDecompositor4.applicableTo(matrix95);
        org.la4j.Matrix matrix98 = matrix95.subtract((double) 0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(basic2DMatrix19);
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(cRSMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(cCSMatrix59);
        org.junit.Assert.assertNotNull(vectorAccumulator60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(cRSMatrix85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.vector.functor.VectorFunction vectorFunction58 = org.la4j.Vectors.INV_FUNCTION;
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix41.updateRow((int) (short) 10, vectorFunction58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(vectorFunction58);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray25);
        org.la4j.vector.dense.BasicVector basicVector27 = new org.la4j.vector.dense.BasicVector(doubleArray25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        ooPlaceOuterProduct18.ensureApplicableTo((org.la4j.Vector) basicVector27, (org.la4j.Vector) basicVector36);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random40 = null;
        org.la4j.vector.DenseVector denseVector41 = org.la4j.vector.DenseVector.random(0, random40);
        java.util.Random random43 = null;
        org.la4j.vector.DenseVector denseVector44 = org.la4j.vector.DenseVector.random(0, random43);
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct38.apply(denseVector41, denseVector44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct18.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector47);
        java.text.NumberFormat numberFormat49 = null;
        java.lang.String str51 = denseVector41.mkString(numberFormat49, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double54 = compressedVector53.euclideanNorm();
        org.la4j.Matrix matrix55 = ooPlaceOuterProduct9.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication56 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector58 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector58.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct62 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix66 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix67 = rowMajorSparseMatrix66.removeLastRow();
        double double71 = rowMajorSparseMatrix66.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int72 = rowMajorSparseMatrix66.cardinality();
        org.la4j.Vector vector74 = rowMajorSparseMatrix66.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix77 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix78 = ooPlaceMatrixHadamardProduct62.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix66, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix77);
        org.la4j.Vector vector79 = ooPlaceVectorByMatrixMultiplication56.apply((org.la4j.vector.SparseVector) compressedVector58, columnMajorSparseMatrix77);
        boolean boolean81 = compressedVector58.isZeroAt((int) ' ');
        boolean boolean83 = compressedVector58.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory84 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector85 = compressedVector58.to(basicVectorVectorFactory84);
        org.la4j.vector.sparse.CompressedVector compressedVector87 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat88 = null;
        java.lang.String str89 = compressedVector87.toMatrixMarket(numberFormat88);
        org.la4j.Vector vector91 = compressedVector87.add((double) 52);
        compressedVector87.swapElements((int) (short) 1, (int) (byte) 1);
        org.la4j.Matrix matrix95 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector85, (org.la4j.vector.SparseVector) compressedVector87);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseVector41);
        org.junit.Assert.assertNotNull(denseVector44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory84);
        org.junit.Assert.assertNotNull(basicVector85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str89, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector91);
        org.junit.Assert.assertNotNull(matrix95);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory84 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix85 = basic2DMatrix43.to(basic1DMatrixMatrixFactory84);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector87 = basic1DMatrix85.getColumn(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory84);
        org.junit.Assert.assertNotNull(basic1DMatrix85);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        double double6 = rowMajorSparseMatrix3.infinityNorm();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector20 = compressedVector18.multiply((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double8 = cRSMatrix7.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator9 = cRSMatrix7.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = rowMajorMatrixIterator9.orElseSubtract(matrixIterator13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator18.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.iterator.MatrixIterator matrixIterator28 = matrixIterator14.andAlsoMultiply(matrixIterator27);
        org.la4j.iterator.MatrixIterator matrixIterator29 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator14);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double33 = cRSMatrix32.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator34 = cRSMatrix32.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator38 = columnMajorSparseMatrix37.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator39 = rowMajorMatrixIterator34.orElseSubtract(matrixIterator38);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator43 = cCSMatrix42.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix46 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean47 = cCSMatrix46.isRowMajor();
        org.la4j.Matrix matrix50 = cCSMatrix46.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator51 = cCSMatrix46.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator52 = columnMajorMatrixIterator43.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator51);
        org.la4j.iterator.MatrixIterator matrixIterator53 = matrixIterator39.andAlsoMultiply(matrixIterator52);
        org.la4j.iterator.MatrixIterator matrixIterator54 = rowMajorMatrixIterator4.andAlsoMultiply(matrixIterator39);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(matrixIterator29);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrixIterator38);
        org.junit.Assert.assertNotNull(matrixIterator39);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator43);
        org.junit.Assert.assertNotNull(cCSMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator51);
        org.junit.Assert.assertNotNull(matrixIterator52);
        org.junit.Assert.assertNotNull(matrixIterator53);
        org.junit.Assert.assertNotNull(matrixIterator54);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int9 = rowMajorSparseMatrix3.cardinality();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation11 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation12 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray48 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation12.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.Matrix matrix52 = basic2DMatrix49.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction59 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator60 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction59);
        double double61 = matrix57.fold(matrixAccumulator60);
        double double62 = matrix57.manhattanNorm();
        matrixMatrixMatrixOperation11.ensureApplicableTo(matrix52, matrix57);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double71 = rowMajorSparseMatrix67.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix72 = rowMajorSparseMatrix67.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate73 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean74 = sparseMatrix72.is(advancedMatrixPredicate73);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator76 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double77 = sparseMatrix72.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator76);
        org.la4j.vector.functor.VectorProcedure vectorProcedure78 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator76);
        double[] doubleArray79 = matrix52.foldRows(vectorAccumulator76);
        double double80 = rowMajorSparseMatrix3.foldNonZeroInColumn((int) (short) 100, vectorAccumulator76);
        org.la4j.Matrix matrix81 = rowMajorSparseMatrix3.blank();
        double double82 = matrix81.manhattanNorm();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation11);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixAccumulator60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix72);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        double double28 = compressedVector26.min();
        org.la4j.Matrix matrix29 = compressedVector26.toColumnMatrix();
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor30 = new org.la4j.decomposition.RawQRDecompositor(matrix29);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asSumAccumulator((double) 100.0f);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero(1, 30);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        double double11 = cRSMatrix3.infinityNorm();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct12 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        double double21 = rowMajorSparseMatrix16.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int22 = rowMajorSparseMatrix16.cardinality();
        org.la4j.Vector vector24 = rowMajorSparseMatrix16.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct12.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator60 = cCSMatrix35.iterator();
        org.la4j.Matrix matrix63 = cCSMatrix35.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix64 = ooPlaceMatrixHadamardProduct12.applySymmetric(rowMajorSparseMatrix31, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix35);
        org.la4j.Matrix matrix65 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix31);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator66 = cRSMatrix3.nonZeroColumnMajorIterator();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator66);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal((int) (byte) 100, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix4 = rowMajorSparseMatrix2.removeRow((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..99");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asModFunction(Double.NaN);
        double double5 = matrixFunction1.evaluate(0, 30, (double) 1L);
        org.junit.Assert.assertNotNull(matrixFunction1);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.Matrix matrix5 = cRSMatrix2.blankOfRows((int) (short) 1);
        org.la4j.Matrix matrix6 = matrix5.removeLastColumn();
        double double7 = matrix6.sum();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        java.util.Spliterator<java.lang.Double> doubleSpliterator40 = basic2DMatrix38.spliterator();
        org.la4j.Matrix matrix43 = basic2DMatrix38.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray44 = basic2DMatrix38.toArray();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix45 = org.la4j.matrix.sparse.CRSMatrix.from2DArray(doubleArray44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double48 = compressedVector47.euclideanNorm();
        org.la4j.Vector vector50 = compressedVector47.blankOfLength(52);
        org.la4j.iterator.VectorIterator vectorIterator51 = vector50.iterator();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo((org.la4j.Matrix) cRSMatrix45, vector50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 52 does not equal to 6.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleSpliterator40);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(cRSMatrix45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(vector50);
        org.junit.Assert.assertNotNull(vectorIterator51);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix17 = denseMatrix15.rotate();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication18 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.Matrix matrix24 = ooPlaceMatrixByItsTransposeMultiplication18.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix21);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix27 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double28 = cRSMatrix27.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator29 = cRSMatrix27.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor30 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix27);
        double double31 = cRSMatrix27.max();
        org.la4j.Matrix matrix32 = ooPlaceMatrixByItsTransposeMultiplication18.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix27);
        org.la4j.Matrix matrix33 = matrix17.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication18);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix35 = ooPlaceMatrixByItsTransposeMultiplication18.apply(columnMajorSparseMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(cRSMatrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.Random random1 = null;
        org.la4j.Matrix matrix2 = org.la4j.Matrix.randomSymmetric((int) (byte) 0, random1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = cRSMatrix3.getOrElse(100, (int) (byte) 100, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asConstFunction(Double.NaN);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        boolean boolean29 = sparseVector3.nonZeroAt((int) (short) -1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector32 = sparseVector3.multiply((org.la4j.Matrix) rowMajorSparseMatrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 10 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.diagonal(1, (double) (byte) 0);
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix20.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory23 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix24 = matrix22.to(basic1DMatrixMatrixFactory23);
        double[] doubleArray31 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray38 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray45 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray52 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray59 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray60 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix61 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray60);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix62 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix63 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix24, (org.la4j.matrix.DenseMatrix) basic2DMatrix62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory23);
        org.junit.Assert.assertNotNull(basic1DMatrix24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(basic2DMatrix61);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.identity(100);
        java.util.Iterator<java.lang.Integer> intItor2 = cRSMatrix1.iteratorOfNonZeroRows();
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(intItor2);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.Random random2 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (byte) 0, (double) (-1), random2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = columnMajorSparseMatrix3.isZeroAt(52, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction3 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector4 = vector1.transform(vectorFunction3);
        org.la4j.Matrix matrix5 = vector1.toColumnMatrix();
        org.la4j.Matrix matrix7 = matrix5.blankOfColumns((int) '4');
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(vectorFunction3);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter5 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.INV_FUNCTION;
        double double10 = vectorFunction7.evaluate((int) (byte) -1, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix11 = columnMajorSparseMatrix3.transformColumn((int) (short) -1, vectorFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.0d) + "'", double10 == (-0.0d));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor3 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix2);
        org.la4j.Matrix[] matrixArray4 = rawQRDecompositor3.decompose();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(matrixArray4);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 1, (int) '4', (int) (short) 1);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = cCSMatrix3.toColumnMajorSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix3.eachNonZeroInColumn(52, vectorProcedure20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix4 = org.la4j.matrix.SparseMatrix.random((int) (byte) 0, (int) (short) -1, 0.0d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        java.util.Random random14 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random14);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition16 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double20 = cRSMatrix19.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.Matrix matrix26 = ooPlaceMatricesAddition16.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix19, rowMajorSparseMatrix24);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition27 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix30 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double31 = cRSMatrix30.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        org.la4j.Matrix matrix37 = ooPlaceMatricesAddition27.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix30, rowMajorSparseMatrix35);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix42 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix43 = ooPlaceMatricesAddition27.apply(columnMajorSparseMatrix40, denseMatrix42);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix47.removeLastRow();
        double double52 = rowMajorSparseMatrix47.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector53 = rowMajorSparseMatrix47.toRowVector();
        org.la4j.Matrix matrix54 = ooPlaceMatricesAddition16.apply(denseMatrix42, rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix57 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double60 = cCSMatrix57.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction62 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix63 = cCSMatrix57.transformRow(10, vectorFunction62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator67 = cRSMatrix66.nonZeroIterator();
        org.la4j.Vector vector69 = cRSMatrix66.getColumn(100);
        boolean boolean72 = cRSMatrix66.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor73 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix74 = ooPlaceMatricesAddition16.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix57, (org.la4j.matrix.SparseMatrix) cRSMatrix66);
        org.la4j.Matrix matrix75 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix57);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix78 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean79 = cCSMatrix78.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication80 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix83 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix84 = ooPlaceMatrixByItsTransposeMultiplication80.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix83);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix85 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix78, (org.la4j.matrix.DenseMatrix) basic2DMatrix83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(cRSMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(denseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(cCSMatrix57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertNotNull(matrixIterator67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(cCSMatrix78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix83);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = basic1DMatrix47.get((int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray25);
        org.la4j.vector.dense.BasicVector basicVector27 = new org.la4j.vector.dense.BasicVector(doubleArray25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        ooPlaceOuterProduct18.ensureApplicableTo((org.la4j.Vector) basicVector27, (org.la4j.Vector) basicVector36);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random40 = null;
        org.la4j.vector.DenseVector denseVector41 = org.la4j.vector.DenseVector.random(0, random40);
        java.util.Random random43 = null;
        org.la4j.vector.DenseVector denseVector44 = org.la4j.vector.DenseVector.random(0, random43);
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct38.apply(denseVector41, denseVector44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct18.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector47);
        java.text.NumberFormat numberFormat49 = null;
        java.lang.String str51 = denseVector41.mkString(numberFormat49, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double54 = compressedVector53.euclideanNorm();
        org.la4j.Matrix matrix55 = ooPlaceOuterProduct9.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.vector.dense.BasicVector basicVector61 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray60);
        org.la4j.Matrix matrix62 = basicVector61.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate63 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean64 = basicVector61.non(vectorPredicate63);
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct65 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random67 = null;
        org.la4j.vector.DenseVector denseVector68 = org.la4j.vector.DenseVector.random(0, random67);
        org.la4j.vector.sparse.CompressedVector compressedVector70 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat71 = null;
        java.lang.String str72 = compressedVector70.toMatrixMarket(numberFormat71);
        org.la4j.Vector vector74 = compressedVector70.add((double) 52);
        org.la4j.Vector vector76 = compressedVector70.sliceRight((int) (byte) 10);
        org.la4j.Vector vector77 = ooPlaceVectorHadamardProduct65.apply(denseVector68, (org.la4j.vector.SparseVector) compressedVector70);
        org.la4j.Matrix matrix78 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector61, (org.la4j.vector.SparseVector) compressedVector70);
        org.la4j.vector.DenseVector denseVector80 = org.la4j.vector.DenseVector.unit((int) 'a');
        org.la4j.Vector vector82 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str83 = vector82.toCSV();
        org.la4j.vector.SparseVector sparseVector84 = vector82.toSparseVector();
        boolean boolean86 = sparseVector84.isZeroAt(52);
        org.la4j.Matrix matrix87 = ooPlaceOuterProduct9.apply(denseVector80, sparseVector84);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseVector41);
        org.junit.Assert.assertNotNull(denseVector44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(vectorPredicate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(denseVector68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str72, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(vector76);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(denseVector80);
        org.junit.Assert.assertNotNull(vector82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str83, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double46 = rowMajorSparseMatrix42.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix47 = rowMajorSparseMatrix42.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate48 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean49 = sparseMatrix47.is(advancedMatrixPredicate48);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double52 = sparseMatrix47.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator51);
        org.la4j.vector.functor.VectorProcedure vectorProcedure53 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator51);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix36.eachNonZeroInRow((int) (byte) 100, vectorProcedure53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix47);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure53);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0, 52);
        org.la4j.Matrix matrix3 = sparseVector2.toColumnMatrix();
        java.lang.String str4 = matrix3.toMatrixMarket();
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "%%MatrixMarket matrix coordinate real general column-major\n0 1 0\n" + "'", str4, "%%MatrixMarket matrix coordinate real general column-major\n0 1 0\n");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.la4j.Matrix matrix2 = columnMajorSparseMatrix1.multiplyByItsTranspose();
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.asSumAccumulator(100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = columnMajorSparseMatrix1.foldColumn((int) (byte) -1, vectorAccumulator5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.random(1, (int) '#', 3.1622776601683795d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = cRSMatrix36.maxInRow(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        java.lang.String str12 = cRSMatrix3.toString();
        int[] intArray17 = new int[] { 'a', (short) 10, (short) 10, 1 };
        int[] intArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix19 = cRSMatrix3.select(intArray17, intArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n" + "'", str12, "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[97, 10, 10, 1]");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.la4j.matrix.DenseMatrix denseMatrix3 = org.la4j.matrix.DenseMatrix.constant(0, (int) (short) 10, (double) 'a');
        org.la4j.Vector vector4 = denseMatrix3.toColumnVector();
        org.junit.Assert.assertNotNull(denseMatrix3);
        org.junit.Assert.assertNotNull(vector4);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter5 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.Matrix matrix6 = noPivotGaussInverter5.inverse();
        org.la4j.Matrix matrix7 = noPivotGaussInverter5.self();
        org.la4j.Matrix matrix8 = noPivotGaussInverter5.self();
        org.la4j.Matrix matrix9 = noPivotGaussInverter5.inverse();
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication3 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector(doubleArray10);
        double[] doubleArray13 = basicVector12.toArray();
        org.la4j.Vector vector15 = basicVector12.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean20 = cCSMatrix19.isRowMajor();
        org.la4j.Matrix matrix23 = cCSMatrix19.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator24 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix28.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double38 = rowMajorSparseMatrix34.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = rowMajorSparseMatrix34.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct40 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean41 = sparseMatrix39.equals((java.lang.Object) ooPlaceOuterProduct40);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix28.hadamardProduct((org.la4j.Matrix) sparseMatrix39);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction16.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix19, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix28);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix47.removeLastRow();
        double double52 = rowMajorSparseMatrix47.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int53 = rowMajorSparseMatrix47.cardinality();
        org.la4j.Vector vector55 = rowMajorSparseMatrix47.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation56 = ooPlaceMatricesSubtraction16.partiallyApply(rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix59 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator60 = cRSMatrix59.nonZeroIterator();
        org.la4j.Vector vector62 = cRSMatrix59.getColumn(100);
        boolean boolean65 = cRSMatrix59.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor66 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix59);
        org.la4j.Matrix matrix67 = rawLUDecompositor66.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix70 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction16.ensureApplicableTo(matrix67, (org.la4j.Matrix) cRSMatrix70);
        org.la4j.Vector vector72 = ooPlaceVectorByMatrixMultiplication3.apply((org.la4j.vector.DenseVector) basicVector12, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix70);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector73 = compressedVector1.subtract(vector72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 32 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector15);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator24);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertNotNull(matrixMatrixOperation56);
        org.junit.Assert.assertNotNull(cRSMatrix59);
        org.junit.Assert.assertNotNull(matrixIterator60);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(cRSMatrix70);
        org.junit.Assert.assertNotNull(vector72);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        java.lang.String str20 = basicVector18.toString();
        java.lang.String str21 = basicVector18.toMatrixMarket();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000" + "'", str20, "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str21, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.zero((int) (byte) 10);
        org.junit.Assert.assertNotNull(compressedVector1);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        double double16 = denseVector15.product();
        double[] doubleArray17 = denseVector15.toArray();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean28 = sparseMatrix26.equals((java.lang.Object) ooPlaceOuterProduct27);
        org.la4j.vector.DenseVector denseVector30 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random32 = null;
        org.la4j.vector.DenseVector denseVector33 = org.la4j.vector.DenseVector.random(0, random32);
        java.lang.String str34 = denseVector33.toString();
        ooPlaceOuterProduct27.ensureApplicableTo((org.la4j.Vector) denseVector30, (org.la4j.Vector) denseVector33);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray43 = cCSMatrix41.foldRows(vectorAccumulator42);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray43);
        org.la4j.vector.dense.BasicVector basicVector45 = new org.la4j.vector.dense.BasicVector(doubleArray43);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix50 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray52 = cCSMatrix50.foldRows(vectorAccumulator51);
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray52);
        org.la4j.vector.dense.BasicVector basicVector54 = new org.la4j.vector.dense.BasicVector(doubleArray52);
        ooPlaceOuterProduct36.ensureApplicableTo((org.la4j.Vector) basicVector45, (org.la4j.Vector) basicVector54);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random58 = null;
        org.la4j.vector.DenseVector denseVector59 = org.la4j.vector.DenseVector.random(0, random58);
        java.util.Random random61 = null;
        org.la4j.vector.DenseVector denseVector62 = org.la4j.vector.DenseVector.random(0, random61);
        org.la4j.Matrix matrix63 = ooPlaceOuterProduct56.apply(denseVector59, denseVector62);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct36.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector65);
        java.text.NumberFormat numberFormat67 = null;
        java.lang.String str69 = denseVector59.mkString(numberFormat67, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double72 = compressedVector71.euclideanNorm();
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct27.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.Vector vector74 = ooPlaceVectorHadamardProduct0.apply(denseVector15, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.vector.sparse.CompressedVector compressedVector76 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat77 = null;
        java.lang.String str78 = compressedVector76.toMatrixMarket(numberFormat77);
        org.la4j.Vector vector80 = compressedVector76.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix83 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator84 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray85 = cCSMatrix83.foldRows(vectorAccumulator84);
        org.la4j.Vector vector86 = org.la4j.Vector.fromArray(doubleArray85);
        org.la4j.vector.SparseVector sparseVector87 = vector86.toSparseVector();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorHadamardProduct0.ensureApplicableTo(vector80, (org.la4j.Vector) sparseVector87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 32 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(denseVector30);
        org.junit.Assert.assertNotNull(denseVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(cCSMatrix50);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(denseVector59);
        org.junit.Assert.assertNotNull(denseVector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str78, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector80);
        org.junit.Assert.assertNotNull(cCSMatrix83);
        org.junit.Assert.assertNotNull(vectorAccumulator84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector86);
        org.junit.Assert.assertNotNull(sparseVector87);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.la4j.Matrix matrix6 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray9 = matrix6.foldColumns(vectorAccumulator8);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix10 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray9);
        org.la4j.vector.DenseVector denseVector11 = org.la4j.vector.DenseVector.fromArray(doubleArray9);
        org.la4j.matrix.DenseMatrix denseMatrix12 = org.la4j.matrix.DenseMatrix.from1DArray(10, 30, doubleArray9);
        java.util.Random random15 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random15);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct17 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        double double26 = rowMajorSparseMatrix21.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int27 = rowMajorSparseMatrix21.cardinality();
        org.la4j.Vector vector29 = rowMajorSparseMatrix21.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix32 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix33 = ooPlaceMatrixHadamardProduct17.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix21, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix32);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix38 = ooPlaceMatrixHadamardProduct17.apply(denseMatrix35, denseMatrix37);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix47 = rowMajorSparseMatrix46.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction49 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator50 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction49);
        double double51 = matrix47.fold(matrixAccumulator50);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure52 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator50);
        cCSMatrix42.eachNonZero(matrixProcedure52);
        cRSMatrix39.eachNonZero(matrixProcedure52);
        java.util.Random random57 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) 100, Double.NaN, random57);
        org.la4j.Matrix matrix59 = ooPlaceMatrixHadamardProduct17.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, columnMajorSparseMatrix58);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix62 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double63 = cCSMatrix62.max();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix64 = org.la4j.matrix.sparse.CRSMatrix.block((org.la4j.Matrix) denseMatrix12, (org.la4j.Matrix) basic2DMatrix16, (org.la4j.Matrix) cRSMatrix39, (org.la4j.Matrix) cCSMatrix62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix10);
        org.junit.Assert.assertNotNull(denseVector11);
        org.junit.Assert.assertNotNull(denseMatrix12);
        org.junit.Assert.assertNotNull(basic2DMatrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixAccumulator50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure52);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(cCSMatrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix0 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix8 = rowMajorSparseMatrix7.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction10 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator11 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction10);
        double double12 = matrix8.fold(matrixAccumulator11);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure13 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator11);
        cCSMatrix3.eachNonZero(matrixProcedure13);
        cRSMatrix0.eachNonZero(matrixProcedure13);
        // The following exception was thrown during execution in test generation
        try {
            matrixProcedure13.apply((int) '#', 52, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixAccumulator11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure13);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant(10, 0, (double) 0L);
        org.la4j.iterator.VectorIterator vectorIterator5 = matrix3.iteratorOfRow((int) (short) 1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(vectorIterator5);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct0 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct1 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray17 = cCSMatrix15.foldRows(vectorAccumulator16);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray17);
        org.la4j.vector.dense.BasicVector basicVector19 = new org.la4j.vector.dense.BasicVector(doubleArray17);
        ooPlaceOuterProduct1.ensureApplicableTo((org.la4j.Vector) basicVector10, (org.la4j.Vector) basicVector19);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double28 = rowMajorSparseMatrix24.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix29 = rowMajorSparseMatrix24.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct30 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean31 = sparseMatrix29.equals((java.lang.Object) ooPlaceOuterProduct30);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct32 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix37 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator38 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray39 = cCSMatrix37.foldRows(vectorAccumulator38);
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray39);
        org.la4j.vector.dense.BasicVector basicVector41 = new org.la4j.vector.dense.BasicVector(doubleArray39);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix46 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator47 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray48 = cCSMatrix46.foldRows(vectorAccumulator47);
        org.la4j.matrix.DenseMatrix denseMatrix49 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray48);
        org.la4j.vector.dense.BasicVector basicVector50 = new org.la4j.vector.dense.BasicVector(doubleArray48);
        ooPlaceOuterProduct32.ensureApplicableTo((org.la4j.Vector) basicVector41, (org.la4j.Vector) basicVector50);
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector53.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector58 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix59 = ooPlaceOuterProduct32.apply((org.la4j.vector.SparseVector) compressedVector53, (org.la4j.vector.SparseVector) compressedVector58);
        double double60 = compressedVector58.min();
        org.la4j.iterator.VectorIterator vectorIterator61 = compressedVector58.iterator();
        org.la4j.Matrix matrix62 = basicVector10.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct30, (org.la4j.Vector) compressedVector58);
        org.la4j.vector.sparse.CompressedVector compressedVector64 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double65 = compressedVector64.euclideanNorm();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceInnerProduct0.ensureApplicableTo((org.la4j.Vector) basicVector10, (org.la4j.Vector) compressedVector64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cCSMatrix37);
        org.junit.Assert.assertNotNull(vectorAccumulator38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(cCSMatrix46);
        org.junit.Assert.assertNotNull(vectorAccumulator47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix49);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.identity((int) 'a');
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor3 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix[] matrixArray4 = qRDecompositor3.decompose();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixArray4);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator9 = rowMajorSparseMatrix3.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction10 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix30 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray31 = columnMajorSparseMatrix30.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation32 = ooPlaceMatricesAddition11.partiallyApply(columnMajorSparseMatrix30);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate41 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix44 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean45 = advancedMatrixPredicate41.test((org.la4j.Matrix) columnMajorSparseMatrix44);
        org.la4j.Matrix matrix46 = columnMajorSparseMatrix44.rotate();
        boolean boolean47 = columnMajorSparseMatrix44.isRowMajor();
        boolean boolean48 = columnMajorSparseMatrix44.isRowMajor();
        org.la4j.Matrix matrix49 = ooPlaceMatricesAddition11.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix44);
        org.la4j.Vector vector51 = columnMajorSparseMatrix44.getRow((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix52 = rowMajorSparseMatrix3.apply((org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix>) ooPlaceMatricesSubtraction10, (org.la4j.Matrix) columnMajorSparseMatrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 1x35 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator9);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation32);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate41);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(vector51);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix13 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) ' ', (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix17 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix13, (org.la4j.matrix.DenseMatrix) basic2DMatrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix13);
        org.junit.Assert.assertNotNull(basic2DMatrix16);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) (byte) 10, 0);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.constant((int) (byte) 100, (double) 100);
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = basicVector2.toMatrixMarket(numberFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector2);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.SparseVector sparseVector3 = org.la4j.vector.SparseVector.random((int) (byte) 0, (double) 10, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        double double31 = cCSMatrix3.getOrElse((int) (byte) 0, (int) (short) 1, (double) 100.0f);
        double double32 = cCSMatrix3.min();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = cRSMatrix3.get(1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '35' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix1 = org.la4j.matrix.sparse.CCSMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = cCSMatrix3.toRowMajorSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct6 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray13 = cCSMatrix11.foldRows(vectorAccumulator12);
        org.la4j.matrix.DenseMatrix denseMatrix14 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray13);
        org.la4j.vector.dense.BasicVector basicVector15 = new org.la4j.vector.dense.BasicVector(doubleArray13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix20 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray22 = cCSMatrix20.foldRows(vectorAccumulator21);
        org.la4j.matrix.DenseMatrix denseMatrix23 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray22);
        org.la4j.vector.dense.BasicVector basicVector24 = new org.la4j.vector.dense.BasicVector(doubleArray22);
        ooPlaceOuterProduct6.ensureApplicableTo((org.la4j.Vector) basicVector15, (org.la4j.Vector) basicVector24);
        org.la4j.Matrix matrix26 = basicVector24.toColumnMatrix();
        matrixMatrixMatrixOperation0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix14);
        org.junit.Assert.assertNotNull(cCSMatrix20);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix23);
        org.junit.Assert.assertNotNull(matrix26);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.la4j.Matrix matrix4 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray7 = matrix4.foldColumns(vectorAccumulator6);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray7);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory15 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix16 = matrix14.to(basic1DMatrixMatrixFactory15);
        java.lang.Class<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixClass17 = basic1DMatrixMatrixFactory15.outputClass;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix18 = basic2DMatrix8.to(basic1DMatrixMatrixFactory15);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SweepSolver sweepSolver19 = new org.la4j.linear.SweepSolver((org.la4j.Matrix) basic1DMatrix18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory15);
        org.junit.Assert.assertNotNull(basic1DMatrix16);
        org.junit.Assert.assertNotNull(basic1DMatrixClass17);
        org.junit.Assert.assertNotNull(basic1DMatrix18);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation48 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean52 = cCSMatrix51.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = cCSMatrix51.toRowMajorSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix57.removeLastRow();
        double double62 = rowMajorSparseMatrix57.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesSubtraction0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix51, (org.la4j.Matrix) rowMajorSparseMatrix57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 52x52 does not equal to 1x35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixMatrixOperation48);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.SparseVector sparseVector25 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix30.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix30, denseMatrix33);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double42 = denseMatrix41.min();
        double double43 = denseMatrix41.sum();
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction26.apply(columnMajorSparseMatrix37, denseMatrix41);
        org.la4j.Vector vector45 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector25, columnMajorSparseMatrix37);
        org.la4j.Vector vector47 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str48 = vector47.toCSV();
        org.la4j.vector.SparseVector sparseVector49 = vector47.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator53 = columnMajorSparseMatrix52.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double62 = rowMajorSparseMatrix58.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix63 = rowMajorSparseMatrix58.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate64 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean65 = sparseMatrix63.is(advancedMatrixPredicate64);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator67 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double68 = sparseMatrix63.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator67);
        org.la4j.vector.functor.VectorProcedure vectorProcedure69 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator67);
        columnMajorSparseMatrix52.eachNonZeroInRow((-1), vectorProcedure69);
        sparseVector49.each(vectorProcedure69);
        org.la4j.matrix.DenseMatrix denseMatrix72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector73 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector49, denseMatrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(sparseVector25);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vector45);
        org.junit.Assert.assertNotNull(vector47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str48, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector49);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrixIterator53);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix63);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure69);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator8 = cRSMatrix7.nonZeroIterator();
        org.la4j.Vector vector10 = cRSMatrix7.getColumn(100);
        boolean boolean13 = cRSMatrix7.nonZeroAt(1, (int) (short) 0);
        org.la4j.Vector vector15 = cRSMatrix7.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix20 = columnMajorSparseMatrix3.insert((org.la4j.Matrix) cRSMatrix7, (int) 'a', (int) (byte) 100, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination position out of bounds: 97, 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(vector15);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix17 = matrix16.rotate();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.la4j.operation.ooplace.OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new org.la4j.operation.ooplace.OoPlaceVectorsSubtraction();
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str3 = vector2.toCSV();
        org.la4j.vector.SparseVector sparseVector4 = vector2.toSparseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct5 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        org.la4j.vector.dense.BasicVector basicVector14 = new org.la4j.vector.dense.BasicVector(doubleArray12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.DenseMatrix denseMatrix22 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray21);
        org.la4j.vector.dense.BasicVector basicVector23 = new org.la4j.vector.dense.BasicVector(doubleArray21);
        ooPlaceOuterProduct5.ensureApplicableTo((org.la4j.Vector) basicVector14, (org.la4j.Vector) basicVector23);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector26.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector31 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix32 = ooPlaceOuterProduct5.apply((org.la4j.vector.SparseVector) compressedVector26, (org.la4j.vector.SparseVector) compressedVector31);
        org.la4j.Vector vector33 = ooPlaceVectorsSubtraction0.apply(sparseVector4, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.vector.SparseVector sparseVector36 = org.la4j.vector.SparseVector.zero(0, 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator40 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray41 = cCSMatrix39.foldRows(vectorAccumulator40);
        org.la4j.Vector vector42 = org.la4j.Vector.fromArray(doubleArray41);
        org.la4j.vector.SparseVector sparseVector43 = vector42.toSparseVector();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorsSubtraction0.ensureApplicableTo((org.la4j.Vector) sparseVector36, vector42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 0 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str3, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector4);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix22);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(sparseVector36);
        org.junit.Assert.assertNotNull(cCSMatrix39);
        org.junit.Assert.assertNotNull(vectorAccumulator40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector42);
        org.junit.Assert.assertNotNull(sparseVector43);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.TRIDIAGONAL_MATRIX;
        boolean boolean3 = matrixPredicate0.test(0, (int) (short) 100);
        boolean boolean6 = matrixPredicate0.test((int) (byte) 0, 100);
        boolean boolean9 = matrixPredicate0.test(0, (int) (short) 100);
        org.junit.Assert.assertNotNull(matrixPredicate0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix0 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix8 = rowMajorSparseMatrix7.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction10 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator11 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction10);
        double double12 = matrix8.fold(matrixAccumulator11);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure13 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator11);
        cCSMatrix3.eachNonZero(matrixProcedure13);
        cRSMatrix0.eachNonZero(matrixProcedure13);
        // The following exception was thrown during execution in test generation
        try {
            matrixProcedure13.apply(52, (int) (byte) -1, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixAccumulator11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure13);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        double double19 = cRSMatrix3.min();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication20 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix23 = ooPlaceMatrixByItsTransposeMultiplication20.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix22);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation24 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray31 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray38 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray45 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray52 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray59 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray60 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52, doubleArray59 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix61 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray60);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation62 = matrixMatrixMatrixOperation24.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix61);
        java.util.Spliterator<java.lang.Double> doubleSpliterator63 = basic2DMatrix61.spliterator();
        basic2DMatrix61.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication20.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix61);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix69 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double70 = cRSMatrix69.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix71 = cRSMatrix69.toColumnMajorSparseMatrix();
        org.la4j.Matrix matrix72 = ooPlaceMatrixByItsTransposeMultiplication20.apply(columnMajorSparseMatrix71);
        org.la4j.Matrix matrix73 = cRSMatrix3.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication20);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(basic2DMatrix61);
        org.junit.Assert.assertNotNull(matrixMatrixOperation62);
        org.junit.Assert.assertNotNull(doubleSpliterator63);
        org.junit.Assert.assertNotNull(cRSMatrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.ZERO_MATRIX;
        boolean boolean4 = matrixPredicate0.test((int) (byte) 0, (int) ' ', (double) 1L);
        org.junit.Assert.assertNotNull(matrixPredicate0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.LinearAlgebra.SolverFactory solverFactory44 = org.la4j.LinearAlgebra.SolverFactory.SQUARE_ROOT;
        org.la4j.linear.LinearSystemSolver linearSystemSolver45 = basic2DMatrix41.withSolver(solverFactory44);
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct46 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.vector.DenseVector denseVector59 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random61 = null;
        org.la4j.vector.DenseVector denseVector62 = org.la4j.vector.DenseVector.random(0, random61);
        java.lang.String str63 = denseVector62.toString();
        ooPlaceOuterProduct56.ensureApplicableTo((org.la4j.Vector) denseVector59, (org.la4j.Vector) denseVector62);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation65 = ooPlaceInnerProduct46.partiallyApply(denseVector62);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector66 = linearSystemSolver45.solve((org.la4j.Vector) denseVector62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(solverFactory44);
        org.junit.Assert.assertNotNull(linearSystemSolver45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(denseVector59);
        org.junit.Assert.assertNotNull(denseVector62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation65);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean42 = cCSMatrix41.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = cCSMatrix41.toRowMajorSparseMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix41);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        double double9 = cCSMatrix2.getOrElse(10, (int) ' ', (double) 10);
        boolean boolean12 = cCSMatrix2.nonZeroAt((int) (short) 1, (int) '#');
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator88 = cRSMatrix17.iteratorOfRow((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 10, (byte) 0, (byte) 0, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 10, 0, 0, -1]");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        java.lang.String str28 = sparseVector3.toString();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000" + "'", str28, "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor33 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix16);
        double double34 = rowMajorSparseMatrix16.norm();
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.Vector vector29 = rowMajorSparseMatrix12.getColumn(0);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(vector29);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.vector.dense.BasicVector basicVector42 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition43 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix46 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double47 = cRSMatrix46.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix51.removeLastRow();
        org.la4j.Matrix matrix53 = ooPlaceMatricesAddition43.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix46, rowMajorSparseMatrix51);
        boolean boolean54 = basicVector42.equals((java.lang.Object) rowMajorSparseMatrix51);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix57 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction64 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator65 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction64);
        double double66 = matrix62.fold(matrixAccumulator65);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure67 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator65);
        cCSMatrix57.eachNonZero(matrixProcedure67);
        rowMajorSparseMatrix51.eachNonZero(matrixProcedure67);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix31.each(matrixProcedure67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(basicVector42);
        org.junit.Assert.assertNotNull(cRSMatrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrixAccumulator65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure67);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector2 = org.la4j.Vector.random((int) '#', random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        basic2DMatrix43.setAll((double) 0L);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory4 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = columnMajorSparseMatrix2.to(basic1DMatrixMatrixFactory4);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix14 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, denseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double18 = columnMajorSparseMatrix17.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory19 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix20 = columnMajorSparseMatrix17.to(basic1DMatrixMatrixFactory19);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = null;
        rowMajorSparseMatrix24.eachNonZero(matrixProcedure26);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix20, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver29 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix28);
        org.la4j.Matrix matrix30 = basic1DMatrix5.kroneckerProduct(matrix28);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = basic1DMatrix5.get((int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '35' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory4);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory19);
        org.junit.Assert.assertNotNull(basic1DMatrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix30);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix2.setRow(0, (double) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator13 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray14 = cCSMatrix12.foldRows(vectorAccumulator13);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray14);
        org.la4j.vector.dense.BasicVector basicVector16 = new org.la4j.vector.dense.BasicVector(doubleArray14);
        double[] doubleArray17 = basicVector16.toArray();
        int[] intArray23 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector24 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray17, intArray23);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        int[] intArray34 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector35 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray31, intArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix36 = cRSMatrix2.select(intArray23, intArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertNotNull(vectorAccumulator13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10, 100]");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix26 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator27 = cRSMatrix26.nonZeroIterator();
        org.la4j.Vector vector29 = cRSMatrix26.getColumn(100);
        boolean boolean32 = cRSMatrix26.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator34 = cRSMatrix26.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = cRSMatrix26.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory36 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix37 = cRSMatrix26.to(basic1DMatrixMatrixFactory36);
        org.la4j.linear.SquareRootSolver squareRootSolver38 = new org.la4j.linear.SquareRootSolver((org.la4j.Matrix) basic1DMatrix37);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation39 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray46 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray53 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray60 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray67 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray74 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray75 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix76 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray75);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation77 = matrixMatrixMatrixOperation39.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix76);
        java.util.Spliterator<java.lang.Double> doubleSpliterator78 = basic2DMatrix76.spliterator();
        org.la4j.Matrix matrix81 = basic2DMatrix76.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray82 = basic2DMatrix76.toArray();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix83 = org.la4j.matrix.sparse.CRSMatrix.from2DArray(doubleArray82);
        org.la4j.Matrix matrix84 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix37, (org.la4j.matrix.SparseMatrix) cRSMatrix83);
        basic1DMatrix37.setAll(99.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(cRSMatrix26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(vectorIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory36);
        org.junit.Assert.assertNotNull(basic1DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(basic2DMatrix76);
        org.junit.Assert.assertNotNull(matrixMatrixOperation77);
        org.junit.Assert.assertNotNull(doubleSpliterator78);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(cRSMatrix83);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) (-1.0f));
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) 1L);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) (byte) 1, (int) (short) 0);
        org.la4j.Matrix matrix3 = matrix2.rotate();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.fromCSV("March 2015");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"March\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        double[][] doubleArray40 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray69 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray76 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray77 = new double[][] { doubleArray48, doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray77);
        basic2DMatrix78.setAll((double) 100);
        org.la4j.Matrix matrix81 = matrixMatrixMatrixOperation1.apply(denseMatrix41, (org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory82 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix83 = basic2DMatrix78.to(basic1DMatrixMatrixFactory82);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix88 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator89 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray90 = cCSMatrix88.foldRows(vectorAccumulator89);
        org.la4j.matrix.DenseMatrix denseMatrix91 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray90);
        org.la4j.vector.dense.BasicVector basicVector92 = new org.la4j.vector.dense.BasicVector(doubleArray90);
        double[] doubleArray93 = basicVector92.toArray();
        org.la4j.Vector vector94 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix83, (org.la4j.vector.DenseVector) basicVector92);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix83.swapColumns(52, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(basic2DMatrix78);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory82);
        org.junit.Assert.assertNotNull(basic1DMatrix83);
        org.junit.Assert.assertNotNull(cCSMatrix88);
        org.junit.Assert.assertNotNull(vectorAccumulator89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix91);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector94);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray76);
        org.la4j.Matrix matrix79 = matrixMatrixOperation40.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix82 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 30);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix87 = basic2DMatrix78.insert((org.la4j.Matrix) cRSMatrix82, (int) ' ', (int) (short) 0, (int) (byte) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot have negative rows or columns: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(cRSMatrix82);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory28 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector29 = compressedVector2.to(basicVectorVectorFactory28);
        org.la4j.Vector vector31 = basicVector29.blankOfLength((int) (byte) 10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory28);
        org.junit.Assert.assertNotNull(basicVector29);
        org.junit.Assert.assertNotNull(vector31);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.zero((int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 0x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.vector.functor.VectorFunction vectorFunction5 = org.la4j.Vectors.DEC_FUNCTION;
        cRSMatrix2.updateColumn(0, vectorFunction5);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix10 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator11 = columnMajorSparseMatrix10.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double20 = rowMajorSparseMatrix16.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix21 = rowMajorSparseMatrix16.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate22 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean23 = sparseMatrix21.is(advancedMatrixPredicate22);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double26 = sparseMatrix21.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator25);
        org.la4j.vector.functor.VectorProcedure vectorProcedure27 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator25);
        columnMajorSparseMatrix10.eachNonZeroInRow((-1), vectorProcedure27);
        vectorProcedure27.apply(10, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.eachInRow(30, vectorProcedure27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(vectorFunction5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrixIterator11);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix21);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure27);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        double double11 = cRSMatrix3.infinityNorm();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct12 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        double double21 = rowMajorSparseMatrix16.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int22 = rowMajorSparseMatrix16.cardinality();
        org.la4j.Vector vector24 = rowMajorSparseMatrix16.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct12.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator60 = cCSMatrix35.iterator();
        org.la4j.Matrix matrix63 = cCSMatrix35.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix64 = ooPlaceMatrixHadamardProduct12.applySymmetric(rowMajorSparseMatrix31, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix35);
        org.la4j.Matrix matrix65 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix31);
        int[] intArray66 = new int[] {};
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        int[] intArray76 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector77 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray73, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix78 = cRSMatrix3.select(intArray66, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rows or columns selected.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 100]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = denseMatrix2.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = rowMajorSparseMatrix3.nonZeroAt((int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(denseMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = compressedVector1.toMatrixMarket(numberFormat2);
        org.la4j.Vector vector5 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.DenseVector denseVector6 = vector5.toDenseVector();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector7 = compressedVector1.add((org.la4j.Vector) denseVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 32 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str3, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(denseVector6);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        byte[] byteArray0 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromBinary(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        double double47 = rowMajorSparseMatrix42.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector48 = rowMajorSparseMatrix42.toRowVector();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = matrixMatrixMatrixOperation0.apply(rowMajorSparseMatrix42, rowMajorSparseMatrix52);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator60 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray61 = rowMajorSparseMatrix42.foldNonZeroInRows(vectorAccumulator60);
        org.la4j.Vector vector62 = org.la4j.Vector.fromArray(doubleArray61);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(vectorAccumulator60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0]");
        org.junit.Assert.assertNotNull(vector62);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SquareRootSolver squareRootSolver1 = new org.la4j.linear.SquareRootSolver(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        ooPlaceOuterProduct2.ensureApplicableTo((org.la4j.Vector) basicVector11, (org.la4j.Vector) basicVector20);
        org.la4j.Matrix matrix22 = basicVector20.toColumnMatrix();
        org.la4j.Matrix matrix23 = sparseVector1.outerProduct((org.la4j.Vector) basicVector20);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver24 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(sparseVector1);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator8 = columnMajorSparseMatrix7.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator9 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean13 = cCSMatrix12.isRowMajor();
        org.la4j.Matrix matrix16 = cCSMatrix12.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator17 = cCSMatrix12.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator18 = matrixIterator9.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator17);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = matrixIterator18.get();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator17);
        org.junit.Assert.assertNotNull(matrixIterator18);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        double[] doubleArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.from1DArray(52, (int) (byte) -1, doubleArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 52x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix3 = org.la4j.matrix.DenseMatrix.random((int) (short) 100, (int) 'a', random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.la4j.Matrix matrix4 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray7 = matrix4.foldColumns(vectorAccumulator6);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix8.swapRows((-1), 30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix8);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double60 = rowMajorSparseMatrix56.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix61 = rowMajorSparseMatrix56.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate62 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean63 = sparseMatrix61.is(advancedMatrixPredicate62);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator65 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double66 = sparseMatrix61.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator65);
        org.la4j.vector.functor.VectorProcedure vectorProcedure67 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator65);
        double[] doubleArray68 = matrix41.foldRows(vectorAccumulator65);
        org.la4j.Matrix matrix69 = matrix41.multiplyByItsTranspose();
        double double71 = matrix41.maxInColumn(30);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix61);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.vector.functor.VectorFunction vectorFunction6 = org.la4j.Vectors.INV_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.asProductFunctionAccumulator((double) 1.0f, vectorFunction6);
        boolean boolean8 = matrix4.equals((java.lang.Object) vectorAccumulator7);
        vectorAccumulator7.update(0, 7.211102550927978d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorFunction6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = new org.la4j.matrix.sparse.CCSMatrix(30, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (short) -1, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector2 = basicVector1.copy();
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = basicVector1.mkString(numberFormat3, "%%MatrixMarket vector array real\n0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.matrix.DenseMatrix denseMatrix14 = org.la4j.matrix.DenseMatrix.constant(0, (int) (short) 10, (double) 'a');
        boolean boolean15 = advancedMatrixPredicate9.test((org.la4j.Matrix) denseMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseMatrix14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        org.la4j.Matrix matrix88 = cRSMatrix17.add((double) 0);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.matrix.DenseMatrix denseMatrix27 = null;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction28 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix31 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean32 = cCSMatrix31.isRowMajor();
        org.la4j.Matrix matrix35 = cCSMatrix31.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator36 = cCSMatrix31.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix40.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double50 = rowMajorSparseMatrix46.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix51 = rowMajorSparseMatrix46.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct52 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean53 = sparseMatrix51.equals((java.lang.Object) ooPlaceOuterProduct52);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix40.hadamardProduct((org.la4j.Matrix) sparseMatrix51);
        org.la4j.Matrix matrix55 = ooPlaceMatricesSubtraction28.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix31, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix40);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        double double64 = rowMajorSparseMatrix59.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int65 = rowMajorSparseMatrix59.cardinality();
        org.la4j.Vector vector67 = rowMajorSparseMatrix59.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation68 = ooPlaceMatricesSubtraction28.partiallyApply(rowMajorSparseMatrix59);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix69 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation70 = ooPlaceMatricesSubtraction28.partiallyApply((org.la4j.matrix.DenseMatrix) basic1DMatrix69);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix73 = org.la4j.matrix.sparse.CRSMatrix.zero(0, (int) (short) 0);
        double[][] doubleArray74 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix75 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray74);
        org.la4j.matrix.DenseMatrix denseMatrix76 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray74);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix77 = denseMatrix76.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction28.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix73, denseMatrix76);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix79 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix27, denseMatrix76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(cCSMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(vector67);
        org.junit.Assert.assertNotNull(matrixMatrixOperation68);
        org.junit.Assert.assertNotNull(matrixMatrixOperation70);
        org.junit.Assert.assertNotNull(cRSMatrix73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(denseMatrix75);
        org.junit.Assert.assertNotNull(denseMatrix76);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix77);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double10 = cRSMatrix2.trace();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix27 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction28 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix31 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.Matrix matrix60 = ooPlaceMatricesSubtraction28.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix31, rowMajorSparseMatrix44);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor61 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix63 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix27.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44, (org.la4j.matrix.SparseMatrix) cRSMatrix63);
        org.la4j.matrix.DenseMatrix denseMatrix66 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix74 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray73);
        double[][] doubleArray75 = basic1DMatrix74.toArray();
        org.la4j.Matrix matrix76 = inPlaceCopyMatrixToMatrix27.apply(denseMatrix66, (org.la4j.matrix.DenseMatrix) basic1DMatrix74);
        boolean boolean78 = denseMatrix25.equals((org.la4j.Matrix) basic1DMatrix74, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix74.swapRows((int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(basic2DMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(cRSMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(denseMatrix66);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) '4', 0);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication3 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.Matrix matrix4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector5 = compressedVector2.apply((org.la4j.operation.VectorMatrixOperation<org.la4j.Vector>) ooPlaceVectorByMatrixMultiplication3, matrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.Random random2 = null;
        org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.randomSymmetric(0, (double) '4', random2);
        org.junit.Assert.assertNotNull(sparseMatrix3);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.vector.functor.VectorProcedure vectorProcedure13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix3.eachNonZeroInRow((int) (short) 10, vectorProcedure13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.random((int) (short) 100, (int) (short) 10, (double) (-1), random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction24 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix27 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean28 = cCSMatrix27.isRowMajor();
        org.la4j.Matrix matrix31 = cCSMatrix27.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator32 = cCSMatrix27.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double46 = rowMajorSparseMatrix42.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix47 = rowMajorSparseMatrix42.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct48 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean49 = sparseMatrix47.equals((java.lang.Object) ooPlaceOuterProduct48);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix36.hadamardProduct((org.la4j.Matrix) sparseMatrix47);
        org.la4j.Matrix matrix51 = ooPlaceMatricesSubtraction24.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix27, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix36);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix53 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix56 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double57 = denseMatrix56.min();
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction24.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix53, denseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix61 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean62 = cCSMatrix61.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = cCSMatrix61.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix64 = ooPlaceMatricesSubtraction0.apply(denseMatrix56, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(cCSMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cRSMatrix53);
        org.junit.Assert.assertNotNull(denseMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(cCSMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.random((int) (short) 100, (int) '4', (double) 0, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        org.la4j.Matrix matrix28 = sparseVector3.toColumnMatrix();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 0x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        org.la4j.vector.sparse.CompressedVector compressedVector19 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray11);
        org.la4j.Matrix matrix20 = compressedVector19.toRowMatrix();
        org.la4j.Matrix matrix21 = compressedVector19.toRowMatrix();
        org.la4j.Vector vector23 = compressedVector19.multiply((double) (short) 0);
        byte[] byteArray24 = compressedVector19.toBinary();
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(compressedVector19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(byteArray24);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.vector.dense.BasicVector basicVector5 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.la4j.Matrix matrix6 = basicVector5.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate7 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean8 = basicVector5.non(vectorPredicate7);
        org.la4j.Vector vector10 = basicVector5.blankOfLength((int) 'a');
        double double11 = basicVector5.manhattanNorm();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorPredicate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = denseMatrix26.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = denseMatrix26.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector42 = rowMajorSparseMatrix40.getRow(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean25 = cCSMatrix24.isRowMajor();
        org.la4j.Matrix matrix28 = cCSMatrix24.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix24.nonZeroColumnMajorIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate30 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix33 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean34 = advancedMatrixPredicate30.test((org.la4j.Matrix) columnMajorSparseMatrix33);
        org.la4j.Matrix matrix35 = columnMajorSparseMatrix33.rotate();
        boolean boolean36 = columnMajorSparseMatrix33.isRowMajor();
        boolean boolean37 = columnMajorSparseMatrix33.isRowMajor();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix24, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix33);
        double[] doubleArray45 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray52 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray59 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray66 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray73 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray74 = new double[][] { doubleArray45, doubleArray52, doubleArray59, doubleArray66, doubleArray73 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix75 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray74);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix78 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator79 = cRSMatrix78.nonZeroIterator();
        org.la4j.Vector vector81 = cRSMatrix78.getColumn(100);
        boolean boolean84 = cRSMatrix78.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator86 = cRSMatrix78.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix87 = cRSMatrix78.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix88 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix75, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate30);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(basic2DMatrix75);
        org.junit.Assert.assertNotNull(cRSMatrix78);
        org.junit.Assert.assertNotNull(matrixIterator79);
        org.junit.Assert.assertNotNull(vector81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(vectorIterator86);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix87);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix26 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator27 = cRSMatrix26.nonZeroIterator();
        org.la4j.Vector vector29 = cRSMatrix26.getColumn(100);
        boolean boolean32 = cRSMatrix26.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator34 = cRSMatrix26.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = cRSMatrix26.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory36 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix37 = cRSMatrix26.to(basic1DMatrixMatrixFactory36);
        org.la4j.linear.SquareRootSolver squareRootSolver38 = new org.la4j.linear.SquareRootSolver((org.la4j.Matrix) basic1DMatrix37);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation39 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray46 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray53 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray60 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray67 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray74 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray75 = new double[][] { doubleArray46, doubleArray53, doubleArray60, doubleArray67, doubleArray74 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix76 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray75);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation77 = matrixMatrixMatrixOperation39.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix76);
        java.util.Spliterator<java.lang.Double> doubleSpliterator78 = basic2DMatrix76.spliterator();
        org.la4j.Matrix matrix81 = basic2DMatrix76.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray82 = basic2DMatrix76.toArray();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix83 = org.la4j.matrix.sparse.CRSMatrix.from2DArray(doubleArray82);
        org.la4j.Matrix matrix84 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix37, (org.la4j.matrix.SparseMatrix) cRSMatrix83);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix87 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix91 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix92 = rowMajorSparseMatrix91.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction94 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator95 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction94);
        double double96 = matrix92.fold(matrixAccumulator95);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure97 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator95);
        cCSMatrix87.eachNonZero(matrixProcedure97);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix83.eachNonZero(matrixProcedure97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(cRSMatrix26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(vectorIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory36);
        org.junit.Assert.assertNotNull(basic1DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(basic2DMatrix76);
        org.junit.Assert.assertNotNull(matrixMatrixOperation77);
        org.junit.Assert.assertNotNull(doubleSpliterator78);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(cRSMatrix83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrixAccumulator95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1.0d) + "'", double96 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure97);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 0);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication2 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector4 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector4.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct8 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix13 = rowMajorSparseMatrix12.removeLastRow();
        double double17 = rowMajorSparseMatrix12.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int18 = rowMajorSparseMatrix12.cardinality();
        org.la4j.Vector vector20 = rowMajorSparseMatrix12.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix23 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix24 = ooPlaceMatrixHadamardProduct8.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix23);
        org.la4j.Vector vector25 = ooPlaceVectorByMatrixMultiplication2.apply((org.la4j.vector.SparseVector) compressedVector4, columnMajorSparseMatrix23);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation26 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.DenseVector denseVector27 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation28 = vectorVectorVectorOperation26.partiallyApply(denseVector27);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix34 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator35 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray36 = cCSMatrix34.foldRows(vectorAccumulator35);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray36);
        org.la4j.vector.dense.BasicVector basicVector38 = new org.la4j.vector.dense.BasicVector(doubleArray36);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix43 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator44 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray45 = cCSMatrix43.foldRows(vectorAccumulator44);
        org.la4j.matrix.DenseMatrix denseMatrix46 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray45);
        org.la4j.vector.dense.BasicVector basicVector47 = new org.la4j.vector.dense.BasicVector(doubleArray45);
        ooPlaceOuterProduct29.ensureApplicableTo((org.la4j.Vector) basicVector38, (org.la4j.Vector) basicVector47);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector50.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector55 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix56 = ooPlaceOuterProduct29.apply((org.la4j.vector.SparseVector) compressedVector50, (org.la4j.vector.SparseVector) compressedVector55);
        double double57 = compressedVector55.min();
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation58 = vectorVectorVectorOperation26.partiallyApply((org.la4j.vector.SparseVector) compressedVector55);
        org.la4j.Vector vector59 = compressedVector4.apply(vectorVectorOperation58);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector60 = basicVector1.apply(vectorVectorOperation58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 32 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(vector25);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation26);
        org.junit.Assert.assertNotNull(vectorVectorOperation28);
        org.junit.Assert.assertNotNull(cCSMatrix34);
        org.junit.Assert.assertNotNull(vectorAccumulator35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(cCSMatrix43);
        org.junit.Assert.assertNotNull(vectorAccumulator44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix46);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(vectorVectorOperation58);
        org.junit.Assert.assertNotNull(vector59);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromCSV("10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n");
        org.junit.Assert.assertNotNull(compressedVector1);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator13 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray14 = cCSMatrix12.foldRows(vectorAccumulator13);
        int[] intArray17 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray14, intArray17);
        int[] intArray19 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix20 = new org.la4j.matrix.sparse.CRSMatrix((int) (short) 1, (int) (short) -1, (int) (short) 10, doubleArray7, intArray17, intArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertNotNull(vectorAccumulator13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate17 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean21 = advancedMatrixPredicate17.test((org.la4j.Matrix) columnMajorSparseMatrix20);
        org.la4j.vector.functor.VectorFunction vectorFunction23 = null;
        org.la4j.Matrix matrix24 = columnMajorSparseMatrix20.transformRow(0, vectorFunction23);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix25 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix29 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction30 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean34 = cCSMatrix33.isRowMajor();
        org.la4j.Matrix matrix37 = cCSMatrix33.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator38 = cCSMatrix33.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix44 = rowMajorSparseMatrix42.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double52 = rowMajorSparseMatrix48.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix53 = rowMajorSparseMatrix48.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct54 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean55 = sparseMatrix53.equals((java.lang.Object) ooPlaceOuterProduct54);
        org.la4j.Matrix matrix56 = rowMajorSparseMatrix42.hadamardProduct((org.la4j.Matrix) sparseMatrix53);
        org.la4j.Matrix matrix57 = ooPlaceMatricesSubtraction30.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix33, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix42);
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction26.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix29, rowMajorSparseMatrix42);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor59 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix42);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix61 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix62 = inPlaceCopyMatrixToMatrix25.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix42, (org.la4j.matrix.SparseMatrix) cRSMatrix61);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix66 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix67 = rowMajorSparseMatrix66.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix71.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory74 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix75 = matrix73.to(basic1DMatrixMatrixFactory74);
        org.la4j.Matrix matrix76 = inPlaceCopyMatrixToMatrix25.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix66, (org.la4j.matrix.DenseMatrix) basic1DMatrix75);
        org.la4j.Matrix matrix77 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix20, (org.la4j.matrix.DenseMatrix) basic1DMatrix75);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = matrix77.minInColumn((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(basic2DMatrix29);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(cRSMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory74);
        org.junit.Assert.assertNotNull(basic1DMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        org.la4j.Matrix matrix85 = basic1DMatrix82.blankOfShape((int) 'a', 1);
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter86 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) basic1DMatrix82);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix87 = gaussJordanInverter86.inverse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix size: rows != columns");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
        org.junit.Assert.assertNotNull(matrix85);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction3 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector4 = vector1.transform(vectorFunction3);
        org.la4j.Matrix matrix5 = vector1.toColumnMatrix();
        double double6 = matrix5.norm();
        org.la4j.Vector vector7 = matrix5.toColumnVector();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = matrix5.get((int) (short) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(vectorFunction3);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.1622776601683795d + "'", double6 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(vector7);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction12 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator13 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction12);
        double double14 = matrix10.fold(matrixAccumulator13);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure15 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator13);
        cCSMatrix5.eachNonZero(matrixProcedure15);
        org.la4j.Matrix matrix17 = basic2DMatrix2.kroneckerProduct((org.la4j.Matrix) cCSMatrix5);
        org.la4j.Matrix matrix18 = cCSMatrix5.rotate();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrixAccumulator13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.randomSymmetric(100, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        boolean boolean11 = cCSMatrix2.nonZeroAt(10, (int) (byte) 1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix2.nonZeroColumnMajorIterator();
        int int13 = columnMajorMatrixIterator12.columnIndex();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = columnMajorMatrixIterator12.rowIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.zero((int) (short) 1, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        double[] doubleArray4 = new double[] { (byte) 100, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix5 = org.la4j.matrix.SparseMatrix.from1DArray((int) (byte) -1, 10, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, 52.0]");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.from1DArray((int) (byte) 1, (int) (byte) -1, doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.POSITIVE_DEFINITE_MATRIX;
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) 100);
        double double4 = vectorFunction1.evaluate(0, 52.0d);
        org.junit.Assert.assertNotNull(vectorFunction1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-48.0d) + "'", double4 == (-48.0d));
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.zero((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.la4j.matrix.MatrixFactory<?>[] wildcardMatrixFactoryArray0 = org.la4j.Matrices.CONVERTERS;
        org.junit.Assert.assertNotNull(wildcardMatrixFactoryArray0);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter5 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.Matrix matrix6 = noPivotGaussInverter5.inverse();
        org.la4j.Matrix matrix7 = noPivotGaussInverter5.self();
        org.la4j.Matrix matrix8 = noPivotGaussInverter5.inverse();
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator56 = columnMajorSparseMatrix55.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate67 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean68 = sparseMatrix66.is(advancedMatrixPredicate67);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator70 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double71 = sparseMatrix66.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator70);
        org.la4j.vector.functor.VectorProcedure vectorProcedure72 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator70);
        columnMajorSparseMatrix55.eachNonZeroInRow((-1), vectorProcedure72);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix76 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator77 = cRSMatrix76.nonZeroIterator();
        org.la4j.Vector vector79 = cRSMatrix76.getColumn(100);
        boolean boolean82 = cRSMatrix76.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix83 = matrixMatrixMatrixOperation0.apply(columnMajorSparseMatrix55, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix76);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory84 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter85 = cRSMatrix76.withInverter(inverterFactory84);
        org.la4j.Matrix matrix86 = matrixInverter85.inverse();
        org.la4j.Matrix matrix87 = matrixInverter85.self();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrixIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure72);
        org.junit.Assert.assertNotNull(cRSMatrix76);
        org.junit.Assert.assertNotNull(matrixIterator77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(inverterFactory84);
        org.junit.Assert.assertNotNull(matrixInverter85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation66 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector68 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random70 = null;
        org.la4j.vector.DenseVector denseVector71 = org.la4j.vector.DenseVector.random(0, random70);
        org.la4j.Matrix matrix72 = matrixVectorVectorOperation66.apply(sparseVector68, denseVector71);
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector49, sparseVector68);
        byte[] byteArray74 = compressedVector49.toBinary();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix77 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix82 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double86 = rowMajorSparseMatrix82.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix87 = rowMajorSparseMatrix82.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate88 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean89 = sparseMatrix87.is(advancedMatrixPredicate88);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator91 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double92 = sparseMatrix87.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator91);
        org.la4j.vector.functor.VectorProcedure vectorProcedure93 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator91);
        cCSMatrix77.eachNonZeroInRow((int) '#', vectorProcedure93);
        compressedVector49.eachNonZero(vectorProcedure93);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation66);
        org.junit.Assert.assertNotNull(sparseVector68);
        org.junit.Assert.assertNotNull(denseVector71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(cCSMatrix77);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix82);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix87);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure93);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix0 = new org.la4j.matrix.dense.Basic2DMatrix();
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = cRSMatrix2.toColumnMajorSparseMatrix();
        boolean boolean5 = columnMajorSparseMatrix4.isColumnMajor();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.Matrix matrix5 = cRSMatrix2.blankOfRows((int) (short) 1);
        org.la4j.Matrix matrix6 = matrix5.removeLastColumn();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix9 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator10 = cRSMatrix9.nonZeroIterator();
        org.la4j.Vector vector12 = cRSMatrix9.getColumn(100);
        boolean boolean15 = cRSMatrix9.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix16 = cRSMatrix9.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix17 = matrix5.subtract(matrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 1x10 does not equal to 10x10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(cRSMatrix9);
        org.junit.Assert.assertNotNull(matrixIterator10);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matrix16);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        double double58 = cCSMatrix44.minInRow((-1));
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix27 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double31 = rowMajorSparseMatrix27.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix32 = rowMajorSparseMatrix27.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct33 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean34 = sparseMatrix32.equals((java.lang.Object) ooPlaceOuterProduct33);
        org.la4j.vector.DenseVector denseVector36 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random38 = null;
        org.la4j.vector.DenseVector denseVector39 = org.la4j.vector.DenseVector.random(0, random38);
        java.lang.String str40 = denseVector39.toString();
        ooPlaceOuterProduct33.ensureApplicableTo((org.la4j.Vector) denseVector36, (org.la4j.Vector) denseVector39);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct42 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix47 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator48 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray49 = cCSMatrix47.foldRows(vectorAccumulator48);
        org.la4j.matrix.DenseMatrix denseMatrix50 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray49);
        org.la4j.vector.dense.BasicVector basicVector51 = new org.la4j.vector.dense.BasicVector(doubleArray49);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix56 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator57 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray58 = cCSMatrix56.foldRows(vectorAccumulator57);
        org.la4j.matrix.DenseMatrix denseMatrix59 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray58);
        org.la4j.vector.dense.BasicVector basicVector60 = new org.la4j.vector.dense.BasicVector(doubleArray58);
        ooPlaceOuterProduct42.ensureApplicableTo((org.la4j.Vector) basicVector51, (org.la4j.Vector) basicVector60);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct62 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random64 = null;
        org.la4j.vector.DenseVector denseVector65 = org.la4j.vector.DenseVector.random(0, random64);
        java.util.Random random67 = null;
        org.la4j.vector.DenseVector denseVector68 = org.la4j.vector.DenseVector.random(0, random67);
        org.la4j.Matrix matrix69 = ooPlaceOuterProduct62.apply(denseVector65, denseVector68);
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix72 = ooPlaceOuterProduct42.apply(denseVector65, (org.la4j.vector.SparseVector) compressedVector71);
        java.text.NumberFormat numberFormat73 = null;
        java.lang.String str75 = denseVector65.mkString(numberFormat73, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector77 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double78 = compressedVector77.euclideanNorm();
        org.la4j.Matrix matrix79 = ooPlaceOuterProduct33.apply(denseVector65, (org.la4j.vector.SparseVector) compressedVector77);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition80 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix83 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double84 = cRSMatrix83.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix88 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix89 = rowMajorSparseMatrix88.removeLastRow();
        org.la4j.Matrix matrix90 = ooPlaceMatricesAddition80.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix83, rowMajorSparseMatrix88);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix93 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix95 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix96 = ooPlaceMatricesAddition80.apply(columnMajorSparseMatrix93, denseMatrix95);
        org.la4j.Matrix matrix98 = denseMatrix95.multiply(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector99 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector65, denseMatrix95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(denseVector36);
        org.junit.Assert.assertNotNull(denseVector39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(cCSMatrix47);
        org.junit.Assert.assertNotNull(vectorAccumulator48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix50);
        org.junit.Assert.assertNotNull(cCSMatrix56);
        org.junit.Assert.assertNotNull(vectorAccumulator57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix59);
        org.junit.Assert.assertNotNull(denseVector65);
        org.junit.Assert.assertNotNull(denseVector68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(cRSMatrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix93);
        org.junit.Assert.assertNotNull(denseMatrix95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 10);
        byte[] byteArray2 = compressedVector1.toBinary();
        org.la4j.Matrix matrix3 = compressedVector1.toColumnMatrix();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[16, 0, 0, 0, 10, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix41.blankOfRows((int) ' ');
        java.util.Iterator<java.lang.Integer> intItor54 = rowMajorSparseMatrix41.iteratorOfNonZeroRows();
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(intItor54);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        org.la4j.Matrix matrix85 = basic1DMatrix82.blankOfShape((int) 'a', 1);
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter86 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) basic1DMatrix82);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix82.set((int) (byte) 100, (int) ' ', (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
        org.junit.Assert.assertNotNull(matrix85);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        double double16 = denseVector15.product();
        double[] doubleArray17 = denseVector15.toArray();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean28 = sparseMatrix26.equals((java.lang.Object) ooPlaceOuterProduct27);
        org.la4j.vector.DenseVector denseVector30 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random32 = null;
        org.la4j.vector.DenseVector denseVector33 = org.la4j.vector.DenseVector.random(0, random32);
        java.lang.String str34 = denseVector33.toString();
        ooPlaceOuterProduct27.ensureApplicableTo((org.la4j.Vector) denseVector30, (org.la4j.Vector) denseVector33);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray43 = cCSMatrix41.foldRows(vectorAccumulator42);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray43);
        org.la4j.vector.dense.BasicVector basicVector45 = new org.la4j.vector.dense.BasicVector(doubleArray43);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix50 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray52 = cCSMatrix50.foldRows(vectorAccumulator51);
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray52);
        org.la4j.vector.dense.BasicVector basicVector54 = new org.la4j.vector.dense.BasicVector(doubleArray52);
        ooPlaceOuterProduct36.ensureApplicableTo((org.la4j.Vector) basicVector45, (org.la4j.Vector) basicVector54);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random58 = null;
        org.la4j.vector.DenseVector denseVector59 = org.la4j.vector.DenseVector.random(0, random58);
        java.util.Random random61 = null;
        org.la4j.vector.DenseVector denseVector62 = org.la4j.vector.DenseVector.random(0, random61);
        org.la4j.Matrix matrix63 = ooPlaceOuterProduct56.apply(denseVector59, denseVector62);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct36.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector65);
        java.text.NumberFormat numberFormat67 = null;
        java.lang.String str69 = denseVector59.mkString(numberFormat67, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double72 = compressedVector71.euclideanNorm();
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct27.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.Vector vector74 = ooPlaceVectorHadamardProduct0.apply(denseVector15, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.vector.dense.BasicVector basicVector77 = org.la4j.vector.dense.BasicVector.constant((int) (byte) 1, (double) 100.0f);
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct78 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random80 = null;
        org.la4j.vector.DenseVector denseVector81 = org.la4j.vector.DenseVector.random(0, random80);
        org.la4j.vector.sparse.CompressedVector compressedVector83 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat84 = null;
        java.lang.String str85 = compressedVector83.toMatrixMarket(numberFormat84);
        org.la4j.Vector vector87 = compressedVector83.add((double) 52);
        org.la4j.Vector vector89 = compressedVector83.sliceRight((int) (byte) 10);
        org.la4j.Vector vector90 = ooPlaceVectorHadamardProduct78.apply(denseVector81, (org.la4j.vector.SparseVector) compressedVector83);
        org.la4j.Vector vector91 = ooPlaceVectorHadamardProduct0.apply((org.la4j.vector.DenseVector) basicVector77, (org.la4j.vector.SparseVector) compressedVector83);
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(denseVector30);
        org.junit.Assert.assertNotNull(denseVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(cCSMatrix50);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(denseVector59);
        org.junit.Assert.assertNotNull(denseVector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(basicVector77);
        org.junit.Assert.assertNotNull(denseVector81);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str85, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector87);
        org.junit.Assert.assertNotNull(vector89);
        org.junit.Assert.assertNotNull(vector90);
        org.junit.Assert.assertNotNull(vector91);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = cRSMatrix36.maxInRow((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver44 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix43);
        int int45 = forwardBackSubstitutionSolver44.unknowns();
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix3.removeFirstColumn();
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix3.subtract((double) 0);
        org.la4j.Matrix matrix12 = rowMajorSparseMatrix3.transpose();
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication13 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator17 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix18 = cCSMatrix16.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix23 = cCSMatrix21.transpose();
        ooPlaceMatricesMultiplication13.ensureApplicableTo((org.la4j.Matrix) cCSMatrix16, matrix23);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double28 = columnMajorSparseMatrix27.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory29 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix30 = columnMajorSparseMatrix27.to(basic1DMatrixMatrixFactory29);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition31 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix34 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double35 = cRSMatrix34.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix39.removeLastRow();
        org.la4j.Matrix matrix41 = ooPlaceMatricesAddition31.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix34, rowMajorSparseMatrix39);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition42 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix45 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double46 = cRSMatrix45.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix51 = rowMajorSparseMatrix50.removeLastRow();
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition42.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix45, rowMajorSparseMatrix50);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix57 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition42.apply(columnMajorSparseMatrix55, denseMatrix57);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix63 = rowMajorSparseMatrix62.removeLastRow();
        double double67 = rowMajorSparseMatrix62.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector68 = rowMajorSparseMatrix62.toRowVector();
        org.la4j.Matrix matrix69 = ooPlaceMatricesAddition31.apply(denseMatrix57, rowMajorSparseMatrix62);
        org.la4j.matrix.SparseMatrix sparseMatrix70 = denseMatrix57.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = denseMatrix57.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix72 = ooPlaceMatricesMultiplication13.apply(columnMajorSparseMatrix27, rowMajorSparseMatrix71);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix75 = rowMajorSparseMatrix3.insert(matrix72, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot have negative rows or columns: 100x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory29);
        org.junit.Assert.assertNotNull(basic1DMatrix30);
        org.junit.Assert.assertNotNull(cRSMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(cRSMatrix45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(denseMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(vector68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(sparseMatrix70);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix24 = rowMajorSparseMatrix23.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction26 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator27 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction26);
        double double28 = matrix24.fold(matrixAccumulator27);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure29 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator27);
        double double30 = matrixAccumulator27.accumulate();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = matrix19.fold(matrixAccumulator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrixAccumulator27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.SMART;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.random(30, (int) '#', (double) (-1), random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.identity((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray76);
        org.la4j.Matrix matrix79 = matrixMatrixOperation40.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        // The following exception was thrown during execution in test generation
        try {
            matrix79.swapColumns((int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.randomSymmetric((int) '4', random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator44 = cRSMatrix43.nonZeroIterator();
        org.la4j.Vector vector46 = cRSMatrix43.getColumn(100);
        boolean boolean49 = cRSMatrix43.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor50 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix43);
        org.la4j.Matrix matrix51 = rawLUDecompositor50.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction0.ensureApplicableTo(matrix51, (org.la4j.Matrix) cRSMatrix54);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor56 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) cRSMatrix54);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertNotNull(matrixIterator44);
        org.junit.Assert.assertNotNull(vector46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix22 = compressedVector21.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector24 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        boolean boolean36 = basicVector24.equals((java.lang.Object) rowMajorSparseMatrix33);
        org.la4j.Matrix matrix37 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.DenseVector) basicVector24);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation38 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.DenseVector denseVector39 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation40 = vectorVectorVectorOperation38.partiallyApply(denseVector39);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector41 = compressedVector21.apply(vectorVectorOperation40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(basicVector24);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation38);
        org.junit.Assert.assertNotNull(vectorVectorOperation40);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        double double53 = matrix41.manhattanNorm();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator3 = cRSMatrix1.nonZeroIteratorOfRow((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix1);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = cCSMatrix2.minInColumn((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        org.la4j.Vector vector9 = org.la4j.Vector.fromArray(doubleArray6);
        org.la4j.Vector vector10 = vector9.blank();
        int[] intArray12 = new int[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector13 = vector9.select(intArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[52]");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix10 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double11 = cRSMatrix10.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator12 = cRSMatrix10.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator16 = columnMajorSparseMatrix15.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator17 = rowMajorMatrixIterator12.orElseSubtract(matrixIterator16);
        org.la4j.iterator.MatrixIterator matrixIterator18 = columnMajorMatrixIterator7.orElseAdd(matrixIterator16);
        org.la4j.iterator.MatrixIterator matrixIterator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.MatrixIterator matrixIterator20 = columnMajorMatrixIterator7.andAlsoMultiply(matrixIterator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(cRSMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrixIterator16);
        org.junit.Assert.assertNotNull(matrixIterator17);
        org.junit.Assert.assertNotNull(matrixIterator18);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory0 = org.la4j.LinearAlgebra.DecompositorFactory.LU;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray36);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix39 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.MatrixDecompositor matrixDecompositor40 = decompositorFactory0.create((org.la4j.Matrix) basic1DMatrix39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(decompositorFactory0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(basic1DMatrix39);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix10 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix17.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction20 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator21 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction20);
        double double22 = matrix18.fold(matrixAccumulator21);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure23 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator21);
        cCSMatrix13.eachNonZero(matrixProcedure23);
        cRSMatrix10.eachNonZero(matrixProcedure23);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.eachNonZero(matrixProcedure23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrixAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure23);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str4 = basic2DMatrix3.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition5 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double9 = cRSMatrix8.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        org.la4j.Matrix matrix15 = ooPlaceMatricesAddition5.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix8, rowMajorSparseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix18 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition5.apply(columnMajorSparseMatrix18, denseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray25 = columnMajorSparseMatrix24.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation26 = ooPlaceMatricesAddition5.partiallyApply(columnMajorSparseMatrix24);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, columnMajorSparseMatrix24);
        org.la4j.Matrix matrix29 = basic2DMatrix3.add(1.0E100d);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = basic2DMatrix3.get((-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str4, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction12 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator13 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction12);
        double double14 = matrix10.fold(matrixAccumulator13);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure15 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator13);
        cCSMatrix5.eachNonZero(matrixProcedure15);
        org.la4j.Matrix matrix17 = basic2DMatrix2.kroneckerProduct((org.la4j.Matrix) cCSMatrix5);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector18 = matrix17.toColumnVector();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrixAccumulator13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure15);
        org.junit.Assert.assertNotNull(matrix17);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector13 = basicVector12.copy();
        org.la4j.Matrix matrix14 = basicVector12.toDiagonalMatrix();
        org.la4j.Vector vector16 = basicVector12.blankOfLength(52);
        org.la4j.vector.SparseVector sparseVector18 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct19 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray26);
        org.la4j.vector.dense.BasicVector basicVector28 = new org.la4j.vector.dense.BasicVector(doubleArray26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        ooPlaceOuterProduct19.ensureApplicableTo((org.la4j.Vector) basicVector28, (org.la4j.Vector) basicVector37);
        org.la4j.Matrix matrix39 = basicVector37.toColumnMatrix();
        org.la4j.Matrix matrix40 = sparseVector18.outerProduct((org.la4j.Vector) basicVector37);
        org.la4j.Matrix matrix41 = basicVector37.toRowMatrix();
        org.la4j.Matrix matrix42 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector12, (org.la4j.vector.DenseVector) basicVector37);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector45 = basicVector37.slice((int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [100..-1].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(vector16);
        org.junit.Assert.assertNotNull(sparseVector18);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix4 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3);
        byte[] byteArray5 = basic2DMatrix3.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector6 = org.la4j.vector.dense.BasicVector.fromBinary(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode BasicVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(byteArray5);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asSumAccumulator(1.1102230246251565E-14d);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        double[] doubleArray9 = basicVector8.toArray();
        org.la4j.Vector vector11 = basicVector8.blankOfLength((int) 'a');
        org.la4j.Vector vector13 = vector11.sliceLeft((int) (short) 1);
        double double14 = vector13.max();
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        org.la4j.Matrix matrix85 = basic1DMatrix82.blankOfShape((int) 'a', 1);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = basic1DMatrix82.determinant();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can not compute determinant of non-square matrix.");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
        org.junit.Assert.assertNotNull(matrix85);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.ZERO_MATRIX;
        boolean boolean3 = matrixPredicate0.test(0, 0);
        org.junit.Assert.assertNotNull(matrixPredicate0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix84 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double88 = rowMajorSparseMatrix84.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix89 = rowMajorSparseMatrix84.toSparseMatrix();
        org.la4j.Matrix matrix90 = rowMajorSparseMatrix84.copy();
        org.la4j.Matrix matrix91 = denseMatrix40.kroneckerProduct((org.la4j.Matrix) rowMajorSparseMatrix84);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication92 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix95 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix96 = ooPlaceMatrixByItsTransposeMultiplication92.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix95);
        org.la4j.Matrix matrix97 = rowMajorSparseMatrix84.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication92);
        org.la4j.decomposition.LUDecompositor lUDecompositor98 = new org.la4j.decomposition.LUDecompositor(matrix97);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix84);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(basic2DMatrix95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(matrix97);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition5 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double9 = cRSMatrix8.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        org.la4j.Matrix matrix15 = ooPlaceMatricesAddition5.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix8, rowMajorSparseMatrix13);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition16 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double20 = cRSMatrix19.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.Matrix matrix26 = ooPlaceMatricesAddition16.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix19, rowMajorSparseMatrix24);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix29 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix31 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix32 = ooPlaceMatricesAddition16.apply(columnMajorSparseMatrix29, denseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix37 = rowMajorSparseMatrix36.removeLastRow();
        double double41 = rowMajorSparseMatrix36.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector42 = rowMajorSparseMatrix36.toRowVector();
        org.la4j.Matrix matrix43 = ooPlaceMatricesAddition5.apply(denseMatrix31, rowMajorSparseMatrix36);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator44 = denseMatrix31.columnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator45 = matrixIterator4.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator44);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = matrixIterator4.get();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(vector42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator44);
        org.junit.Assert.assertNotNull(matrixIterator45);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication53 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix56 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator57 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray58 = cCSMatrix56.foldRows(vectorAccumulator57);
        org.la4j.Matrix matrix59 = ooPlaceMatrixByItsTransposeMultiplication53.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix56);
        double double60 = matrix59.norm();
        org.la4j.Matrix matrix61 = matrix46.kroneckerProduct(matrix59);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SweepSolver sweepSolver62 = new org.la4j.linear.SweepSolver(matrix61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix56);
        org.junit.Assert.assertNotNull(vectorAccumulator57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 7.211102550927978d + "'", double60 == 7.211102550927978d);
        org.junit.Assert.assertNotNull(matrix61);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        int[] intArray37 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector38 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray34, intArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector39 = compressedVector2.select(intArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 100]");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.identity(0);
        org.junit.Assert.assertNotNull(sparseMatrix1);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray0);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver3 = new org.la4j.linear.ForwardBackSubstitutionSolver((org.la4j.Matrix) basic2DMatrix2);
        int int4 = forwardBackSubstitutionSolver3.unknowns();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.la4j.Matrix matrix2 = columnMajorSparseMatrix1.multiplyByItsTranspose();
        // The following exception was thrown during execution in test generation
        try {
            matrix2.setColumn((int) (short) 1, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        double[][] doubleArray84 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix85 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray84);
        org.la4j.matrix.DenseMatrix denseMatrix86 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray84);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix87 = denseMatrix86.toRowMajorSparseMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation88 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix87);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix91 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator92 = cCSMatrix91.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix95 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double96 = cRSMatrix95.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix97 = cRSMatrix95.toColumnMajorSparseMatrix();
        org.la4j.Matrix matrix98 = columnMajorSparseMatrix97.rotate();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix99 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix91, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '10' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(denseMatrix85);
        org.junit.Assert.assertNotNull(denseMatrix86);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix87);
        org.junit.Assert.assertNotNull(matrixMatrixOperation88);
        org.junit.Assert.assertNotNull(cCSMatrix91);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator92);
        org.junit.Assert.assertNotNull(cRSMatrix95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix97);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector4 = denseVector1.slice((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [97..0].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector1);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix39 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix40 = org.la4j.matrix.sparse.CCSMatrix.from2DArray(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertNotNull(basic1DMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix40);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str3 = vector2.toCSV();
        org.la4j.vector.SparseVector sparseVector4 = vector2.toSparseVector();
        boolean boolean6 = sparseVector4.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator7 = sparseVector4.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.DenseMatrix denseMatrix16 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray15);
        org.la4j.vector.dense.BasicVector basicVector17 = new org.la4j.vector.dense.BasicVector(doubleArray15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        ooPlaceOuterProduct8.ensureApplicableTo((org.la4j.Vector) basicVector17, (org.la4j.Vector) basicVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix30 = compressedVector29.toColumnMatrix();
        org.la4j.Matrix matrix31 = sparseVector4.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct8, (org.la4j.Vector) compressedVector29);
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct32 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double40 = rowMajorSparseMatrix36.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix41 = rowMajorSparseMatrix36.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct42 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean43 = sparseMatrix41.equals((java.lang.Object) ooPlaceOuterProduct42);
        org.la4j.vector.DenseVector denseVector45 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random47 = null;
        org.la4j.vector.DenseVector denseVector48 = org.la4j.vector.DenseVector.random(0, random47);
        java.lang.String str49 = denseVector48.toString();
        ooPlaceOuterProduct42.ensureApplicableTo((org.la4j.Vector) denseVector45, (org.la4j.Vector) denseVector48);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation51 = ooPlaceInnerProduct32.partiallyApply(denseVector48);
        org.la4j.Vector vector52 = denseVector48.blank();
        org.la4j.Matrix matrix53 = matrixVectorVectorOperation0.apply(sparseVector4, denseVector48);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation54 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.SparseVector sparseVector55 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation56 = vectorVectorVectorOperation54.partiallyApply(sparseVector55);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector57 = sparseVector4.apply(vectorVectorOperation56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation0);
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str3, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(vectorIterator7);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix16);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(denseVector45);
        org.junit.Assert.assertNotNull(denseVector48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation51);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation54);
        org.junit.Assert.assertNotNull(vectorVectorOperation56);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.la4j.operation.VectorVectorOperation<java.lang.Double> doubleVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_INNER_PRODUCT;
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.lang.String str4 = denseVector3.toString();
        org.la4j.Matrix matrix5 = denseVector3.toColumnMatrix();
        double double6 = denseVector3.manhattanNorm();
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation7 = doubleVectorVectorOperation0.partiallyApply(denseVector3);
        org.junit.Assert.assertNotNull(doubleVectorVectorOperation0);
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleVectorOperation7);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector1.swapElements(10, (int) (byte) 100);
        boolean boolean6 = compressedVector1.isZeroAt((-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        org.la4j.vector.functor.VectorProcedure vectorProcedure19 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator17);
        cCSMatrix2.eachInRow((int) (short) 1, vectorProcedure19);
        org.la4j.iterator.VectorIterator vectorIterator22 = cCSMatrix2.iteratorOfColumn((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            vectorIterator22.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure19);
        org.junit.Assert.assertNotNull(vectorIterator22);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        int[] intArray9 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector10 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray6, intArray9);
        double double11 = compressedVector10.infinityNorm();
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, 100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal(0, 1.0d);
        java.lang.Class<?> wildcardClass3 = basic2DMatrix2.getClass();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.la4j.operation.ooplace.OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new org.la4j.operation.ooplace.OoPlaceVectorsAddition();
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction4 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector5 = vector2.transform(vectorFunction4);
        double double6 = vector2.product();
        org.la4j.vector.DenseVector denseVector7 = vector2.toDenseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random10 = null;
        org.la4j.vector.DenseVector denseVector11 = org.la4j.vector.DenseVector.random(0, random10);
        java.util.Random random13 = null;
        org.la4j.vector.DenseVector denseVector14 = org.la4j.vector.DenseVector.random(0, random13);
        org.la4j.Matrix matrix15 = ooPlaceOuterProduct8.apply(denseVector11, denseVector14);
        org.la4j.vector.sparse.CompressedVector compressedVector17 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat18 = null;
        java.lang.String str19 = compressedVector17.toMatrixMarket(numberFormat18);
        org.la4j.Vector vector21 = compressedVector17.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.vector.dense.BasicVector basicVector27 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray26);
        org.la4j.Matrix matrix28 = basicVector27.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate29 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean30 = basicVector27.non(vectorPredicate29);
        org.la4j.Vector vector32 = basicVector27.blankOfLength((int) 'a');
        org.la4j.Matrix matrix33 = ooPlaceOuterProduct8.apply((org.la4j.vector.SparseVector) compressedVector17, (org.la4j.vector.DenseVector) basicVector27);
        org.la4j.Vector vector34 = ooPlaceVectorsAddition0.apply(denseVector7, (org.la4j.vector.DenseVector) basicVector27);
        org.la4j.vector.SparseVector sparseVector36 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator52 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray53 = cCSMatrix51.foldRows(vectorAccumulator52);
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray53);
        org.la4j.vector.dense.BasicVector basicVector55 = new org.la4j.vector.dense.BasicVector(doubleArray53);
        ooPlaceOuterProduct37.ensureApplicableTo((org.la4j.Vector) basicVector46, (org.la4j.Vector) basicVector55);
        org.la4j.Matrix matrix57 = basicVector55.toColumnMatrix();
        org.la4j.Matrix matrix58 = sparseVector36.outerProduct((org.la4j.Vector) basicVector55);
        org.la4j.vector.dense.BasicVector basicVector60 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix64 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double68 = rowMajorSparseMatrix64.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix69 = rowMajorSparseMatrix64.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct70 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean71 = sparseMatrix69.equals((java.lang.Object) ooPlaceOuterProduct70);
        org.la4j.vector.dense.BasicVector basicVector73 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector74 = basicVector73.copy();
        org.la4j.Matrix matrix75 = basicVector60.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct70, (org.la4j.Vector) basicVector73);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorsAddition0.ensureApplicableTo((org.la4j.Vector) basicVector55, (org.la4j.Vector) basicVector73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertNotNull(vectorFunction4);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(denseVector7);
        org.junit.Assert.assertNotNull(denseVector11);
        org.junit.Assert.assertNotNull(denseVector14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str19, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vectorPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertNotNull(sparseVector36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertNotNull(vectorAccumulator52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix64);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(matrix75);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.vector.dense.BasicVector basicVector5 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.la4j.Matrix matrix6 = basicVector5.toRowMatrix();
        org.la4j.vector.DenseVector denseVector7 = basicVector5.toDenseVector();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(denseVector7);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        int int24 = forwardBackSubstitutionSolver23.unknowns();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation25 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray46 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray53 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray60 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray61 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix62 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray61);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation63 = matrixMatrixMatrixOperation25.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix62);
        org.la4j.iterator.MatrixIterator matrixIterator64 = basic2DMatrix62.iterator();
        org.la4j.Matrix matrix67 = basic2DMatrix62.copyOfShape((int) ' ', 10);
        boolean boolean68 = forwardBackSubstitutionSolver23.applicableTo((org.la4j.Matrix) basic2DMatrix62);
        int int69 = forwardBackSubstitutionSolver23.equations();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(basic2DMatrix62);
        org.junit.Assert.assertNotNull(matrixMatrixOperation63);
        org.junit.Assert.assertNotNull(matrixIterator64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double8 = rowMajorSparseMatrix4.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix4.multiplyByItsTranspose();
        org.la4j.Matrix matrix10 = null;
        matrixMatrixMatrixOperation0.ensureApplicableTo((org.la4j.Matrix) rowMajorSparseMatrix4, matrix10);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = null;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation13 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray49 = new double[][] { doubleArray20, doubleArray27, doubleArray34, doubleArray41, doubleArray48 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix50 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray49);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation51 = matrixMatrixMatrixOperation13.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix50);
        java.util.Spliterator<java.lang.Double> doubleSpliterator52 = basic2DMatrix50.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix53 = matrixMatrixMatrixOperation0.apply(rowMajorSparseMatrix12, (org.la4j.matrix.DenseMatrix) basic2DMatrix50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(basic2DMatrix50);
        org.junit.Assert.assertNotNull(matrixMatrixOperation51);
        org.junit.Assert.assertNotNull(doubleSpliterator52);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.randomSymmetric((int) (short) 100, (double) 1L, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator9 = cCSMatrix3.nonZeroIterator();
        int int10 = cCSMatrix3.rank();
        double double12 = cCSMatrix3.maxInColumn((int) (short) 10);
        org.la4j.Matrix matrix13 = cCSMatrix3.removeLastColumn();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(matrix13);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asConstFunction(0.0d);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) '#', (int) (byte) 10);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.zero(52, (int) (byte) 100);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        int[] intArray12 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector13 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray9, intArray12);
        int[] intArray16 = new int[] { (short) -1, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix17 = denseMatrix2.select(intArray12, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseMatrix2);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 10]");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix22 = compressedVector21.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector24 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        boolean boolean36 = basicVector24.equals((java.lang.Object) rowMajorSparseMatrix33);
        org.la4j.Matrix matrix37 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.DenseVector) basicVector24);
        org.la4j.Matrix matrix40 = matrix37.copyOfShape((int) (short) 1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = matrix37.trace();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(basicVector24);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        byte[] byteArray2 = cRSMatrix1.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.fromBinary(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode Basic1DMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str4 = basic2DMatrix3.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition5 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double9 = cRSMatrix8.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        org.la4j.Matrix matrix15 = ooPlaceMatricesAddition5.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix8, rowMajorSparseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix18 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition5.apply(columnMajorSparseMatrix18, denseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray25 = columnMajorSparseMatrix24.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation26 = ooPlaceMatricesAddition5.partiallyApply(columnMajorSparseMatrix24);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, columnMajorSparseMatrix24);
        org.la4j.Matrix matrix29 = basic2DMatrix3.add(1.0E100d);
        org.la4j.Matrix matrix32 = basic2DMatrix3.copyOfShape((int) (byte) 0, (int) (byte) 10);
        double double34 = basic2DMatrix3.maxInRow(0);
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str4, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix6 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double7 = cRSMatrix6.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator8 = cRSMatrix6.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix6);
        org.la4j.Matrix matrix10 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix3, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix6);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = null;
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication12 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean16 = cCSMatrix15.isRowMajor();
        org.la4j.Matrix matrix19 = cCSMatrix15.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator20 = cCSMatrix15.nonZeroColumnMajorIterator();
        org.la4j.Vector vector22 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str23 = vector22.toCSV();
        org.la4j.vector.SparseVector sparseVector24 = vector22.toSparseVector();
        boolean boolean26 = sparseVector24.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator27 = sparseVector24.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.Matrix matrix51 = sparseVector24.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct28, (org.la4j.Vector) compressedVector49);
        org.la4j.Vector vector52 = ooPlaceMatrixByVectorMultiplication12.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix15, sparseVector24);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix53 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix11, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic1DMatrix3);
        org.junit.Assert.assertNotNull(cRSMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator20);
        org.junit.Assert.assertNotNull(vector22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str23, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(vectorIterator27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(vector52);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double8 = cRSMatrix7.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator9 = cRSMatrix7.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = rowMajorMatrixIterator9.orElseSubtract(matrixIterator13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator18.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.iterator.MatrixIterator matrixIterator28 = matrixIterator14.andAlsoMultiply(matrixIterator27);
        org.la4j.iterator.MatrixIterator matrixIterator29 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator33 = cCSMatrix32.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean37 = cCSMatrix36.isRowMajor();
        org.la4j.Matrix matrix40 = cCSMatrix36.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator41 = cCSMatrix36.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator42 = columnMajorMatrixIterator33.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator41);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean46 = cCSMatrix45.isRowMajor();
        org.la4j.Matrix matrix49 = cCSMatrix45.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator50 = cCSMatrix45.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix53 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double54 = cRSMatrix53.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator55 = cRSMatrix53.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator59 = columnMajorSparseMatrix58.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator60 = rowMajorMatrixIterator55.orElseSubtract(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator61 = columnMajorMatrixIterator50.orElseAdd(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator62 = columnMajorMatrixIterator33.andAlsoDivide(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator63 = rowMajorMatrixIterator4.orElseAdd(matrixIterator62);
        org.la4j.iterator.MatrixIterator matrixIterator64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.MatrixIterator matrixIterator65 = rowMajorMatrixIterator4.andAlsoMultiply(matrixIterator64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(matrixIterator29);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator33);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator50);
        org.junit.Assert.assertNotNull(cRSMatrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrixIterator59);
        org.junit.Assert.assertNotNull(matrixIterator60);
        org.junit.Assert.assertNotNull(matrixIterator61);
        org.junit.Assert.assertNotNull(matrixIterator62);
        org.junit.Assert.assertNotNull(matrixIterator63);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory28 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector29 = compressedVector2.to(basicVectorVectorFactory28);
        java.util.Spliterator<java.lang.Double> doubleSpliterator30 = compressedVector2.spliterator();
        org.la4j.Matrix matrix31 = compressedVector2.toRowMatrix();
        byte[] byteArray32 = compressedVector2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector33 = org.la4j.vector.dense.BasicVector.fromBinary(byteArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode BasicVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory28);
        org.junit.Assert.assertNotNull(basicVector29);
        org.junit.Assert.assertNotNull(doubleSpliterator30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asDivFunction(0.0d);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver44 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix43);
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct45 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double53 = rowMajorSparseMatrix49.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix54 = rowMajorSparseMatrix49.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct55 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean56 = sparseMatrix54.equals((java.lang.Object) ooPlaceOuterProduct55);
        org.la4j.vector.DenseVector denseVector58 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random60 = null;
        org.la4j.vector.DenseVector denseVector61 = org.la4j.vector.DenseVector.random(0, random60);
        java.lang.String str62 = denseVector61.toString();
        ooPlaceOuterProduct55.ensureApplicableTo((org.la4j.Vector) denseVector58, (org.la4j.Vector) denseVector61);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation64 = ooPlaceInnerProduct45.partiallyApply(denseVector61);
        org.la4j.Vector vector65 = denseVector61.blank();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector66 = forwardBackSubstitutionSolver44.solve((org.la4j.Vector) denseVector61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(denseVector58);
        org.junit.Assert.assertNotNull(denseVector61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation64);
        org.junit.Assert.assertNotNull(vector65);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.Vector vector4 = compressedVector1.blankOfLength(52);
        org.la4j.iterator.VectorIterator vectorIterator5 = vector4.iterator();
        org.la4j.Vector vector7 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str8 = vector7.toCSV();
        org.la4j.vector.SparseVector sparseVector9 = vector7.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean25 = sparseMatrix23.is(advancedMatrixPredicate24);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double28 = sparseMatrix23.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator27);
        org.la4j.vector.functor.VectorProcedure vectorProcedure29 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator27);
        columnMajorSparseMatrix12.eachNonZeroInRow((-1), vectorProcedure29);
        sparseVector9.each(vectorProcedure29);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = vector4.cosineSimilarity((org.la4j.Vector) sparseVector9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(vectorIterator5);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str8, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure29);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero((int) (byte) 10, (int) (byte) -1);
        org.la4j.Vector vector4 = sparseVector2.multiply((double) (byte) 1);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication5 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector7 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector7.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct11 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        double double20 = rowMajorSparseMatrix15.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int21 = rowMajorSparseMatrix15.cardinality();
        org.la4j.Vector vector23 = rowMajorSparseMatrix15.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix26 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct11.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix15, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix26);
        org.la4j.Vector vector28 = ooPlaceVectorByMatrixMultiplication5.apply((org.la4j.vector.SparseVector) compressedVector7, columnMajorSparseMatrix26);
        org.la4j.vector.SparseVector sparseVector30 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction31 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix38 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix39 = ooPlaceMatricesSubtraction31.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix35, denseMatrix38);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix42 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double43 = columnMajorSparseMatrix42.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix46 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double47 = denseMatrix46.min();
        double double48 = denseMatrix46.sum();
        org.la4j.Matrix matrix49 = ooPlaceMatricesSubtraction31.apply(columnMajorSparseMatrix42, denseMatrix46);
        org.la4j.Vector vector50 = ooPlaceVectorByMatrixMultiplication5.apply(sparseVector30, columnMajorSparseMatrix42);
        byte[] byteArray51 = sparseVector30.toBinary();
        boolean boolean53 = sparseVector2.equals((org.la4j.Vector) sparseVector30, 1.0E100d);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(vector28);
        org.junit.Assert.assertNotNull(sparseVector30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(denseMatrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(vector50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[16, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix37 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(basic1DMatrix37);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation7 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray42 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray43 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix44 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray43);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation45 = matrixMatrixMatrixOperation7.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix44);
        org.la4j.Matrix matrix47 = basic2DMatrix44.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix51.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction54 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator55 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction54);
        double double56 = matrix52.fold(matrixAccumulator55);
        double double57 = matrix52.manhattanNorm();
        matrixMatrixMatrixOperation6.ensureApplicableTo(matrix47, matrix52);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix61 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator62 = columnMajorSparseMatrix61.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double71 = rowMajorSparseMatrix67.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix72 = rowMajorSparseMatrix67.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate73 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean74 = sparseMatrix72.is(advancedMatrixPredicate73);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator76 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double77 = sparseMatrix72.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator76);
        org.la4j.vector.functor.VectorProcedure vectorProcedure78 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator76);
        columnMajorSparseMatrix61.eachNonZeroInRow((-1), vectorProcedure78);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix82 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator83 = cRSMatrix82.nonZeroIterator();
        org.la4j.Vector vector85 = cRSMatrix82.getColumn(100);
        boolean boolean88 = cRSMatrix82.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix89 = matrixMatrixMatrixOperation6.apply(columnMajorSparseMatrix61, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix82);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix92 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix93 = rowMajorSparseMatrix92.shuffle();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix94 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix82, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix92);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(basic2DMatrix44);
        org.junit.Assert.assertNotNull(matrixMatrixOperation45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrixAccumulator55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrixIterator62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix72);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure78);
        org.junit.Assert.assertNotNull(cRSMatrix82);
        org.junit.Assert.assertNotNull(matrixIterator83);
        org.junit.Assert.assertNotNull(vector85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix92);
        org.junit.Assert.assertNotNull(matrix93);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.zero(52, (int) (byte) 100);
        double double3 = denseMatrix2.diagonalProduct();
        org.junit.Assert.assertNotNull(denseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit(0);
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = denseVector1.toMatrixMarket(numberFormat2);
        org.la4j.iterator.VectorIterator vectorIterator4 = denseVector1.iterator();
        byte[] byteArray5 = denseVector1.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str3, "%%MatrixMarket vector array real\n0\n");
        org.junit.Assert.assertNotNull(vectorIterator4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix22 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix29.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction32 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator33 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction32);
        double double34 = matrix30.fold(matrixAccumulator33);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure35 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator33);
        cCSMatrix25.eachNonZero(matrixProcedure35);
        cRSMatrix22.eachNonZero(matrixProcedure35);
        java.util.Random random40 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) 100, Double.NaN, random40);
        org.la4j.Matrix matrix42 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix22, columnMajorSparseMatrix41);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator43 = columnMajorSparseMatrix41.nonZeroRowMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.JacobiSolver jacobiSolver44 = new org.la4j.linear.JacobiSolver((org.la4j.Matrix) columnMajorSparseMatrix41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrixAccumulator33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure35);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator43);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor3 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix2);
        java.util.Random random6 = null;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = org.la4j.matrix.dense.Basic1DMatrix.random((int) (short) 1, (int) (byte) 0, random6);
        boolean boolean8 = rawQRDecompositor3.applicableTo((org.la4j.Matrix) basic1DMatrix7);
        org.la4j.Matrix[] matrixArray9 = rawQRDecompositor3.decompose();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(basic1DMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrixArray9);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        org.la4j.Matrix matrix5 = cCSMatrix2.divide((double) 0);
        org.la4j.Matrix matrix6 = cCSMatrix2.transpose();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) 'a', (int) (byte) 1);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix10 = basic2DMatrix2.insert((org.la4j.Matrix) basic1DMatrix5, (int) '4', (int) (byte) -1, (int) (short) 100, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot have negative destination position: 52, -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.Matrix matrix60 = cCSMatrix41.copyOfRows(0);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation61 = org.la4j.LinearAlgebra.OO_PLACE_KRONECKER_PRODUCT;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix62 = null;
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation63 = matrixMatrixMatrixOperation61.partiallyApply(columnMajorSparseMatrix62);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix64 = cCSMatrix41.apply(matrixMatrixOperation63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation61);
        org.junit.Assert.assertNotNull(matrixMatrixOperation63);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.random((int) (byte) -1, (int) (short) 10, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        double double47 = rowMajorSparseMatrix42.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector48 = rowMajorSparseMatrix42.toRowVector();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = matrixMatrixMatrixOperation0.apply(rowMajorSparseMatrix42, rowMajorSparseMatrix52);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix42.rotate();
        // The following exception was thrown during execution in test generation
        try {
            double double62 = rowMajorSparseMatrix42.maxInRow((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector2 = org.la4j.Vector.random((int) (short) 100, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix((int) (byte) 10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix2.swapColumns((int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.Random random1 = null;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.randomSymmetric((int) (byte) 0, random1);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory84 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix85 = basic2DMatrix43.to(basic1DMatrixMatrixFactory84);
        org.la4j.iterator.VectorIterator vectorIterator87 = basic2DMatrix43.iteratorOfRow((int) '#');
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory84);
        org.junit.Assert.assertNotNull(basic1DMatrix85);
        org.junit.Assert.assertNotNull(vectorIterator87);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.GAUSSIAN;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix1 = org.la4j.Matrix.identity((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.Vector vector39 = cRSMatrix36.getColumn((-1));
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter40 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) cRSMatrix36);
        org.la4j.Matrix matrix41 = gaussJordanInverter40.self();
        org.la4j.Matrix matrix44 = matrix41.copyOfShape((int) '4', (int) (short) 100);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix0 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix8 = rowMajorSparseMatrix7.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction10 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator11 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction10);
        double double12 = matrix8.fold(matrixAccumulator11);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure13 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator11);
        cCSMatrix3.eachNonZero(matrixProcedure13);
        cRSMatrix0.eachNonZero(matrixProcedure13);
        org.la4j.matrix.functor.MatrixFunction matrixFunction19 = org.la4j.Matrices.asMulFunction((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix0.updateAt((int) (byte) 1, (int) (short) 0, matrixFunction19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixAccumulator11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure13);
        org.junit.Assert.assertNotNull(matrixFunction19);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector45.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.SparseVector) compressedVector50);
        double double52 = compressedVector50.density();
        java.lang.String str53 = compressedVector50.toString();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector55 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector50, rowMajorSparseMatrix54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000" + "'", str53, "0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.Vector vector12 = org.la4j.Vector.fromArray(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.DenseMatrix denseMatrix22 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray21);
        org.la4j.vector.dense.BasicVector basicVector23 = new org.la4j.vector.dense.BasicVector(doubleArray21);
        double[] doubleArray24 = basicVector23.toArray();
        int[] intArray30 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector31 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray24, intArray30);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        double[] doubleArray43 = basicVector42.toArray();
        int[] intArray49 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray43, intArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) -1, (int) (short) 0, (int) (byte) 10, doubleArray9, intArray30, intArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.vector.sparse.CompressedVector compressedVector9 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat10 = null;
        java.lang.String str11 = compressedVector9.toMatrixMarket(numberFormat10);
        org.la4j.Vector vector13 = compressedVector9.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.vector.dense.BasicVector basicVector19 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray18);
        org.la4j.Matrix matrix20 = basicVector19.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate21 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean22 = basicVector19.non(vectorPredicate21);
        org.la4j.Vector vector24 = basicVector19.blankOfLength((int) 'a');
        org.la4j.Matrix matrix25 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector9, (org.la4j.vector.DenseVector) basicVector19);
        org.la4j.Vector vector27 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str28 = vector27.toCSV();
        org.la4j.vector.SparseVector sparseVector29 = vector27.toSparseVector();
        boolean boolean31 = sparseVector29.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator32 = sparseVector29.iterator();
        org.la4j.iterator.VectorIterator vectorIterator33 = sparseVector29.nonZeroIterator();
        org.la4j.Vector vector35 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str36 = vector35.toCSV();
        org.la4j.vector.SparseVector sparseVector37 = vector35.toSparseVector();
        boolean boolean39 = sparseVector37.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator40 = sparseVector37.iterator();
        org.la4j.iterator.VectorIterator vectorIterator41 = sparseVector37.nonZeroIterator();
        double double42 = sparseVector37.manhattanNorm();
        double double43 = sparseVector37.density();
        byte[] byteArray44 = sparseVector37.toBinary();
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct0.apply(sparseVector29, sparseVector37);
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str11, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(vectorPredicate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(vector27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str28, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(vectorIterator32);
        org.junit.Assert.assertNotNull(vectorIterator33);
        org.junit.Assert.assertNotNull(vector35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str36, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(vectorIterator40);
        org.junit.Assert.assertNotNull(vectorIterator41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[16, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrix45);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) -1, (double) (-1L), random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean20 = cCSMatrix19.isRowMajor();
        org.la4j.Matrix matrix23 = cCSMatrix19.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator24 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix28.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double38 = rowMajorSparseMatrix34.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = rowMajorSparseMatrix34.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct40 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean41 = sparseMatrix39.equals((java.lang.Object) ooPlaceOuterProduct40);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix28.hadamardProduct((org.la4j.Matrix) sparseMatrix39);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction16.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix19, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix28);
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction12.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, rowMajorSparseMatrix28);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix64 = ooPlaceMatricesAddition45.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix58, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        double double65 = rowMajorSparseMatrix63.norm();
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double75 = rowMajorSparseMatrix71.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix76 = rowMajorSparseMatrix71.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate77 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean78 = sparseMatrix76.is(advancedMatrixPredicate77);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator80 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double81 = sparseMatrix76.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator80);
        org.la4j.vector.functor.VectorProcedure vectorProcedure82 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator80);
        rowMajorSparseMatrix63.eachNonZeroInColumn(0, vectorProcedure82);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator24);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix76);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure82);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Matrix matrix3 = cRSMatrix2.transpose();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.Matrix matrix40 = basic2DMatrix37.blankOfColumns(52);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix37.set(100, (int) (short) 10, 7.211102550927978d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix1 = org.la4j.Matrix.identity((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        double double11 = cRSMatrix3.infinityNorm();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct12 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        double double21 = rowMajorSparseMatrix16.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int22 = rowMajorSparseMatrix16.cardinality();
        org.la4j.Vector vector24 = rowMajorSparseMatrix16.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct12.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator60 = cCSMatrix35.iterator();
        org.la4j.Matrix matrix63 = cCSMatrix35.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix64 = ooPlaceMatrixHadamardProduct12.applySymmetric(rowMajorSparseMatrix31, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix35);
        org.la4j.Matrix matrix65 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction66 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix70 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix71 = rowMajorSparseMatrix70.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix73 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix74 = ooPlaceMatricesSubtraction66.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix70, denseMatrix73);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix77 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double78 = columnMajorSparseMatrix77.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix81 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double82 = denseMatrix81.min();
        double double83 = denseMatrix81.sum();
        org.la4j.Matrix matrix84 = ooPlaceMatricesSubtraction66.apply(columnMajorSparseMatrix77, denseMatrix81);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix87 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator88 = cRSMatrix87.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation89 = ooPlaceMatricesSubtraction66.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix87);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation90 = ooPlaceMatrixHadamardProduct0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix87);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(denseMatrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + Double.POSITIVE_INFINITY + "'", double82 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(cRSMatrix87);
        org.junit.Assert.assertNotNull(matrixIterator88);
        org.junit.Assert.assertNotNull(matrixMatrixOperation89);
        org.junit.Assert.assertNotNull(matrixMatrixOperation90);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        boolean boolean5 = sparseVector3.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator6 = sparseVector3.iterator();
        org.la4j.iterator.VectorIterator vectorIterator7 = sparseVector3.nonZeroIterator();
        double double8 = sparseVector3.manhattanNorm();
        double double9 = sparseVector3.density();
        double double10 = sparseVector3.infinityNorm();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(vectorIterator6);
        org.junit.Assert.assertNotNull(vectorIterator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate6 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix9 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean10 = advancedMatrixPredicate6.test((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter11 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.Matrix matrix12 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix9);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation13 = ooPlaceMatrixByVectorMultiplication0.partiallyApply(columnMajorSparseMatrix9);
        // The following exception was thrown during execution in test generation
        try {
            columnMajorSparseMatrix9.set((int) (short) 100, (int) (short) 0, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate6);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(vectorVectorOperation13);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = basic1DMatrix38.get(100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(basic1DMatrix38);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector28 = sparseVector3.slice(52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [52..0].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = org.la4j.matrix.dense.Basic1DMatrix.fromMatrixMarket(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.randomSymmetric((int) (short) 1, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix17 = denseMatrix15.rotate();
        int int18 = matrix17.rows();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = matrix17.toRowMajorSparseMatrix();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure5 = null;
        rowMajorSparseMatrix3.eachNonZero(matrixProcedure5);
        double double7 = rowMajorSparseMatrix3.max();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix9 = rowMajorSparseMatrix3.power((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = cRSMatrix2.toColumnMajorSparseMatrix();
        org.la4j.Matrix matrix5 = columnMajorSparseMatrix4.rotate();
        boolean boolean6 = columnMajorSparseMatrix4.isRowMajor();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_SUBTRACTION;
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.Matrix matrix11 = ooPlaceMatricesAddition1.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix4, rowMajorSparseMatrix9);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition12 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix15 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double16 = cRSMatrix15.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition12.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix15, rowMajorSparseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition12.apply(columnMajorSparseMatrix25, denseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        double double37 = rowMajorSparseMatrix32.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector38 = rowMajorSparseMatrix32.toRowVector();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition1.apply(denseMatrix27, rowMajorSparseMatrix32);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction52 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator53 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction52);
        double double54 = matrix50.fold(matrixAccumulator53);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure55 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator53);
        cCSMatrix45.eachNonZero(matrixProcedure55);
        org.la4j.Matrix matrix57 = ooPlaceMatricesAddition1.applySymmetric(rowMajorSparseMatrix42, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation58 = matrixMatrixMatrixOperation0.partiallyApply(rowMajorSparseMatrix42);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver59 = new org.la4j.linear.ForwardBackSubstitutionSolver((org.la4j.Matrix) rowMajorSparseMatrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(cRSMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixAccumulator53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixMatrixOperation58);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation24 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.DenseVector denseVector25 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation26 = vectorVectorVectorOperation24.partiallyApply(denseVector25);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray43 = cCSMatrix41.foldRows(vectorAccumulator42);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray43);
        org.la4j.vector.dense.BasicVector basicVector45 = new org.la4j.vector.dense.BasicVector(doubleArray43);
        ooPlaceOuterProduct27.ensureApplicableTo((org.la4j.Vector) basicVector36, (org.la4j.Vector) basicVector45);
        org.la4j.vector.sparse.CompressedVector compressedVector48 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector48.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix54 = ooPlaceOuterProduct27.apply((org.la4j.vector.SparseVector) compressedVector48, (org.la4j.vector.SparseVector) compressedVector53);
        double double55 = compressedVector53.min();
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation56 = vectorVectorVectorOperation24.partiallyApply((org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.Vector vector57 = compressedVector2.apply(vectorVectorOperation56);
        double double58 = compressedVector2.euclideanNorm();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation24);
        org.junit.Assert.assertNotNull(vectorVectorOperation26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(vectorVectorOperation56);
        org.junit.Assert.assertNotNull(vector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory28 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector29 = compressedVector2.to(basicVectorVectorFactory28);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = basicVector29.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory28);
        org.junit.Assert.assertNotNull(basicVector29);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.la4j.operation.ooplace.OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new org.la4j.operation.ooplace.OoPlaceVectorsSubtraction();
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str3 = vector2.toCSV();
        org.la4j.vector.SparseVector sparseVector4 = vector2.toSparseVector();
        boolean boolean6 = sparseVector4.isZeroAt(52);
        double double7 = sparseVector4.min();
        org.la4j.vector.dense.BasicVector basicVector10 = org.la4j.vector.dense.BasicVector.constant(1, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector11 = ooPlaceVectorsSubtraction0.apply(sparseVector4, (org.la4j.vector.DenseVector) basicVector10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str3, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(basicVector10);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        double double0 = org.la4j.LinearAlgebra.EPS;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 1.1102230246251565E-14d + "'", double0 == 1.1102230246251565E-14d);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix3.removeFirstColumn();
        org.la4j.LinearAlgebra.InverterFactory inverterFactory10 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter11 = matrix9.withInverter(inverterFactory10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(inverterFactory10);
        org.junit.Assert.assertNotNull(matrixInverter11);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector4 = basic2DMatrix2.getRow((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        ooPlaceOuterProduct2.ensureApplicableTo((org.la4j.Vector) basicVector11, (org.la4j.Vector) basicVector20);
        java.lang.String str22 = basicVector11.toMatrixMarket();
        double[] doubleArray23 = basicVector11.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix24 = org.la4j.matrix.SparseMatrix.from1DArray((int) (short) -1, (int) '4', doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str22, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator44 = cRSMatrix43.nonZeroIterator();
        org.la4j.Vector vector46 = cRSMatrix43.getColumn(100);
        boolean boolean49 = cRSMatrix43.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor50 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix43);
        org.la4j.Matrix matrix51 = rawLUDecompositor50.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction0.ensureApplicableTo(matrix51, (org.la4j.Matrix) cRSMatrix54);
        org.la4j.Vector vector57 = cRSMatrix54.getColumn(30);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertNotNull(matrixIterator44);
        org.junit.Assert.assertNotNull(vector46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertNotNull(vector57);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asProductAccumulator((double) (-1.0f));
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.SparseVector sparseVector3 = org.la4j.vector.SparseVector.random(30, Double.NEGATIVE_INFINITY, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        org.la4j.Matrix matrix7 = matrix6.removeFirstColumn();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector9 = matrix6.getRow(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) 100);
        double double4 = vectorFunction1.evaluate((int) (short) 0, (double) (byte) 0);
        org.junit.Assert.assertNotNull(vectorFunction1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-100.0d) + "'", double4 == (-100.0d));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.SparseVector sparseVector25 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix30.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix30, denseMatrix33);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double42 = denseMatrix41.min();
        double double43 = denseMatrix41.sum();
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction26.apply(columnMajorSparseMatrix37, denseMatrix41);
        org.la4j.Vector vector45 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector25, columnMajorSparseMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double53 = rowMajorSparseMatrix49.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix54 = rowMajorSparseMatrix49.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate55 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean56 = sparseMatrix54.is(advancedMatrixPredicate55);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator58 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double59 = sparseMatrix54.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator58);
        double double60 = vector45.fold(vectorAccumulator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(sparseVector25);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vector45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix54);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) 'a', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = basic2DMatrix2.get((int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double76 = cCSMatrix73.get((int) (byte) 0, (int) (short) 1);
        double double77 = cCSMatrix73.min();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication78 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication78.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix86 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator87 = cCSMatrix86.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix88 = cCSMatrix86.transpose();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation89 = ooPlaceKroneckerProduct0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix86);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cCSMatrix86);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrixMatrixOperation89);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate6 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix9 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean10 = advancedMatrixPredicate6.test((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter11 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.Matrix matrix12 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix9);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation13 = ooPlaceMatrixByVectorMultiplication0.partiallyApply(columnMajorSparseMatrix9);
        org.la4j.Vector vector14 = null;
        // The following exception was thrown during execution in test generation
        try {
            vectorVectorOperation13.ensureApplicableTo(vector14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate6);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(vectorVectorOperation13);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.identity(100);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = new org.la4j.matrix.sparse.CRSMatrix((int) (short) 10, 30);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix8 = rowMajorSparseMatrix6.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory9 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix10 = matrix8.to(basic1DMatrixMatrixFactory9);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix11 = cRSMatrix2.to(basic1DMatrixMatrixFactory9);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = cRSMatrix2.getOrElse((-1), (-1), (-11.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory9);
        org.junit.Assert.assertNotNull(basic1DMatrix10);
        org.junit.Assert.assertNotNull(basic1DMatrix11);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver44 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix43);
        org.la4j.decomposition.QRDecompositor qRDecompositor45 = new org.la4j.decomposition.QRDecompositor(matrix43);
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.Random random2 = null;
        org.la4j.Matrix matrix3 = org.la4j.Matrix.random((int) (short) 0, (int) (short) 1, random2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.util.Random random1 = null;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.random(0, random1);
        double double3 = denseVector2.product();
        org.la4j.Matrix matrix4 = denseVector2.toRowMatrix();
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator9 = cCSMatrix3.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.MatrixIterator matrixIterator11 = matrixIterator9.andAlsoMultiply(matrixIterator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator9);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator4 = cRSMatrix2.nonZeroIteratorOfRow(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.util.Random random3 = null;
        org.la4j.vector.DenseVector denseVector4 = org.la4j.vector.DenseVector.random(0, random3);
        double double5 = denseVector4.product();
        double[] doubleArray6 = denseVector4.toArray();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (short) 100, 100, doubleArray6);
        basic1DMatrix7.setAll((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix7.swapRows(100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(basic1DMatrix7);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.vector.functor.VectorFunction vectorFunction6 = org.la4j.Vectors.INV_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.asProductFunctionAccumulator((double) 1.0f, vectorFunction6);
        boolean boolean8 = matrix4.equals((java.lang.Object) vectorAccumulator7);
        // The following exception was thrown during execution in test generation
        try {
            vectorAccumulator7.update((int) '#', Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorFunction6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.JACOBI;
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation6 = inPlaceCopyMatrixToMatrix1.partiallyApply(rowMajorSparseMatrix5);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation7 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray42 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray43 = new double[][] { doubleArray14, doubleArray21, doubleArray28, doubleArray35, doubleArray42 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix44 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray43);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation45 = matrixMatrixMatrixOperation7.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix44);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix46 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction47 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix50 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction51 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix54 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean55 = cCSMatrix54.isRowMajor();
        org.la4j.Matrix matrix58 = cCSMatrix54.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator59 = cCSMatrix54.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix65 = rowMajorSparseMatrix63.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix69 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double73 = rowMajorSparseMatrix69.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix74 = rowMajorSparseMatrix69.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct75 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean76 = sparseMatrix74.equals((java.lang.Object) ooPlaceOuterProduct75);
        org.la4j.Matrix matrix77 = rowMajorSparseMatrix63.hadamardProduct((org.la4j.Matrix) sparseMatrix74);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction51.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix54, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        org.la4j.Matrix matrix79 = ooPlaceMatricesSubtraction47.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix50, rowMajorSparseMatrix63);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor80 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix63);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix82 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix46.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63, (org.la4j.matrix.SparseMatrix) cRSMatrix82);
        org.la4j.Matrix matrix84 = inPlaceCopyMatrixToMatrix1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix44, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix82);
        org.la4j.linear.LinearSystemSolver linearSystemSolver85 = solverFactory0.create((org.la4j.Matrix) cRSMatrix82);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix89 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix90 = rowMajorSparseMatrix89.removeLastRow();
        double double92 = matrix90.maxInColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LinearSystemSolver linearSystemSolver93 = solverFactory0.create(matrix90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrixMatrixOperation6);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(basic2DMatrix44);
        org.junit.Assert.assertNotNull(matrixMatrixOperation45);
        org.junit.Assert.assertNotNull(basic2DMatrix50);
        org.junit.Assert.assertNotNull(cCSMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator59);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix69);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(cRSMatrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(linearSystemSolver85);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + Double.NEGATIVE_INFINITY + "'", double92 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix0 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix8 = rowMajorSparseMatrix7.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction10 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator11 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction10);
        double double12 = matrix8.fold(matrixAccumulator11);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure13 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator11);
        cCSMatrix3.eachNonZero(matrixProcedure13);
        cRSMatrix0.eachNonZero(matrixProcedure13);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = cRSMatrix0.foldColumn((int) 'a', vectorAccumulator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrixAccumulator11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure13);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asPlusFunction((double) 10.0f);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.LEAST_SQUARES;
        org.junit.Assert.assertNotNull(solverFactory0);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix3.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator36 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray37 = cCSMatrix35.foldRows(vectorAccumulator36);
        org.la4j.matrix.DenseMatrix denseMatrix38 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray37);
        org.la4j.vector.dense.BasicVector basicVector39 = new org.la4j.vector.dense.BasicVector(doubleArray37);
        double[] doubleArray40 = basicVector39.toArray();
        int[] intArray46 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray40, intArray46);
        int[] intArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix49 = cCSMatrix3.select(intArray46, intArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertNotNull(vectorAccumulator36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.constant((int) (byte) 10, 0.0d);
        org.junit.Assert.assertNotNull(basicVector2);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.vector.functor.VectorFunction vectorFunction6 = null;
        org.la4j.Matrix matrix7 = columnMajorSparseMatrix3.transformRow(0, vectorFunction6);
        org.la4j.iterator.VectorIterator vectorIterator9 = columnMajorSparseMatrix3.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double17 = rowMajorSparseMatrix13.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator19 = rowMajorSparseMatrix13.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.iterator.VectorIterator vectorIterator20 = vectorIterator9.andAlsoMultiply(vectorIterator19);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix23 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator24 = cRSMatrix23.nonZeroIterator();
        org.la4j.Vector vector26 = cRSMatrix23.getColumn(100);
        boolean boolean29 = cRSMatrix23.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator31 = cRSMatrix23.nonZeroIteratorOfColumn((-1));
        int int32 = vectorIterator31.index();
        org.la4j.iterator.VectorIterator vectorIterator33 = null;
        org.la4j.iterator.VectorIterator vectorIterator34 = vectorIterator31.andAlsoDivide(vectorIterator33);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator38 = cRSMatrix37.nonZeroIterator();
        org.la4j.Vector vector40 = cRSMatrix37.getColumn(100);
        boolean boolean43 = cRSMatrix37.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator45 = cRSMatrix37.nonZeroIteratorOfColumn((-1));
        int int46 = vectorIterator45.index();
        org.la4j.iterator.VectorIterator vectorIterator47 = null;
        org.la4j.iterator.VectorIterator vectorIterator48 = vectorIterator45.andAlsoDivide(vectorIterator47);
        org.la4j.iterator.VectorIterator vectorIterator49 = vectorIterator31.andAlsoMultiply(vectorIterator47);
        org.la4j.iterator.VectorIterator vectorIterator50 = vectorIterator19.orElseAdd(vectorIterator47);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator19);
        org.junit.Assert.assertNotNull(vectorIterator20);
        org.junit.Assert.assertNotNull(cRSMatrix23);
        org.junit.Assert.assertNotNull(matrixIterator24);
        org.junit.Assert.assertNotNull(vector26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(vectorIterator31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator34);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertNotNull(matrixIterator38);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(vectorIterator45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator48);
        org.junit.Assert.assertNotNull(vectorIterator49);
        org.junit.Assert.assertNotNull(vectorIterator50);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMulFunction((double) (-1L));
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector72 = basic2DMatrix64.getRow((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.zero((int) 'a', (int) (short) 0);
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random4 = null;
        org.la4j.vector.DenseVector denseVector5 = org.la4j.vector.DenseVector.random(0, random4);
        org.la4j.Matrix matrix6 = matrixVectorVectorOperation0.apply(sparseVector2, denseVector5);
        org.la4j.Vector vector8 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str9 = vector8.toCSV();
        org.la4j.vector.SparseVector sparseVector10 = vector8.toSparseVector();
        boolean boolean12 = sparseVector10.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator13 = sparseVector10.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct14 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.DenseMatrix denseMatrix22 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray21);
        org.la4j.vector.dense.BasicVector basicVector23 = new org.la4j.vector.dense.BasicVector(doubleArray21);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix28 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator29 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray30 = cCSMatrix28.foldRows(vectorAccumulator29);
        org.la4j.matrix.DenseMatrix denseMatrix31 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray30);
        org.la4j.vector.dense.BasicVector basicVector32 = new org.la4j.vector.dense.BasicVector(doubleArray30);
        ooPlaceOuterProduct14.ensureApplicableTo((org.la4j.Vector) basicVector23, (org.la4j.Vector) basicVector32);
        org.la4j.vector.sparse.CompressedVector compressedVector35 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix36 = compressedVector35.toColumnMatrix();
        org.la4j.Matrix matrix37 = sparseVector10.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct14, (org.la4j.Vector) compressedVector35);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = denseVector5.cosineSimilarity((org.la4j.Vector) compressedVector35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 0 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation0);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(denseVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vector8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str9, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(vectorIterator13);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix22);
        org.junit.Assert.assertNotNull(cCSMatrix28);
        org.junit.Assert.assertNotNull(vectorAccumulator29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix31);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        double[] doubleArray9 = basicVector8.toArray();
        basicVector8.swapElements((int) (byte) 10, (int) '#');
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector4 = org.la4j.vector.sparse.CompressedVector.fromBinary(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CompressedVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double4 = columnMajorSparseMatrix3.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor5 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory6 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter7 = columnMajorSparseMatrix3.withInverter(inverterFactory6);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication8 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray13 = cCSMatrix11.foldRows(vectorAccumulator12);
        org.la4j.Matrix matrix14 = ooPlaceMatrixByItsTransposeMultiplication8.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix11);
        double double16 = cCSMatrix11.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator17 = cCSMatrix11.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix20 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator21 = cRSMatrix20.nonZeroIterator();
        org.la4j.Vector vector23 = cRSMatrix20.getColumn(100);
        boolean boolean26 = cRSMatrix20.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator28 = cRSMatrix20.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = cRSMatrix20.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory30 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix31 = cRSMatrix20.to(basic1DMatrixMatrixFactory30);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix32 = cCSMatrix11.to(basic1DMatrixMatrixFactory30);
        org.la4j.inversion.MatrixInverter matrixInverter33 = inverterFactory6.create((org.la4j.Matrix) cCSMatrix11);
        org.la4j.Matrix matrix35 = cCSMatrix11.subtract((double) '#');
        org.la4j.operation.ooplace.OoPlaceVectorsAddition ooPlaceVectorsAddition36 = new org.la4j.operation.ooplace.OoPlaceVectorsAddition();
        org.la4j.Vector vector38 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction40 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector41 = vector38.transform(vectorFunction40);
        double double42 = vector38.product();
        org.la4j.vector.DenseVector denseVector43 = vector38.toDenseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct44 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random46 = null;
        org.la4j.vector.DenseVector denseVector47 = org.la4j.vector.DenseVector.random(0, random46);
        java.util.Random random49 = null;
        org.la4j.vector.DenseVector denseVector50 = org.la4j.vector.DenseVector.random(0, random49);
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct44.apply(denseVector47, denseVector50);
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat54 = null;
        java.lang.String str55 = compressedVector53.toMatrixMarket(numberFormat54);
        org.la4j.Vector vector57 = compressedVector53.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix60 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator61 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray62 = cCSMatrix60.foldRows(vectorAccumulator61);
        org.la4j.vector.dense.BasicVector basicVector63 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray62);
        org.la4j.Matrix matrix64 = basicVector63.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate65 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean66 = basicVector63.non(vectorPredicate65);
        org.la4j.Vector vector68 = basicVector63.blankOfLength((int) 'a');
        org.la4j.Matrix matrix69 = ooPlaceOuterProduct44.apply((org.la4j.vector.SparseVector) compressedVector53, (org.la4j.vector.DenseVector) basicVector63);
        org.la4j.Vector vector70 = ooPlaceVectorsAddition36.apply(denseVector43, (org.la4j.vector.DenseVector) basicVector63);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector71 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix11, denseVector43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory6);
        org.junit.Assert.assertNotNull(matrixInverter7);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator17);
        org.junit.Assert.assertNotNull(cRSMatrix20);
        org.junit.Assert.assertNotNull(matrixIterator21);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(vectorIterator28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory30);
        org.junit.Assert.assertNotNull(basic1DMatrix31);
        org.junit.Assert.assertNotNull(basic1DMatrix32);
        org.junit.Assert.assertNotNull(matrixInverter33);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(vectorFunction40);
        org.junit.Assert.assertNotNull(vector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(denseVector43);
        org.junit.Assert.assertNotNull(denseVector47);
        org.junit.Assert.assertNotNull(denseVector50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str55, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector57);
        org.junit.Assert.assertNotNull(cCSMatrix60);
        org.junit.Assert.assertNotNull(vectorAccumulator61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(vectorPredicate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(vector68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(vector70);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        double[] doubleArray9 = basicVector8.toArray();
        org.la4j.Vector vector11 = basicVector8.blankOfLength((int) 'a');
        org.la4j.Vector vector13 = vector11.sliceLeft((int) (short) 1);
        org.la4j.Matrix matrix14 = vector13.toDiagonalMatrix();
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(matrix14);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.diagonal((int) (short) 10, (double) '#');
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication3 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.Matrix matrix9 = ooPlaceMatrixByItsTransposeMultiplication3.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix6);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double13 = cRSMatrix12.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator14 = cRSMatrix12.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor15 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix12);
        double double16 = cRSMatrix12.max();
        org.la4j.Matrix matrix17 = ooPlaceMatrixByItsTransposeMultiplication3.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix12);
        org.la4j.Matrix matrix19 = cRSMatrix12.multiply((double) (byte) 100);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate20 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix23 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean24 = advancedMatrixPredicate20.test((org.la4j.Matrix) columnMajorSparseMatrix23);
        boolean boolean25 = cRSMatrix12.is(advancedMatrixPredicate20);
        boolean boolean26 = matrix2.non(advancedMatrixPredicate20);
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate20);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_BY_MATRIX_MULTIPLICATION;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.unit(0);
        java.text.NumberFormat numberFormat3 = null;
        java.lang.String str4 = denseVector2.toMatrixMarket(numberFormat3);
        org.la4j.iterator.VectorIterator vectorIterator5 = denseVector2.iterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector8 = vectorVectorMatrixOperation0.apply(denseVector2, columnMajorSparseMatrix7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vectorVectorMatrixOperation0);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str4, "%%MatrixMarket vector array real\n0\n");
        org.junit.Assert.assertNotNull(vectorIterator5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix86 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix89 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        org.la4j.Matrix matrix90 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix86, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix89);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(basic1DMatrix86);
        org.junit.Assert.assertNotNull(cRSMatrix89);
        org.junit.Assert.assertNotNull(matrix90);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero(30, 0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) 'a');
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter2 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) basic2DMatrix1);
        org.la4j.Matrix matrix3 = gaussJordanInverter2.inverse();
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkMinAccumulator();
        double[] doubleArray5 = matrix3.foldColumns(vectorAccumulator4);
        org.junit.Assert.assertNotNull(basic2DMatrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.identity(0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix1);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Vector vector10 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str11 = vector10.toCSV();
        org.la4j.vector.SparseVector sparseVector12 = vector10.toSparseVector();
        boolean boolean14 = sparseVector12.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator15 = sparseVector12.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct16 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray23);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector(doubleArray23);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator31 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray32 = cCSMatrix30.foldRows(vectorAccumulator31);
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray32);
        org.la4j.vector.dense.BasicVector basicVector34 = new org.la4j.vector.dense.BasicVector(doubleArray32);
        ooPlaceOuterProduct16.ensureApplicableTo((org.la4j.Vector) basicVector25, (org.la4j.Vector) basicVector34);
        org.la4j.vector.sparse.CompressedVector compressedVector37 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix38 = compressedVector37.toColumnMatrix();
        org.la4j.Matrix matrix39 = sparseVector12.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct16, (org.la4j.Vector) compressedVector37);
        org.la4j.Vector vector40 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, sparseVector12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix43 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int44 = cCSMatrix43.cardinality();
        org.la4j.Matrix matrix46 = cCSMatrix43.divide((double) 0);
        org.la4j.vector.dense.BasicVector basicVector48 = new org.la4j.vector.dense.BasicVector((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix43, (org.la4j.Vector) basicVector48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 100 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str11, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(vectorIterator15);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(vectorAccumulator31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(matrix46);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean25 = cCSMatrix24.isRowMajor();
        org.la4j.Matrix matrix28 = cCSMatrix24.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix24.nonZeroColumnMajorIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate30 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix33 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean34 = advancedMatrixPredicate30.test((org.la4j.Matrix) columnMajorSparseMatrix33);
        org.la4j.Matrix matrix35 = columnMajorSparseMatrix33.rotate();
        boolean boolean36 = columnMajorSparseMatrix33.isRowMajor();
        boolean boolean37 = columnMajorSparseMatrix33.isRowMajor();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix24, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix33);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix41 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator42 = cRSMatrix41.nonZeroRowMajorIterator();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation43 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray50 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray57 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray64 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray71 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray78 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray79 = new double[][] { doubleArray50, doubleArray57, doubleArray64, doubleArray71, doubleArray78 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix80 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray79);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation81 = matrixMatrixMatrixOperation43.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix80);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix84 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double85 = columnMajorSparseMatrix84.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory86 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix87 = columnMajorSparseMatrix84.to(basic1DMatrixMatrixFactory86);
        matrixMatrixOperation81.ensureApplicableTo((org.la4j.Matrix) basic1DMatrix87);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix89 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix87);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate30);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cRSMatrix41);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator42);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(basic2DMatrix80);
        org.junit.Assert.assertNotNull(matrixMatrixOperation81);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory86);
        org.junit.Assert.assertNotNull(basic1DMatrix87);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        org.la4j.Matrix matrix87 = cRSMatrix17.transpose();
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator88 = org.la4j.Vectors.mkMinAccumulator();
        double[] doubleArray89 = matrix87.foldColumns(vectorAccumulator88);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(vectorAccumulator88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.random((int) 'a', 52, (-100.0d), random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.fromCSV("0.5.5");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: multiple points");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        boolean boolean11 = cCSMatrix2.nonZeroAt(10, (int) (byte) 1);
        org.la4j.Matrix matrix12 = cCSMatrix2.rotate();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(matrix12);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.DenseVector denseVector2 = vector1.toDenseVector();
        org.la4j.Matrix matrix3 = vector1.toDiagonalMatrix();
        org.la4j.Matrix matrix5 = matrix3.copyOfColumns((int) (byte) 1);
        org.la4j.Matrix matrix6 = matrix5.shuffle();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.Matrix matrix23 = basic1DMatrix14.shuffle();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix26 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator27 = cRSMatrix26.nonZeroIterator();
        org.la4j.Vector vector29 = cRSMatrix26.getColumn(100);
        boolean boolean32 = cRSMatrix26.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator34 = cRSMatrix26.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = cRSMatrix26.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory36 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix37 = cRSMatrix26.to(basic1DMatrixMatrixFactory36);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = matrix23.to(basic1DMatrixMatrixFactory36);
        double double39 = matrix23.trace();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(cRSMatrix26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(vectorIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory36);
        org.junit.Assert.assertNotNull(basic1DMatrix37);
        org.junit.Assert.assertNotNull(basic1DMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.la4j.vector.sparse.CompressedVector compressedVector0 = new org.la4j.vector.sparse.CompressedVector();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector5 = compressedVector0.multiply((org.la4j.Matrix) cRSMatrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 0 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        byte[] byteArray10 = cRSMatrix2.toBinary();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator8 = columnMajorSparseMatrix7.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator9 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean13 = cCSMatrix12.isRowMajor();
        org.la4j.Matrix matrix16 = cCSMatrix12.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator17 = cCSMatrix12.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator18 = matrixIterator9.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator17);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator17.orElseAdd((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator31 = cCSMatrix30.iterator();
        org.la4j.iterator.MatrixIterator matrixIterator32 = columnMajorMatrixIterator17.orElseAdd((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator31);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix35 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double36 = cRSMatrix35.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator37 = cRSMatrix35.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator41 = columnMajorSparseMatrix40.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator42 = rowMajorMatrixIterator37.orElseSubtract(matrixIterator41);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator46 = cCSMatrix45.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix49 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean50 = cCSMatrix49.isRowMajor();
        org.la4j.Matrix matrix53 = cCSMatrix49.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator54 = cCSMatrix49.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator55 = columnMajorMatrixIterator46.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator54);
        org.la4j.iterator.MatrixIterator matrixIterator56 = matrixIterator42.andAlsoMultiply(matrixIterator55);
        org.la4j.iterator.MatrixIterator matrixIterator57 = columnMajorMatrixIterator31.andAlsoDivide(matrixIterator42);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator31);
        org.junit.Assert.assertNotNull(matrixIterator32);
        org.junit.Assert.assertNotNull(cRSMatrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator37);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator46);
        org.junit.Assert.assertNotNull(cCSMatrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator54);
        org.junit.Assert.assertNotNull(matrixIterator55);
        org.junit.Assert.assertNotNull(matrixIterator56);
        org.junit.Assert.assertNotNull(matrixIterator57);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.diagonal(1, (double) (-1));
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromCSV("%%MatrixMarket matrix coordinate real general column-major\n0 1 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        double[][] doubleArray0 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray0);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.from2DArray(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(denseMatrix1);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMulFunction((double) (byte) -1);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.Matrix matrix20 = basicVector18.toRowMatrix();
        double[] doubleArray21 = basicVector18.toArray();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double24 = cCSMatrix21.get((int) (byte) 0, (int) (short) 1);
        double double25 = cCSMatrix21.min();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean30 = cCSMatrix29.isRowMajor();
        org.la4j.Matrix matrix33 = cCSMatrix29.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator34 = cCSMatrix29.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix38.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double48 = rowMajorSparseMatrix44.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix49 = rowMajorSparseMatrix44.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct50 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean51 = sparseMatrix49.equals((java.lang.Object) ooPlaceOuterProduct50);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix38.hadamardProduct((org.la4j.Matrix) sparseMatrix49);
        org.la4j.Matrix matrix53 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix29, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix38);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator54 = cCSMatrix29.iterator();
        org.la4j.Matrix matrix55 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix21, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix29);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator65 = rowMajorSparseMatrix59.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition66 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray73);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct75 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix78 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double79 = cRSMatrix78.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate80 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix83 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean84 = advancedMatrixPredicate80.test((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter85 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix86 = ooPlaceMatrixHadamardProduct75.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix78, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix87 = ooPlaceMatricesAddition66.applySymmetric(denseMatrix74, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix88 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix59, denseMatrix74);
        org.la4j.matrix.DenseMatrix denseMatrix89 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix92 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator93 = columnMajorSparseMatrix92.nonZeroIterator();
        double double94 = columnMajorSparseMatrix92.density();
        org.la4j.Matrix matrix95 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix89, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix92);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator65);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(cRSMatrix78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate80);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix92);
        org.junit.Assert.assertNotNull(matrixIterator93);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(matrix95);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.Random random1 = null;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.random(0, random1);
        double double3 = denseVector2.product();
        double[] doubleArray4 = denseVector2.toArray();
        java.text.NumberFormat numberFormat5 = null;
        java.lang.String str6 = denseVector2.toMatrixMarket(numberFormat5);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str6, "%%MatrixMarket vector array real\n0\n");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.vector.sparse.CompressedVector compressedVector73 = new org.la4j.vector.sparse.CompressedVector((int) '4', 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix76 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean77 = cCSMatrix76.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix82 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double86 = rowMajorSparseMatrix82.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix87 = rowMajorSparseMatrix82.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate88 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean89 = sparseMatrix87.is(advancedMatrixPredicate88);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator91 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double92 = sparseMatrix87.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator91);
        org.la4j.vector.functor.VectorProcedure vectorProcedure93 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator91);
        cCSMatrix76.eachInRow((int) (short) 1, vectorProcedure93);
        compressedVector73.each(vectorProcedure93);
        cRSMatrix67.eachNonZeroInColumn((int) ' ', vectorProcedure93);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(cCSMatrix76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix82);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix87);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure93);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 10);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        ooPlaceOuterProduct2.ensureApplicableTo((org.la4j.Vector) basicVector11, (org.la4j.Vector) basicVector20);
        org.la4j.vector.sparse.CompressedVector compressedVector23 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector23.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector28 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix29 = ooPlaceOuterProduct2.apply((org.la4j.vector.SparseVector) compressedVector23, (org.la4j.vector.SparseVector) compressedVector28);
        org.la4j.vector.functor.VectorFunction vectorFunction31 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator32 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction31);
        double double33 = compressedVector23.fold(vectorAccumulator32);
        org.la4j.vector.functor.VectorProcedure vectorProcedure34 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator32);
        compressedVector1.eachNonZero(vectorProcedure34);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(vectorFunction31);
        org.junit.Assert.assertNotNull(vectorAccumulator32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure34);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation2 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.SparseVector sparseVector3 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation4 = vectorVectorVectorOperation2.partiallyApply(sparseVector3);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector5 = sparseVector1.apply(vectorVectorOperation4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(sparseVector1);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation2);
        org.junit.Assert.assertNotNull(vectorVectorOperation4);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation66 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector68 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random70 = null;
        org.la4j.vector.DenseVector denseVector71 = org.la4j.vector.DenseVector.random(0, random70);
        org.la4j.Matrix matrix72 = matrixVectorVectorOperation66.apply(sparseVector68, denseVector71);
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector49, sparseVector68);
        byte[] byteArray74 = compressedVector49.toBinary();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix75 = org.la4j.matrix.dense.Basic2DMatrix.fromBinary(byteArray74);
        org.la4j.Vector vector77 = basic2DMatrix75.getRow(0);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation66);
        org.junit.Assert.assertNotNull(sparseVector68);
        org.junit.Assert.assertNotNull(denseVector71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(basic2DMatrix75);
        org.junit.Assert.assertNotNull(vector77);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        double[] doubleArray9 = basicVector8.toArray();
        org.la4j.Vector vector11 = basicVector8.blankOfLength((int) 'a');
        org.la4j.Vector vector13 = vector11.sliceLeft((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            vector13.set(30, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector13);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray35);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator39 = sparseMatrix38.nonZeroRowMajorIterator();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator39);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 1);
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication2 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication3 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.Matrix matrix9 = ooPlaceMatrixByItsTransposeMultiplication3.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix6);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation10 = ooPlaceMatrixByVectorMultiplication2.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix6);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector11 = basicVector1.apply(vectorVectorOperation10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 1 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(vectorVectorOperation10);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor3 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix4 = columnMajorSparseMatrix2.rotate();
        org.la4j.Matrix matrix9 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray12 = matrix9.foldColumns(vectorAccumulator11);
        int[] intArray14 = new int[] { 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector15 = new org.la4j.vector.sparse.CompressedVector(30, 1, doubleArray12, intArray14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        double[] doubleArray27 = basicVector26.toArray();
        int[] intArray33 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector34 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray27, intArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix35 = matrix4.select(intArray14, intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector(10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.Random random3 = null;
        org.la4j.vector.DenseVector denseVector4 = org.la4j.vector.DenseVector.random(0, random3);
        double double5 = denseVector4.product();
        double[] doubleArray6 = denseVector4.toArray();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (short) 100, 100, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix7.swapColumns((int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(basic1DMatrix7);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct5 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        double double14 = rowMajorSparseMatrix9.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int15 = rowMajorSparseMatrix9.cardinality();
        org.la4j.Vector vector17 = rowMajorSparseMatrix9.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct5.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix9, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix20);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate22 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean26 = advancedMatrixPredicate22.test((org.la4j.Matrix) columnMajorSparseMatrix25);
        org.la4j.vector.functor.VectorFunction vectorFunction28 = null;
        org.la4j.Matrix matrix29 = columnMajorSparseMatrix25.transformRow(0, vectorFunction28);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix30 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction31 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix34 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction35 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean39 = cCSMatrix38.isRowMajor();
        org.la4j.Matrix matrix42 = cCSMatrix38.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator43 = cCSMatrix38.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix47.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double57 = rowMajorSparseMatrix53.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix58 = rowMajorSparseMatrix53.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct59 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean60 = sparseMatrix58.equals((java.lang.Object) ooPlaceOuterProduct59);
        org.la4j.Matrix matrix61 = rowMajorSparseMatrix47.hadamardProduct((org.la4j.Matrix) sparseMatrix58);
        org.la4j.Matrix matrix62 = ooPlaceMatricesSubtraction35.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix38, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix47);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction31.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix34, rowMajorSparseMatrix47);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor64 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix67 = inPlaceCopyMatrixToMatrix30.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix47, (org.la4j.matrix.SparseMatrix) cRSMatrix66);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix76 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix78 = rowMajorSparseMatrix76.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory79 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix80 = matrix78.to(basic1DMatrixMatrixFactory79);
        org.la4j.Matrix matrix81 = inPlaceCopyMatrixToMatrix30.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix71, (org.la4j.matrix.DenseMatrix) basic1DMatrix80);
        org.la4j.Matrix matrix82 = ooPlaceMatrixHadamardProduct5.apply(columnMajorSparseMatrix25, (org.la4j.matrix.DenseMatrix) basic1DMatrix80);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator83 = null;
        double[] doubleArray84 = columnMajorSparseMatrix25.foldNonZeroInRows(vectorAccumulator83);
        org.la4j.matrix.DenseMatrix denseMatrix85 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray84);
        int[] intArray86 = null;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix91 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator92 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray93 = cCSMatrix91.foldRows(vectorAccumulator92);
        int[] intArray96 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector97 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray93, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix98 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 10, (int) (byte) -1, doubleArray84, intArray86, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be positive: -1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(vector17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(basic2DMatrix34);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory79);
        org.junit.Assert.assertNotNull(basic1DMatrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(denseMatrix85);
        org.junit.Assert.assertNotNull(cCSMatrix91);
        org.junit.Assert.assertNotNull(vectorAccumulator92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[10, 100]");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.Matrix matrix11 = ooPlaceMatricesAddition1.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix4, rowMajorSparseMatrix9);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix16 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix17 = ooPlaceMatricesAddition1.apply(columnMajorSparseMatrix14, denseMatrix16);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray21 = columnMajorSparseMatrix20.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation22 = ooPlaceMatricesAddition1.partiallyApply(columnMajorSparseMatrix20);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix25 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator26 = cRSMatrix25.nonZeroIterator();
        org.la4j.Vector vector28 = cRSMatrix25.getColumn(100);
        boolean boolean31 = cRSMatrix25.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator33 = cRSMatrix25.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = cRSMatrix25.toRowMajorSparseMatrix();
        double double35 = rowMajorSparseMatrix34.determinant();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction36 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix39 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction40 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix43 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean44 = cCSMatrix43.isRowMajor();
        org.la4j.Matrix matrix47 = cCSMatrix43.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator48 = cCSMatrix43.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix52.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double62 = rowMajorSparseMatrix58.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix63 = rowMajorSparseMatrix58.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct64 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean65 = sparseMatrix63.equals((java.lang.Object) ooPlaceOuterProduct64);
        org.la4j.Matrix matrix66 = rowMajorSparseMatrix52.hadamardProduct((org.la4j.Matrix) sparseMatrix63);
        org.la4j.Matrix matrix67 = ooPlaceMatricesSubtraction40.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix43, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix52);
        org.la4j.Matrix matrix68 = ooPlaceMatricesSubtraction36.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix39, rowMajorSparseMatrix52);
        org.la4j.Matrix matrix69 = ooPlaceMatricesAddition1.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix34, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double75 = cCSMatrix72.get((int) (byte) 0, (int) (short) 1);
        double double76 = cCSMatrix72.min();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix77 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix34, (org.la4j.matrix.SparseMatrix) cCSMatrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '10' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(denseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation22);
        org.junit.Assert.assertNotNull(cRSMatrix25);
        org.junit.Assert.assertNotNull(matrixIterator26);
        org.junit.Assert.assertNotNull(vector28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(vectorIterator33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E10d + "'", double35 == 1.0E10d);
        org.junit.Assert.assertNotNull(basic2DMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(cCSMatrix72);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) (short) 0);
        byte[] byteArray2 = compressedVector1.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.fromBinary(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CRSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[16, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        boolean boolean29 = sparseVector3.nonZeroAt((int) (short) -1);
        org.la4j.Vector vector31 = sparseVector3.add(0.0d);
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(vector31);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = org.la4j.matrix.dense.Basic1DMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory13 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector14 = compressedVector5.to(basicVectorVectorFactory13);
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication15 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct16 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double20 = cRSMatrix19.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate21 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean25 = advancedMatrixPredicate21.test((org.la4j.Matrix) columnMajorSparseMatrix24);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter26 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix24);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct16.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix19, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix24);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation28 = ooPlaceMatrixByVectorMultiplication15.partiallyApply(columnMajorSparseMatrix24);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector29 = basicVector14.apply(vectorVectorOperation28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 32 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory13);
        org.junit.Assert.assertNotNull(basicVector14);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(vectorVectorOperation28);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction3 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector4 = vector1.transform(vectorFunction3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct14 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean15 = sparseMatrix13.equals((java.lang.Object) ooPlaceOuterProduct14);
        org.la4j.vector.DenseVector denseVector17 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random19 = null;
        org.la4j.vector.DenseVector denseVector20 = org.la4j.vector.DenseVector.random(0, random19);
        java.lang.String str21 = denseVector20.toString();
        ooPlaceOuterProduct14.ensureApplicableTo((org.la4j.Vector) denseVector17, (org.la4j.Vector) denseVector20);
        boolean boolean24 = vector1.equals((org.la4j.Vector) denseVector17, 0.0d);
        org.la4j.Matrix matrix25 = denseVector17.toColumnMatrix();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(vectorFunction3);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(denseVector17);
        org.junit.Assert.assertNotNull(denseVector20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(matrix25);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator44 = cRSMatrix43.nonZeroIterator();
        org.la4j.Vector vector46 = cRSMatrix43.getColumn(100);
        boolean boolean49 = cRSMatrix43.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor50 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix43);
        org.la4j.Matrix matrix51 = rawLUDecompositor50.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction0.ensureApplicableTo(matrix51, (org.la4j.Matrix) cRSMatrix54);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator57 = cRSMatrix54.nonZeroIteratorOfRow((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertNotNull(matrixIterator44);
        org.junit.Assert.assertNotNull(vector46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal((int) '4', 0.0d);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator4 = org.la4j.Matrices.asSumAccumulator((double) 52);
        double double5 = cRSMatrix2.foldNonZero(matrixAccumulator4);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixAccumulator4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator2 = org.la4j.Matrices.asSumFunctionAccumulator(0.0d, matrixFunction1);
        org.junit.Assert.assertNotNull(matrixAccumulator2);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asMulFunction((double) (-1.0f));
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.SparseVector sparseVector1 = null;
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct2 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix7 = rowMajorSparseMatrix6.removeLastRow();
        double double11 = rowMajorSparseMatrix6.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int12 = rowMajorSparseMatrix6.cardinality();
        org.la4j.Vector vector14 = rowMajorSparseMatrix6.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct2.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix6, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix17);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate19 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix22 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean23 = advancedMatrixPredicate19.test((org.la4j.Matrix) columnMajorSparseMatrix22);
        org.la4j.vector.functor.VectorFunction vectorFunction25 = null;
        org.la4j.Matrix matrix26 = columnMajorSparseMatrix22.transformRow(0, vectorFunction25);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix27 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction28 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix31 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.Matrix matrix60 = ooPlaceMatricesSubtraction28.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix31, rowMajorSparseMatrix44);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor61 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix63 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix27.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44, (org.la4j.matrix.SparseMatrix) cRSMatrix63);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix69 = rowMajorSparseMatrix68.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix73 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix75 = rowMajorSparseMatrix73.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory76 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix77 = matrix75.to(basic1DMatrixMatrixFactory76);
        org.la4j.Matrix matrix78 = inPlaceCopyMatrixToMatrix27.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix68, (org.la4j.matrix.DenseMatrix) basic1DMatrix77);
        org.la4j.Matrix matrix79 = ooPlaceMatrixHadamardProduct2.apply(columnMajorSparseMatrix22, (org.la4j.matrix.DenseMatrix) basic1DMatrix77);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector80 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector1, columnMajorSparseMatrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate19);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(basic2DMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(cRSMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory76);
        org.junit.Assert.assertNotNull(basic1DMatrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        cCSMatrix2.set((int) (short) 1, 0, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector9 = cCSMatrix2.getColumn((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix4 = org.la4j.matrix.SparseMatrix.random((int) (short) 10, (int) (short) 100, 1.0E100d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate23 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix26 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean27 = advancedMatrixPredicate23.test((org.la4j.Matrix) columnMajorSparseMatrix26);
        org.la4j.vector.functor.VectorFunction vectorFunction29 = null;
        org.la4j.Matrix matrix30 = columnMajorSparseMatrix26.transformRow(0, vectorFunction29);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix31 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix35 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction36 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean40 = cCSMatrix39.isRowMajor();
        org.la4j.Matrix matrix43 = cCSMatrix39.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator44 = cCSMatrix39.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix48.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double58 = rowMajorSparseMatrix54.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix59 = rowMajorSparseMatrix54.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct60 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean61 = sparseMatrix59.equals((java.lang.Object) ooPlaceOuterProduct60);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix48.hadamardProduct((org.la4j.Matrix) sparseMatrix59);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction36.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix39, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix48);
        org.la4j.Matrix matrix64 = ooPlaceMatricesSubtraction32.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix35, rowMajorSparseMatrix48);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor65 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix48);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix68 = inPlaceCopyMatrixToMatrix31.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix48, (org.la4j.matrix.SparseMatrix) cRSMatrix67);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix72.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix77 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix79 = rowMajorSparseMatrix77.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory80 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix81 = matrix79.to(basic1DMatrixMatrixFactory80);
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix31.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix72, (org.la4j.matrix.DenseMatrix) basic1DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceMatrixHadamardProduct6.apply(columnMajorSparseMatrix26, (org.la4j.matrix.DenseMatrix) basic1DMatrix81);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator84 = null;
        double[] doubleArray85 = columnMajorSparseMatrix26.foldNonZeroInRows(vectorAccumulator84);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix86 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 1, 0, doubleArray85);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix87 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (short) 10, 1, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix88 = org.la4j.matrix.SparseMatrix.from1DArray((int) (short) 100, (int) (short) -1, doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 100x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(basic2DMatrix35);
        org.junit.Assert.assertNotNull(cCSMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory80);
        org.junit.Assert.assertNotNull(basic1DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(basic1DMatrix86);
        org.junit.Assert.assertNotNull(basic1DMatrix87);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str5 = basic2DMatrix4.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition6 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix9 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double10 = cRSMatrix9.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition6.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix9, rowMajorSparseMatrix14);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix21 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition6.apply(columnMajorSparseMatrix19, denseMatrix21);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray26 = columnMajorSparseMatrix25.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation27 = ooPlaceMatricesAddition6.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, columnMajorSparseMatrix25);
        org.la4j.Vector vector30 = columnMajorSparseMatrix25.getRow((int) (short) 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation31 = ooPlaceMatrixHadamardProduct0.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix34 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double37 = cCSMatrix34.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction39 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix40 = cCSMatrix34.transformRow(10, vectorFunction39);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix43 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        byte[] byteArray44 = basic1DMatrix43.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix45 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix34, (org.la4j.matrix.DenseMatrix) basic1DMatrix43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str5, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(denseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertNotNull(matrixMatrixOperation31);
        org.junit.Assert.assertNotNull(cCSMatrix34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(basic1DMatrix43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 0, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix(10, (int) (short) 0);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) (byte) 0);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate2 = org.la4j.Matrices.DIAGONALLY_DOMINANT_MATRIX;
        boolean boolean3 = rowMajorSparseMatrix1.is(advancedMatrixPredicate2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.zero(0);
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = denseVector1.toMatrixMarket(numberFormat2);
        org.junit.Assert.assertNotNull(denseVector1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str3, "%%MatrixMarket vector array real\n0\n");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix3 = org.la4j.matrix.SparseMatrix.zero((int) (byte) 1, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix67 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction74 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator75 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction74);
        double double76 = matrix72.fold(matrixAccumulator75);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure77 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator75);
        cCSMatrix67.eachNonZero(matrixProcedure77);
        org.la4j.Matrix matrix79 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix62, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix67);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix82 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator83 = cRSMatrix82.nonZeroIterator();
        org.la4j.Vector vector85 = cRSMatrix82.getColumn(100);
        boolean boolean88 = cRSMatrix82.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator90 = cRSMatrix82.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix91 = cRSMatrix82.toRowMajorSparseMatrix();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix94 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.matrix.SparseMatrix sparseMatrix95 = columnMajorSparseMatrix94.toSparseMatrix();
        org.la4j.Matrix matrix96 = ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix91, columnMajorSparseMatrix94);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrixAccumulator75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(cRSMatrix82);
        org.junit.Assert.assertNotNull(matrixIterator83);
        org.junit.Assert.assertNotNull(vector85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(vectorIterator90);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix91);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix94);
        org.junit.Assert.assertNotNull(sparseMatrix95);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.fromCSV("%%MatrixMarket matrix coordinate real general column-major\n0 1 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (short) 100);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        double[][] doubleArray3 = basic1DMatrix2.toArray();
        org.la4j.matrix.DenseMatrix denseMatrix4 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray3);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(denseMatrix4);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.FORWARD_BACK_SUBSTITUTION;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix4.isRowMajor();
        org.la4j.Matrix matrix8 = cCSMatrix4.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix24 = rowMajorSparseMatrix19.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct25 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean26 = sparseMatrix24.equals((java.lang.Object) ooPlaceOuterProduct25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix13.hadamardProduct((org.la4j.Matrix) sparseMatrix24);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix4, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix4.iterator();
        org.la4j.Matrix matrix32 = cCSMatrix4.blankOfShape(10, (int) '4');
        org.la4j.linear.LinearSystemSolver linearSystemSolver33 = solverFactory0.create((org.la4j.Matrix) cCSMatrix4);
        java.util.Spliterator<java.lang.Double> doubleSpliterator34 = cCSMatrix4.spliterator();
        org.la4j.vector.sparse.CompressedVector compressedVector37 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator41 = columnMajorSparseMatrix40.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double50 = rowMajorSparseMatrix46.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix51 = rowMajorSparseMatrix46.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate52 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean53 = sparseMatrix51.is(advancedMatrixPredicate52);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator55 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double56 = sparseMatrix51.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator55);
        org.la4j.vector.functor.VectorProcedure vectorProcedure57 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator55);
        columnMajorSparseMatrix40.eachNonZeroInRow((-1), vectorProcedure57);
        vectorProcedure57.apply(10, (double) (byte) 100);
        compressedVector37.eachNonZero(vectorProcedure57);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix4.eachNonZeroInColumn((int) (byte) -1, vectorProcedure57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(linearSystemSolver33);
        org.junit.Assert.assertNotNull(doubleSpliterator34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix51);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure57);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean28 = sparseMatrix26.equals((java.lang.Object) ooPlaceOuterProduct27);
        org.la4j.vector.dense.BasicVector basicVector30 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector31 = basicVector30.copy();
        org.la4j.Matrix matrix32 = basicVector30.toDiagonalMatrix();
        org.la4j.Vector vector34 = basicVector30.blankOfLength(52);
        org.la4j.vector.SparseVector sparseVector36 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator52 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray53 = cCSMatrix51.foldRows(vectorAccumulator52);
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray53);
        org.la4j.vector.dense.BasicVector basicVector55 = new org.la4j.vector.dense.BasicVector(doubleArray53);
        ooPlaceOuterProduct37.ensureApplicableTo((org.la4j.Vector) basicVector46, (org.la4j.Vector) basicVector55);
        org.la4j.Matrix matrix57 = basicVector55.toColumnMatrix();
        org.la4j.Matrix matrix58 = sparseVector36.outerProduct((org.la4j.Vector) basicVector55);
        org.la4j.Matrix matrix59 = basicVector55.toRowMatrix();
        org.la4j.Matrix matrix60 = ooPlaceOuterProduct27.apply((org.la4j.vector.DenseVector) basicVector30, (org.la4j.vector.DenseVector) basicVector55);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication61 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector63 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector63.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct67 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        double double76 = rowMajorSparseMatrix71.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int77 = rowMajorSparseMatrix71.cardinality();
        org.la4j.Vector vector79 = rowMajorSparseMatrix71.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix82 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix83 = ooPlaceMatrixHadamardProduct67.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix71, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix82);
        org.la4j.Vector vector84 = ooPlaceVectorByMatrixMultiplication61.apply((org.la4j.vector.SparseVector) compressedVector63, columnMajorSparseMatrix82);
        boolean boolean86 = compressedVector63.isZeroAt((int) ' ');
        boolean boolean88 = compressedVector63.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory89 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector90 = compressedVector63.to(basicVectorVectorFactory89);
        org.la4j.Matrix matrix91 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector55, (org.la4j.vector.DenseVector) basicVector90);
        org.la4j.Vector vector93 = basicVector90.blankOfLength(0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(vector31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertNotNull(sparseVector36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertNotNull(vectorAccumulator52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vector84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory89);
        org.junit.Assert.assertNotNull(basicVector90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(vector93);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray25);
        org.la4j.vector.dense.BasicVector basicVector27 = new org.la4j.vector.dense.BasicVector(doubleArray25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        ooPlaceOuterProduct18.ensureApplicableTo((org.la4j.Vector) basicVector27, (org.la4j.Vector) basicVector36);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random40 = null;
        org.la4j.vector.DenseVector denseVector41 = org.la4j.vector.DenseVector.random(0, random40);
        java.util.Random random43 = null;
        org.la4j.vector.DenseVector denseVector44 = org.la4j.vector.DenseVector.random(0, random43);
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct38.apply(denseVector41, denseVector44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct18.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector47);
        java.text.NumberFormat numberFormat49 = null;
        java.lang.String str51 = denseVector41.mkString(numberFormat49, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double54 = compressedVector53.euclideanNorm();
        org.la4j.Matrix matrix55 = ooPlaceOuterProduct9.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.vector.dense.BasicVector basicVector61 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray60);
        org.la4j.Matrix matrix62 = basicVector61.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate63 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean64 = basicVector61.non(vectorPredicate63);
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct65 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random67 = null;
        org.la4j.vector.DenseVector denseVector68 = org.la4j.vector.DenseVector.random(0, random67);
        org.la4j.vector.sparse.CompressedVector compressedVector70 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat71 = null;
        java.lang.String str72 = compressedVector70.toMatrixMarket(numberFormat71);
        org.la4j.Vector vector74 = compressedVector70.add((double) 52);
        org.la4j.Vector vector76 = compressedVector70.sliceRight((int) (byte) 10);
        org.la4j.Vector vector77 = ooPlaceVectorHadamardProduct65.apply(denseVector68, (org.la4j.vector.SparseVector) compressedVector70);
        org.la4j.Matrix matrix78 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector61, (org.la4j.vector.SparseVector) compressedVector70);
        org.la4j.Matrix matrix79 = compressedVector70.toColumnMatrix();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseVector41);
        org.junit.Assert.assertNotNull(denseVector44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(vectorPredicate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(denseVector68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str72, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(vector76);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant((int) 'a', (int) (byte) 100, (-11.0d));
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 0x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int9 = rowMajorSparseMatrix3.cardinality();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication10 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.Matrix matrix16 = ooPlaceMatrixByItsTransposeMultiplication10.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix13);
        double double18 = cCSMatrix13.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator19 = cCSMatrix13.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix22 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator23 = cRSMatrix22.nonZeroIterator();
        org.la4j.Vector vector25 = cRSMatrix22.getColumn(100);
        boolean boolean28 = cRSMatrix22.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator30 = cRSMatrix22.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = cRSMatrix22.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory32 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix33 = cRSMatrix22.to(basic1DMatrixMatrixFactory32);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix34 = cCSMatrix13.to(basic1DMatrixMatrixFactory32);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix35 = rowMajorSparseMatrix3.to(basic1DMatrixMatrixFactory32);
        org.la4j.Matrix matrix37 = basic1DMatrix35.subtract((double) 1);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction38 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix46 = ooPlaceMatricesSubtraction38.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix42, denseMatrix45);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double50 = columnMajorSparseMatrix49.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory51 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix52 = columnMajorSparseMatrix49.to(basic1DMatrixMatrixFactory51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure58 = null;
        rowMajorSparseMatrix56.eachNonZero(matrixProcedure58);
        org.la4j.Matrix matrix60 = ooPlaceMatricesSubtraction38.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix52, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix56);
        org.la4j.Matrix matrix61 = basic1DMatrix52.shuffle();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix64 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator65 = cRSMatrix64.nonZeroIterator();
        org.la4j.Vector vector67 = cRSMatrix64.getColumn(100);
        boolean boolean70 = cRSMatrix64.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator72 = cRSMatrix64.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix73 = cRSMatrix64.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory74 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix75 = cRSMatrix64.to(basic1DMatrixMatrixFactory74);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix76 = matrix61.to(basic1DMatrixMatrixFactory74);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix77 = basic1DMatrix35.to(basic1DMatrixMatrixFactory74);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator19);
        org.junit.Assert.assertNotNull(cRSMatrix22);
        org.junit.Assert.assertNotNull(matrixIterator23);
        org.junit.Assert.assertNotNull(vector25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(vectorIterator30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory32);
        org.junit.Assert.assertNotNull(basic1DMatrix33);
        org.junit.Assert.assertNotNull(basic1DMatrix34);
        org.junit.Assert.assertNotNull(basic1DMatrix35);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory51);
        org.junit.Assert.assertNotNull(basic1DMatrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(cRSMatrix64);
        org.junit.Assert.assertNotNull(matrixIterator65);
        org.junit.Assert.assertNotNull(vector67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(vectorIterator72);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix73);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory74);
        org.junit.Assert.assertNotNull(basic1DMatrix75);
        org.junit.Assert.assertNotNull(basic1DMatrix76);
        org.junit.Assert.assertNotNull(basic1DMatrix77);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix24 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator25 = cRSMatrix24.nonZeroIterator();
        org.la4j.Vector vector27 = cRSMatrix24.getColumn(100);
        boolean boolean30 = cRSMatrix24.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator32 = cRSMatrix24.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = cRSMatrix24.toRowMajorSparseMatrix();
        double double34 = rowMajorSparseMatrix33.determinant();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction35 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction39 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean43 = cCSMatrix42.isRowMajor();
        org.la4j.Matrix matrix46 = cCSMatrix42.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator47 = cCSMatrix42.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix51.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double61 = rowMajorSparseMatrix57.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix62 = rowMajorSparseMatrix57.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct63 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean64 = sparseMatrix62.equals((java.lang.Object) ooPlaceOuterProduct63);
        org.la4j.Matrix matrix65 = rowMajorSparseMatrix51.hadamardProduct((org.la4j.Matrix) sparseMatrix62);
        org.la4j.Matrix matrix66 = ooPlaceMatricesSubtraction39.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix42, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix51);
        org.la4j.Matrix matrix67 = ooPlaceMatricesSubtraction35.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix38, rowMajorSparseMatrix51);
        org.la4j.Matrix matrix68 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix33, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix51);
        org.la4j.iterator.VectorIterator vectorIterator70 = rowMajorSparseMatrix51.nonZeroIteratorOfColumn((int) (short) 100);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cRSMatrix24);
        org.junit.Assert.assertNotNull(matrixIterator25);
        org.junit.Assert.assertNotNull(vector27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vectorIterator32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E10d + "'", double34 == 1.0E10d);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator47);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(vectorIterator70);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean25 = cCSMatrix24.isRowMajor();
        org.la4j.Matrix matrix28 = cCSMatrix24.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator29 = cCSMatrix24.nonZeroColumnMajorIterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate30 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix33 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean34 = advancedMatrixPredicate30.test((org.la4j.Matrix) columnMajorSparseMatrix33);
        org.la4j.Matrix matrix35 = columnMajorSparseMatrix33.rotate();
        boolean boolean36 = columnMajorSparseMatrix33.isRowMajor();
        boolean boolean37 = columnMajorSparseMatrix33.isRowMajor();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix24, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix33);
        org.la4j.matrix.functor.MatrixFunction matrixFunction42 = org.la4j.Matrices.asMulFunction((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix24.updateAt(0, 52, matrixFunction42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator29);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate30);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrixFunction42);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory6 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = matrix5.to(basic1DMatrixMatrixFactory6);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix7.swapColumns(100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory6);
        org.junit.Assert.assertNotNull(basic1DMatrix7);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        java.lang.String str12 = cRSMatrix3.toString();
        boolean boolean13 = cRSMatrix3.isRowMajor();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n" + "'", str12, "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        org.la4j.vector.functor.VectorProcedure vectorProcedure19 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator17);
        columnMajorSparseMatrix2.eachNonZeroInRow((-1), vectorProcedure19);
        org.la4j.iterator.MatrixIterator matrixIterator21 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator22 = columnMajorSparseMatrix2.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix23 = columnMajorSparseMatrix2.rotate();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix26 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.Matrix matrix27 = columnMajorSparseMatrix26.rotate();
        org.la4j.Matrix matrix28 = null;
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct29 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        double double38 = rowMajorSparseMatrix33.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int39 = rowMajorSparseMatrix33.cardinality();
        org.la4j.Vector vector41 = rowMajorSparseMatrix33.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix44 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix45 = ooPlaceMatrixHadamardProduct29.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix33, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction49 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix52 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean53 = cCSMatrix52.isRowMajor();
        org.la4j.Matrix matrix56 = cCSMatrix52.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator57 = cCSMatrix52.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix63 = rowMajorSparseMatrix61.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double71 = rowMajorSparseMatrix67.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix72 = rowMajorSparseMatrix67.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct73 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean74 = sparseMatrix72.equals((java.lang.Object) ooPlaceOuterProduct73);
        org.la4j.Matrix matrix75 = rowMajorSparseMatrix61.hadamardProduct((org.la4j.Matrix) sparseMatrix72);
        org.la4j.Matrix matrix76 = ooPlaceMatricesSubtraction49.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix52, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix61);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator77 = cCSMatrix52.iterator();
        org.la4j.Matrix matrix80 = cCSMatrix52.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct29.applySymmetric(rowMajorSparseMatrix48, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix52);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix82 = org.la4j.matrix.RowMajorSparseMatrix.block((org.la4j.Matrix) columnMajorSparseMatrix2, matrix27, matrix28, matrix81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure19);
        org.junit.Assert.assertNotNull(matrixIterator21);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(vector41);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(cCSMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) '4', (int) (short) 1);
        java.lang.String str3 = basic2DMatrix2.toMatrixMarket();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket matrix array real general\n52 1\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n" + "'", str3, "%%MatrixMarket matrix array real general\n52 1\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n0,000\n");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct15 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean16 = sparseMatrix14.equals((java.lang.Object) ooPlaceOuterProduct15);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix3.hadamardProduct((org.la4j.Matrix) sparseMatrix14);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct19 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray26);
        org.la4j.vector.dense.BasicVector basicVector28 = new org.la4j.vector.dense.BasicVector(doubleArray26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        ooPlaceOuterProduct19.ensureApplicableTo((org.la4j.Vector) basicVector28, (org.la4j.Vector) basicVector37);
        org.la4j.vector.sparse.CompressedVector compressedVector40 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector40.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix46 = ooPlaceOuterProduct19.apply((org.la4j.vector.SparseVector) compressedVector40, (org.la4j.vector.SparseVector) compressedVector45);
        org.la4j.vector.functor.VectorFunction vectorFunction48 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator49 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction48);
        double double50 = compressedVector40.fold(vectorAccumulator49);
        org.la4j.vector.functor.VectorProcedure vectorProcedure51 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator49);
        double double52 = vectorAccumulator49.accumulate();
        // The following exception was thrown during execution in test generation
        try {
            double double53 = rowMajorSparseMatrix3.foldColumn((-1), vectorAccumulator49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(vectorFunction48);
        org.junit.Assert.assertNotNull(vectorAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct19 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        org.la4j.iterator.VectorIterator vectorIterator24 = rowMajorSparseMatrix22.nonZeroIteratorOfRow(30);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction25 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix29.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction25.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix29, denseMatrix32);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix36 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double37 = columnMajorSparseMatrix36.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory38 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix39 = columnMajorSparseMatrix36.to(basic1DMatrixMatrixFactory38);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix44 = rowMajorSparseMatrix43.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure45 = null;
        rowMajorSparseMatrix43.eachNonZero(matrixProcedure45);
        org.la4j.Matrix matrix47 = ooPlaceMatricesSubtraction25.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix39, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix43);
        org.la4j.Matrix matrix48 = basic1DMatrix39.shuffle();
        basic1DMatrix39.swapColumns(10, (int) (short) 100);
        org.la4j.Matrix matrix54 = basic1DMatrix39.copyOfShape(30, (int) (short) 100);
        org.la4j.Matrix matrix55 = ooPlaceKroneckerProduct19.apply(rowMajorSparseMatrix22, (org.la4j.matrix.DenseMatrix) basic1DMatrix39);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix58 = org.la4j.matrix.sparse.CRSMatrix.diagonal((int) (short) 1, (-0.0d));
        org.la4j.Matrix matrix59 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix22, (org.la4j.matrix.SparseMatrix) cRSMatrix58);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertNotNull(vectorIterator24);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory38);
        org.junit.Assert.assertNotNull(basic1DMatrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cRSMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator44 = cRSMatrix43.nonZeroIterator();
        org.la4j.Vector vector46 = cRSMatrix43.getColumn(100);
        boolean boolean49 = cRSMatrix43.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor50 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix43);
        org.la4j.Matrix matrix51 = rawLUDecompositor50.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction0.ensureApplicableTo(matrix51, (org.la4j.Matrix) cRSMatrix54);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix58 = org.la4j.matrix.dense.Basic2DMatrix.diagonal(0, 1.0d);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix60 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix58, columnMajorSparseMatrix59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertNotNull(matrixIterator44);
        org.junit.Assert.assertNotNull(vector46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertNotNull(basic2DMatrix58);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        cCSMatrix2.setColumn((int) (byte) 1, Double.NaN);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray13 = cCSMatrix11.foldRows(vectorAccumulator12);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray13);
        double[][] doubleArray15 = basic1DMatrix14.toArray();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray15);
        org.la4j.Matrix matrix19 = basic2DMatrix16.blankOfShape((int) '#', (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix20 = cCSMatrix2.hadamardProduct((org.la4j.Matrix) basic2DMatrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 52x52 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(matrix19);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation66 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector68 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random70 = null;
        org.la4j.vector.DenseVector denseVector71 = org.la4j.vector.DenseVector.random(0, random70);
        org.la4j.Matrix matrix72 = matrixVectorVectorOperation66.apply(sparseVector68, denseVector71);
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector49, sparseVector68);
        byte[] byteArray74 = compressedVector49.toBinary();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix75 = org.la4j.matrix.dense.Basic2DMatrix.fromBinary(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.LUDecompositor lUDecompositor76 = new org.la4j.decomposition.LUDecompositor((org.la4j.Matrix) basic2DMatrix75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation66);
        org.junit.Assert.assertNotNull(sparseVector68);
        org.junit.Assert.assertNotNull(denseVector71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(basic2DMatrix75);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix17 = denseMatrix15.rotate();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication18 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.Matrix matrix24 = ooPlaceMatrixByItsTransposeMultiplication18.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix21);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix27 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double28 = cRSMatrix27.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator29 = cRSMatrix27.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor30 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix27);
        double double31 = cRSMatrix27.max();
        org.la4j.Matrix matrix32 = ooPlaceMatrixByItsTransposeMultiplication18.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix27);
        org.la4j.Matrix matrix33 = matrix17.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix37.blankOfRows(0);
        boolean boolean40 = rowMajorSparseMatrix37.isRowMajor();
        boolean boolean43 = rowMajorSparseMatrix37.nonZeroAt(0, (int) 'a');
        org.la4j.Matrix matrix44 = ooPlaceMatrixByItsTransposeMultiplication18.apply(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(cRSMatrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray43 = basic2DMatrix37.toArray();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix44 = org.la4j.matrix.sparse.CRSMatrix.from2DArray(doubleArray43);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.from2DArray(doubleArray43);
        boolean boolean46 = rowMajorSparseMatrix45.isColumnMajor();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(cRSMatrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double11 = rowMajorSparseMatrix7.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix12 = rowMajorSparseMatrix7.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate13 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean14 = sparseMatrix12.is(advancedMatrixPredicate13);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double17 = sparseMatrix12.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator16);
        org.la4j.vector.functor.VectorProcedure vectorProcedure18 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator16);
        cCSMatrix2.eachNonZeroInRow((int) '#', vectorProcedure18);
        vectorProcedure18.apply((int) (byte) 10, (-1.0d));
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix12);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure18);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix10 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) (short) -1, (int) (byte) -1, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = choleskyDecompositor4.self();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        boolean boolean14 = choleskyDecompositor4.applicableTo((org.la4j.Matrix) denseMatrix13);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition15 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix18 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double19 = cRSMatrix18.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix24 = rowMajorSparseMatrix23.removeLastRow();
        org.la4j.Matrix matrix25 = ooPlaceMatricesAddition15.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix18, rowMajorSparseMatrix23);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix28 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix30 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix31 = ooPlaceMatricesAddition15.apply(columnMajorSparseMatrix28, denseMatrix30);
        org.la4j.Matrix matrix32 = denseMatrix30.rotate();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication33 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.Matrix matrix39 = ooPlaceMatrixByItsTransposeMultiplication33.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix36);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix42 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double43 = cRSMatrix42.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator44 = cRSMatrix42.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor45 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix42);
        double double46 = cRSMatrix42.max();
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication33.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix42);
        org.la4j.Matrix matrix48 = matrix32.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication33);
        matrix32.setRow((int) ' ', (double) (-1));
        boolean boolean52 = choleskyDecompositor4.applicableTo(matrix32);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(cRSMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(denseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(cRSMatrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal((int) (short) -1, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory4 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = columnMajorSparseMatrix2.to(basic1DMatrixMatrixFactory4);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator7 = columnMajorSparseMatrix2.iteratorOfColumn((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory4);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        org.la4j.Vector vector11 = org.la4j.Vector.fromArray(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix12 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (short) -1, (int) (byte) 100, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(vector11);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean28 = advancedMatrixPredicate24.test((org.la4j.Matrix) columnMajorSparseMatrix27);
        org.la4j.vector.functor.VectorFunction vectorFunction30 = null;
        org.la4j.Matrix matrix31 = columnMajorSparseMatrix27.transformRow(0, vectorFunction30);
        org.la4j.iterator.VectorIterator vectorIterator33 = columnMajorSparseMatrix27.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.Matrix matrix34 = matrixMatrixOperation23.apply(columnMajorSparseMatrix27);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = new org.la4j.matrix.sparse.CCSMatrix();
        // The following exception was thrown during execution in test generation
        try {
            matrixMatrixOperation23.ensureApplicableTo((org.la4j.Matrix) cCSMatrix35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 10x10 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(vectorIterator33);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.Random random1 = null;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.random(0, random1);
        java.lang.String str3 = denseVector2.toString();
        org.la4j.Matrix matrix4 = denseVector2.toColumnMatrix();
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.unit(0);
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = denseVector6.toMatrixMarket(numberFormat7);
        org.la4j.iterator.VectorIterator vectorIterator9 = denseVector6.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator13 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray14 = cCSMatrix12.foldRows(vectorAccumulator13);
        org.la4j.vector.dense.BasicVector basicVector15 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray14);
        org.la4j.Matrix matrix16 = basicVector15.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate17 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean18 = basicVector15.non(vectorPredicate17);
        boolean boolean19 = denseVector6.is(vectorPredicate17);
        boolean boolean20 = denseVector2.is(vectorPredicate17);
        org.la4j.Vector vector22 = denseVector2.multiply(1.1102230246251565E-14d);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str8, "%%MatrixMarket vector array real\n0\n");
        org.junit.Assert.assertNotNull(vectorIterator9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertNotNull(vectorAccumulator13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(vectorPredicate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(vector22);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory5 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter6 = columnMajorSparseMatrix2.withInverter(inverterFactory5);
        org.la4j.Matrix matrix7 = matrixInverter6.inverse();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory5);
        org.junit.Assert.assertNotNull(matrixInverter6);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator78 = cCSMatrix53.iterator();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition79 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix82 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double83 = cRSMatrix82.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix87 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix88 = rowMajorSparseMatrix87.removeLastRow();
        org.la4j.Matrix matrix89 = ooPlaceMatricesAddition79.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix82, rowMajorSparseMatrix87);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix92 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix94 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix95 = ooPlaceMatricesAddition79.apply(columnMajorSparseMatrix92, denseMatrix94);
        org.la4j.Matrix matrix96 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, denseMatrix94);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix99 = cCSMatrix53.copyOfShape((int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator78);
        org.junit.Assert.assertNotNull(cRSMatrix82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix92);
        org.junit.Assert.assertNotNull(denseMatrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        java.text.NumberFormat numberFormat3 = null;
        java.lang.String str4 = compressedVector1.toMatrixMarket(numberFormat3);
        byte[] byteArray5 = compressedVector1.toBinary();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str4, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction6 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator7 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction6);
        double double8 = matrix4.fold(matrixAccumulator7);
        double double9 = matrix4.manhattanNorm();
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication10 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct11 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate16 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean20 = advancedMatrixPredicate16.test((org.la4j.Matrix) columnMajorSparseMatrix19);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter21 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix19);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct11.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix14, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix19);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation23 = ooPlaceMatrixByVectorMultiplication10.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector45.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.SparseVector) compressedVector50);
        org.la4j.vector.functor.VectorFunction vectorFunction53 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator54 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction53);
        double double55 = compressedVector45.fold(vectorAccumulator54);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector56 = matrix4.apply((org.la4j.operation.MatrixVectorOperation<org.la4j.Vector>) ooPlaceMatrixByVectorMultiplication10, (org.la4j.Vector) compressedVector45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 32 does not equal to 35.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixAccumulator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vectorVectorOperation23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(vectorFunction53);
        org.junit.Assert.assertNotNull(vectorAccumulator54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction12 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator13 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction12);
        double double14 = matrix10.fold(matrixAccumulator13);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure15 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator13);
        cCSMatrix5.eachNonZero(matrixProcedure15);
        org.la4j.Matrix matrix17 = basic2DMatrix2.kroneckerProduct((org.la4j.Matrix) cCSMatrix5);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix22 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator23 = cRSMatrix22.nonZeroIterator();
        org.la4j.matrix.functor.MatrixFunction matrixFunction27 = org.la4j.Matrices.asMulFunction((double) 1);
        cRSMatrix22.updateAt((int) (short) 1, (int) (byte) 100, matrixFunction27);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix2.updateAt(30, 100, matrixFunction27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrixAccumulator13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure15);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(cRSMatrix22);
        org.junit.Assert.assertNotNull(matrixIterator23);
        org.junit.Assert.assertNotNull(matrixFunction27);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator0 = org.la4j.Matrices.mkMaxAccumulator();
        matrixAccumulator0.update(1, (int) ' ', (double) 0L);
        org.junit.Assert.assertNotNull(matrixAccumulator0);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) (byte) -1);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asPlusFunction((double) 10.0f);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix4 = rowMajorSparseMatrix2.removeColumn((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal column number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication52 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix55 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix56 = ooPlaceMatrixByItsTransposeMultiplication52.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix55);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix59 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double60 = columnMajorSparseMatrix59.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor61 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix59);
        org.la4j.Matrix matrix62 = choleskyDecompositor61.self();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix67 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator68 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray69 = cCSMatrix67.foldRows(vectorAccumulator68);
        org.la4j.matrix.DenseMatrix denseMatrix70 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray69);
        boolean boolean71 = choleskyDecompositor61.applicableTo((org.la4j.Matrix) denseMatrix70);
        org.la4j.Matrix matrix72 = ooPlaceMatrixByItsTransposeMultiplication52.apply(denseMatrix70);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix41.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication52);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(basic2DMatrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(cCSMatrix67);
        org.junit.Assert.assertNotNull(vectorAccumulator68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory39 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix40 = columnMajorSparseMatrix37.to(basic1DMatrixMatrixFactory39);
        org.la4j.Matrix matrix43 = basic1DMatrix40.copyOfShape((int) (byte) 0, (int) (short) 1);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix45 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix40, columnMajorSparseMatrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory39);
        org.junit.Assert.assertNotNull(basic1DMatrix40);
        org.junit.Assert.assertNotNull(matrix43);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.Matrix matrix10 = rawLUDecompositor9.self();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator11 = matrix10.columnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator15 = cCSMatrix14.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix18 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean19 = cCSMatrix18.isRowMajor();
        org.la4j.Matrix matrix22 = cCSMatrix18.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator23 = cCSMatrix18.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator24 = columnMajorMatrixIterator15.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator23);
        org.la4j.iterator.MatrixIterator matrixIterator25 = columnMajorMatrixIterator11.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator23);
        org.la4j.iterator.MatrixIterator matrixIterator26 = null;
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator23.orElseAdd(matrixIterator26);
        // The following exception was thrown during execution in test generation
        try {
            matrixIterator27.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator11);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator15);
        org.junit.Assert.assertNotNull(cCSMatrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator23);
        org.junit.Assert.assertNotNull(matrixIterator24);
        org.junit.Assert.assertNotNull(matrixIterator25);
        org.junit.Assert.assertNotNull(matrixIterator27);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        double double9 = sparseVector3.fold(vectorAccumulator7);
        boolean boolean11 = sparseVector3.nonZeroAt(0);
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.1622776601683795d + "'", double9 == 3.1622776601683795d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape(0, (int) (byte) 100);
        double double43 = basic2DMatrix37.sum();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1365.0d + "'", double43 == 1365.0d);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix14 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray17 = matrix14.foldColumns(vectorAccumulator16);
        double double18 = matrix14.sum();
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication19 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator23 = cCSMatrix22.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix24 = cCSMatrix22.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix27 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean28 = cCSMatrix27.isRowMajor();
        org.la4j.Matrix matrix29 = cCSMatrix27.transpose();
        ooPlaceMatricesMultiplication19.ensureApplicableTo((org.la4j.Matrix) cCSMatrix22, matrix29);
        java.util.Random random33 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix34 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition35 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix38 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double39 = cRSMatrix38.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix44 = rowMajorSparseMatrix43.removeLastRow();
        org.la4j.Matrix matrix45 = ooPlaceMatricesAddition35.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix38, rowMajorSparseMatrix43);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition46 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix49 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double50 = cRSMatrix49.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix55 = rowMajorSparseMatrix54.removeLastRow();
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition46.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix49, rowMajorSparseMatrix54);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix59 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix61 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix62 = ooPlaceMatricesAddition46.apply(columnMajorSparseMatrix59, denseMatrix61);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix66 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix67 = rowMajorSparseMatrix66.removeLastRow();
        double double71 = rowMajorSparseMatrix66.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector72 = rowMajorSparseMatrix66.toRowVector();
        org.la4j.Matrix matrix73 = ooPlaceMatricesAddition35.apply(denseMatrix61, rowMajorSparseMatrix66);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix76 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double79 = cCSMatrix76.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction81 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix82 = cCSMatrix76.transformRow(10, vectorFunction81);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix85 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator86 = cRSMatrix85.nonZeroIterator();
        org.la4j.Vector vector88 = cRSMatrix85.getColumn(100);
        boolean boolean91 = cRSMatrix85.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor92 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix85);
        org.la4j.Matrix matrix93 = ooPlaceMatricesAddition35.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix76, (org.la4j.matrix.SparseMatrix) cRSMatrix85);
        org.la4j.Matrix matrix94 = ooPlaceMatricesMultiplication19.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix34, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix76);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatrixHadamardProduct0.ensureApplicableTo(matrix14, (org.la4j.Matrix) basic2DMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 10x10 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(cCSMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(basic2DMatrix34);
        org.junit.Assert.assertNotNull(cRSMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(cRSMatrix49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(denseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(vector72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(cCSMatrix76);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(cRSMatrix85);
        org.junit.Assert.assertNotNull(matrixIterator86);
        org.junit.Assert.assertNotNull(vector88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.fromCSV("%%MatrixMarket vector array real\n0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.zero(0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double76 = cCSMatrix73.get((int) (byte) 0, (int) (short) 1);
        double double77 = cCSMatrix73.min();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication78 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication78.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.vector.functor.VectorFunction vectorFunction86 = org.la4j.Vectors.INV_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator87 = org.la4j.Vectors.asProductFunctionAccumulator((double) 1.0f, vectorFunction86);
        double double88 = cCSMatrix73.foldNonZeroInColumn(1, vectorAccumulator87);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vectorFunction86);
        org.junit.Assert.assertNotNull(vectorAccumulator87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix21 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory22 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix23 = basic1DMatrix21.to(basic1DMatrixMatrixFactory22);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix26 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double27 = cRSMatrix26.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix28 = cRSMatrix26.toColumnMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix29 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix23, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(basic1DMatrix21);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory22);
        org.junit.Assert.assertNotNull(basic1DMatrix23);
        org.junit.Assert.assertNotNull(cRSMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix28);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        org.la4j.iterator.VectorIterator vectorIterator5 = rowMajorSparseMatrix3.nonZeroIteratorOfRow(30);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix14 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, denseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double18 = columnMajorSparseMatrix17.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory19 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix20 = columnMajorSparseMatrix17.to(basic1DMatrixMatrixFactory19);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = null;
        rowMajorSparseMatrix24.eachNonZero(matrixProcedure26);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix20, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.Matrix matrix29 = basic1DMatrix20.shuffle();
        basic1DMatrix20.swapColumns(10, (int) (short) 100);
        org.la4j.Matrix matrix35 = basic1DMatrix20.copyOfShape(30, (int) (short) 100);
        org.la4j.Matrix matrix36 = ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic1DMatrix20);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct37 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct38 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        double double47 = rowMajorSparseMatrix42.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int48 = rowMajorSparseMatrix42.cardinality();
        org.la4j.Vector vector50 = rowMajorSparseMatrix42.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix53 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix54 = ooPlaceMatrixHadamardProduct38.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix42, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix53);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix59 = rowMajorSparseMatrix58.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure60 = null;
        rowMajorSparseMatrix58.eachNonZero(matrixProcedure60);
        double[][] doubleArray62 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix63 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray62);
        org.la4j.Matrix matrix64 = ooPlaceMatrixHadamardProduct38.apply(rowMajorSparseMatrix58, denseMatrix63);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate65 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix68 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean69 = advancedMatrixPredicate65.test((org.la4j.Matrix) columnMajorSparseMatrix68);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter70 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix68);
        org.la4j.Matrix matrix71 = denseMatrix63.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix68);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.Matrix matrix75 = ooPlaceMatrixHadamardProduct37.apply(columnMajorSparseMatrix68, denseMatrix74);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix78 = org.la4j.matrix.RowMajorSparseMatrix.zero(10, (int) (byte) 1);
        java.text.NumberFormat numberFormat79 = null;
        java.lang.String str80 = rowMajorSparseMatrix78.toMatrixMarket(numberFormat79);
        org.la4j.Matrix matrix81 = ooPlaceKroneckerProduct0.apply(denseMatrix74, rowMajorSparseMatrix78);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(vectorIterator5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory19);
        org.junit.Assert.assertNotNull(basic1DMatrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(vector50);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(denseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate65);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n" + "'", str80, "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n");
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector11 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix8, (org.la4j.vector.DenseVector) basicVector10);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation12 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray48 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation12.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation51 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = null;
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication53 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Vector vector58 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str59 = vector58.toCSV();
        org.la4j.vector.SparseVector sparseVector60 = vector58.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix63 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator64 = columnMajorSparseMatrix63.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix69 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double73 = rowMajorSparseMatrix69.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix74 = rowMajorSparseMatrix69.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate75 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean76 = sparseMatrix74.is(advancedMatrixPredicate75);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator78 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double79 = sparseMatrix74.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator78);
        org.la4j.vector.functor.VectorProcedure vectorProcedure80 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator78);
        columnMajorSparseMatrix63.eachNonZeroInRow((-1), vectorProcedure80);
        sparseVector60.eachNonZero(vectorProcedure80);
        org.la4j.Vector vector83 = ooPlaceMatrixByVectorMultiplication53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, sparseVector60);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector84 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix52, sparseVector60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(vectorVectorOperation51);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str59, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector60);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrixIterator64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix69);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix74);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure80);
        org.junit.Assert.assertNotNull(vector83);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        org.la4j.vector.functor.VectorProcedure vectorProcedure19 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator17);
        columnMajorSparseMatrix2.eachNonZeroInRow((-1), vectorProcedure19);
        org.la4j.iterator.MatrixIterator matrixIterator21 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator22 = columnMajorSparseMatrix2.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix23 = columnMajorSparseMatrix2.rotate();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation24 = org.la4j.LinearAlgebra.OO_PLACE_MATRIX_BY_ITS_TRANSPOSE_MULTIPLICATION;
        org.la4j.Matrix matrix25 = columnMajorSparseMatrix2.apply(matrixMatrixOperation24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure19);
        org.junit.Assert.assertNotNull(matrixIterator21);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator22);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrixMatrixOperation24);
        org.junit.Assert.assertNotNull(matrix25);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix3 = rowMajorSparseMatrix2.transpose();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (short) 1, 52, 0);
        org.junit.Assert.assertNotNull(cCSMatrix3);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.randomSymmetric(10, (double) (byte) 100, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix((int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.util.Random random2 = null;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.randomSymmetric(0, (double) 0.0f, random2);
        org.la4j.Matrix matrix5 = cCSMatrix3.divide(52.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = cCSMatrix3.get((int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.Random random2 = null;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.random((int) (short) 1, (int) (byte) 0, random2);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix4 = basic1DMatrix3.removeFirstColumn();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal column number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic1DMatrix3);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.la4j.operation.ooplace.OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new org.la4j.operation.ooplace.OoPlaceVectorsSubtraction();
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str3 = vector2.toCSV();
        org.la4j.vector.SparseVector sparseVector4 = vector2.toSparseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct5 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        org.la4j.vector.dense.BasicVector basicVector14 = new org.la4j.vector.dense.BasicVector(doubleArray12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.DenseMatrix denseMatrix22 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray21);
        org.la4j.vector.dense.BasicVector basicVector23 = new org.la4j.vector.dense.BasicVector(doubleArray21);
        ooPlaceOuterProduct5.ensureApplicableTo((org.la4j.Vector) basicVector14, (org.la4j.Vector) basicVector23);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector26.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector31 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix32 = ooPlaceOuterProduct5.apply((org.la4j.vector.SparseVector) compressedVector26, (org.la4j.vector.SparseVector) compressedVector31);
        org.la4j.Vector vector33 = ooPlaceVectorsSubtraction0.apply(sparseVector4, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.Vector vector39 = org.la4j.Vector.fromArray(doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector41 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct42 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix47 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator48 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray49 = cCSMatrix47.foldRows(vectorAccumulator48);
        org.la4j.matrix.DenseMatrix denseMatrix50 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray49);
        org.la4j.vector.dense.BasicVector basicVector51 = new org.la4j.vector.dense.BasicVector(doubleArray49);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix56 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator57 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray58 = cCSMatrix56.foldRows(vectorAccumulator57);
        org.la4j.matrix.DenseMatrix denseMatrix59 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray58);
        org.la4j.vector.dense.BasicVector basicVector60 = new org.la4j.vector.dense.BasicVector(doubleArray58);
        ooPlaceOuterProduct42.ensureApplicableTo((org.la4j.Vector) basicVector51, (org.la4j.Vector) basicVector60);
        org.la4j.vector.sparse.CompressedVector compressedVector63 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector63.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector68 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix69 = ooPlaceOuterProduct42.apply((org.la4j.vector.SparseVector) compressedVector63, (org.la4j.vector.SparseVector) compressedVector68);
        double double70 = compressedVector68.min();
        org.la4j.Matrix matrix71 = compressedVector68.toColumnMatrix();
        compressedVector68.set((int) (byte) 1, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorsSubtraction0.ensureApplicableTo((org.la4j.Vector) basicVector41, (org.la4j.Vector) compressedVector68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str3, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector4);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix22);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(basicVector40);
        org.junit.Assert.assertNotNull(cCSMatrix47);
        org.junit.Assert.assertNotNull(vectorAccumulator48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix50);
        org.junit.Assert.assertNotNull(cCSMatrix56);
        org.junit.Assert.assertNotNull(vectorAccumulator57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix59);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_BY_MATRIX_MULTIPLICATION;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.vector.dense.BasicVector basicVector6 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray5);
        org.la4j.Matrix matrix7 = basicVector6.toDiagonalMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation8 = vectorVectorMatrixOperation0.partiallyApply((org.la4j.vector.DenseVector) basicVector6);
        java.text.NumberFormat numberFormat9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = basicVector6.mkString(numberFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vectorVectorMatrixOperation0);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorMatrixOperation8);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix3 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix2);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix7 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction8 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean12 = cCSMatrix11.isRowMajor();
        org.la4j.Matrix matrix15 = cCSMatrix11.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator16 = cCSMatrix11.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix20.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double30 = rowMajorSparseMatrix26.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix31 = rowMajorSparseMatrix26.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct32 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean33 = sparseMatrix31.equals((java.lang.Object) ooPlaceOuterProduct32);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix20.hadamardProduct((org.la4j.Matrix) sparseMatrix31);
        org.la4j.Matrix matrix35 = ooPlaceMatricesSubtraction8.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix11, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix20);
        org.la4j.Matrix matrix36 = ooPlaceMatricesSubtraction4.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix7, rowMajorSparseMatrix20);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor37 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix20);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix40 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator41 = cRSMatrix40.nonZeroIterator();
        org.la4j.Vector vector43 = cRSMatrix40.getColumn(100);
        boolean boolean46 = cRSMatrix40.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor47 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix40);
        double double48 = cRSMatrix40.infinityNorm();
        boolean boolean49 = singularValueDecompositor37.applicableTo((org.la4j.Matrix) cRSMatrix40);
        org.la4j.Matrix matrix50 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix40);
        org.la4j.Matrix matrix51 = cRSMatrix40.multiplyByItsTranspose();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(basic2DMatrix7);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(cRSMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(vector43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 0, (byte) 10, (byte) 1, (byte) 0, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector7 = org.la4j.vector.dense.BasicVector.fromBinary(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode BasicVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 10, 1, 0, 1]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = cCSMatrix2.isZeroAt((int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector13 = cCSMatrix3.getColumn((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.zero(10, (int) (short) 100);
        org.junit.Assert.assertNotNull(denseMatrix2);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray25);
        org.la4j.vector.dense.BasicVector basicVector27 = new org.la4j.vector.dense.BasicVector(doubleArray25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        ooPlaceOuterProduct18.ensureApplicableTo((org.la4j.Vector) basicVector27, (org.la4j.Vector) basicVector36);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random40 = null;
        org.la4j.vector.DenseVector denseVector41 = org.la4j.vector.DenseVector.random(0, random40);
        java.util.Random random43 = null;
        org.la4j.vector.DenseVector denseVector44 = org.la4j.vector.DenseVector.random(0, random43);
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct38.apply(denseVector41, denseVector44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct18.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector47);
        java.text.NumberFormat numberFormat49 = null;
        java.lang.String str51 = denseVector41.mkString(numberFormat49, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double54 = compressedVector53.euclideanNorm();
        org.la4j.Matrix matrix55 = ooPlaceOuterProduct9.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.vector.dense.BasicVector basicVector61 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray60);
        org.la4j.Matrix matrix62 = basicVector61.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate63 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean64 = basicVector61.non(vectorPredicate63);
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct65 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random67 = null;
        org.la4j.vector.DenseVector denseVector68 = org.la4j.vector.DenseVector.random(0, random67);
        org.la4j.vector.sparse.CompressedVector compressedVector70 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat71 = null;
        java.lang.String str72 = compressedVector70.toMatrixMarket(numberFormat71);
        org.la4j.Vector vector74 = compressedVector70.add((double) 52);
        org.la4j.Vector vector76 = compressedVector70.sliceRight((int) (byte) 10);
        org.la4j.Vector vector77 = ooPlaceVectorHadamardProduct65.apply(denseVector68, (org.la4j.vector.SparseVector) compressedVector70);
        org.la4j.Matrix matrix78 = ooPlaceOuterProduct9.apply((org.la4j.vector.DenseVector) basicVector61, (org.la4j.vector.SparseVector) compressedVector70);
        java.text.NumberFormat numberFormat79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = compressedVector70.mkString(numberFormat79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseVector41);
        org.junit.Assert.assertNotNull(denseVector44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(vectorPredicate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(denseVector68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str72, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(vector76);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = cRSMatrix3.maxInRow((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity(1);
        org.junit.Assert.assertNotNull(basic2DMatrix1);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.Vector vector7 = org.la4j.Vector.fromArray(doubleArray6);
        org.la4j.Matrix matrix8 = org.la4j.Matrix.from1DArray(100, (int) (byte) 10, doubleArray6);
        matrix8.setAll(0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix52 = new org.la4j.matrix.dense.Basic1DMatrix((int) (byte) 0, 0);
        byte[] byteArray53 = basic1DMatrix52.toBinary();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction54 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix59 = rowMajorSparseMatrix58.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix61 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix62 = ooPlaceMatricesSubtraction54.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix58, denseMatrix61);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix63 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix52, rowMajorSparseMatrix58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(denseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        double[][] doubleArray40 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray69 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray76 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray77 = new double[][] { doubleArray48, doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray77);
        basic2DMatrix78.setAll((double) 100);
        org.la4j.Matrix matrix81 = matrixMatrixMatrixOperation1.apply(denseMatrix41, (org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory82 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix83 = basic2DMatrix78.to(basic1DMatrixMatrixFactory82);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix88 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator89 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray90 = cCSMatrix88.foldRows(vectorAccumulator89);
        org.la4j.matrix.DenseMatrix denseMatrix91 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray90);
        org.la4j.vector.dense.BasicVector basicVector92 = new org.la4j.vector.dense.BasicVector(doubleArray90);
        double[] doubleArray93 = basicVector92.toArray();
        org.la4j.Vector vector94 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix83, (org.la4j.vector.DenseVector) basicVector92);
        java.text.NumberFormat numberFormat95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = basicVector92.toMatrixMarket(numberFormat95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(basic2DMatrix78);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory82);
        org.junit.Assert.assertNotNull(basic1DMatrix83);
        org.junit.Assert.assertNotNull(cCSMatrix88);
        org.junit.Assert.assertNotNull(vectorAccumulator89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix91);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector94);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.Matrix matrix18 = denseMatrix15.multiply(10.0d);
        org.la4j.Matrix matrix19 = matrix18.rotate();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix21 = matrix19.copyOfRows((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero((int) (byte) 100, 30);
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.zero((int) 'a');
        org.junit.Assert.assertNotNull(sparseVector1);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = compressedVector18.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = matrix6.minInRow((int) ' ');
        org.la4j.linear.SquareRootSolver squareRootSolver9 = new org.la4j.linear.SquareRootSolver(matrix6);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector11 = matrix6.getRow((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        org.la4j.Vector vector11 = org.la4j.Vector.fromArray(doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector12 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.from1DArray((int) '#', 1, doubleArray8);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(basicVector12);
        org.junit.Assert.assertNotNull(cCSMatrix13);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        java.lang.String str20 = basicVector9.toMatrixMarket();
        double[] doubleArray21 = basicVector9.toArray();
        org.la4j.vector.dense.BasicVector basicVector22 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray21);
        byte[] byteArray23 = basicVector22.toBinary();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str20, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector22);
        org.junit.Assert.assertNotNull(byteArray23);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        double double10 = cCSMatrix3.maxInColumn((int) (short) 0);
        org.la4j.Matrix matrix11 = cCSMatrix3.removeFirstColumn();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.vector.functor.VectorFunction vectorFunction29 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction29);
        double double31 = compressedVector21.fold(vectorAccumulator30);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector33 = compressedVector21.sliceRight(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [52..32].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(vectorFunction29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        double double57 = cCSMatrix44.max();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = cCSMatrix44.nonZeroAt((int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        org.la4j.Matrix matrix23 = matrix21.divide((double) 10);
        java.util.Random random27 = null;
        org.la4j.vector.sparse.CompressedVector compressedVector28 = org.la4j.vector.sparse.CompressedVector.random((int) (byte) 10, (double) (short) 0, random27);
        double double29 = compressedVector28.max();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double37 = rowMajorSparseMatrix33.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = rowMajorSparseMatrix33.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate39 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean40 = sparseMatrix38.is(advancedMatrixPredicate39);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double43 = sparseMatrix38.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator42);
        org.la4j.vector.functor.VectorProcedure vectorProcedure44 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator42);
        org.la4j.vector.functor.VectorProcedure vectorProcedure45 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator42);
        compressedVector28.eachNonZero(vectorProcedure45);
        // The following exception was thrown during execution in test generation
        try {
            matrix21.setRow((int) (byte) 1, (org.la4j.Vector) compressedVector28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 10. Should be: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(compressedVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure44);
        org.junit.Assert.assertNotNull(vectorProcedure45);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.identity((int) (byte) 10);
        org.la4j.Matrix matrix3 = matrix1.removeRow(0);
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix21.set((int) (byte) 1, (int) (short) 100, 1.1102230246251565E-14d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix6 = rowMajorSparseMatrix5.removeLastRow();
        double double10 = rowMajorSparseMatrix5.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int11 = rowMajorSparseMatrix5.cardinality();
        org.la4j.Vector vector13 = rowMajorSparseMatrix5.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix16 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix17 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix5, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure23 = null;
        rowMajorSparseMatrix21.eachNonZero(matrixProcedure23);
        double[][] doubleArray25 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray25);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct1.apply(rowMajorSparseMatrix21, denseMatrix26);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate28 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean32 = advancedMatrixPredicate28.test((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter33 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.Matrix matrix34 = denseMatrix26.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.Matrix matrix38 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix31, denseMatrix37);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = columnMajorSparseMatrix31.getOrElse(10, 100, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '10' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.fromCSV("1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertNotNull(sparseMatrix1);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix3 = org.la4j.matrix.DenseMatrix.random(30, (int) ' ', random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator5 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix6 = cCSMatrix4.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean10 = cCSMatrix9.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix9.transpose();
        ooPlaceMatricesMultiplication1.ensureApplicableTo((org.la4j.Matrix) cCSMatrix4, matrix11);
        java.util.Random random15 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random15);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition17 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix20 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double21 = cRSMatrix20.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix25.removeLastRow();
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition17.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix20, rowMajorSparseMatrix25);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition28 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix31 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double32 = cRSMatrix31.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix37 = rowMajorSparseMatrix36.removeLastRow();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition28.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix31, rowMajorSparseMatrix36);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix43 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix44 = ooPlaceMatricesAddition28.apply(columnMajorSparseMatrix41, denseMatrix43);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        double double53 = rowMajorSparseMatrix48.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector54 = rowMajorSparseMatrix48.toRowVector();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition17.apply(denseMatrix43, rowMajorSparseMatrix48);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double61 = cCSMatrix58.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction63 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix64 = cCSMatrix58.transformRow(10, vectorFunction63);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator68 = cRSMatrix67.nonZeroIterator();
        org.la4j.Vector vector70 = cRSMatrix67.getColumn(100);
        boolean boolean73 = cRSMatrix67.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor74 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix67);
        org.la4j.Matrix matrix75 = ooPlaceMatricesAddition17.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix58, (org.la4j.matrix.SparseMatrix) cRSMatrix67);
        org.la4j.Matrix matrix76 = ooPlaceMatricesMultiplication1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix16, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix58);
        basic2DMatrix16.setAll((double) '4');
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix81 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator82 = columnMajorSparseMatrix81.nonZeroIterator();
        double double83 = columnMajorSparseMatrix81.density();
        org.la4j.Matrix matrix84 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix16, columnMajorSparseMatrix81);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication85 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix88 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator89 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray90 = cCSMatrix88.foldRows(vectorAccumulator89);
        org.la4j.Matrix matrix91 = ooPlaceMatrixByItsTransposeMultiplication85.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix88);
        double double93 = cCSMatrix88.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator94 = cCSMatrix88.nonZeroIterator();
        int int95 = cCSMatrix88.rank();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix97 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix88, rowMajorSparseMatrix96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(basic2DMatrix16);
        org.junit.Assert.assertNotNull(cRSMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(denseMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(vector54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(matrixIterator68);
        org.junit.Assert.assertNotNull(vector70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix81);
        org.junit.Assert.assertNotNull(matrixIterator82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(cCSMatrix88);
        org.junit.Assert.assertNotNull(vectorAccumulator89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 52 + "'", int95 == 52);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str5 = basic2DMatrix4.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition6 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix9 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double10 = cRSMatrix9.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition6.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix9, rowMajorSparseMatrix14);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix21 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition6.apply(columnMajorSparseMatrix19, denseMatrix21);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray26 = columnMajorSparseMatrix25.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation27 = ooPlaceMatricesAddition6.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, columnMajorSparseMatrix25);
        org.la4j.Vector vector30 = columnMajorSparseMatrix25.getRow((int) (short) 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation31 = ooPlaceMatrixHadamardProduct0.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        double double40 = rowMajorSparseMatrix35.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int41 = rowMajorSparseMatrix35.cardinality();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = ooPlaceMatrixHadamardProduct0.partiallyApply(rowMajorSparseMatrix35);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = null;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix46 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator47 = cRSMatrix46.nonZeroIterator();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = org.la4j.Matrices.asMulFunction((double) 1);
        cRSMatrix46.updateAt((int) (short) 1, (int) (byte) 100, matrixFunction51);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix53 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str5, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(denseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertNotNull(matrixMatrixOperation31);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(cRSMatrix46);
        org.junit.Assert.assertNotNull(matrixIterator47);
        org.junit.Assert.assertNotNull(matrixFunction51);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory3 = org.la4j.Vectors.DENSE;
        java.lang.Class<org.la4j.vector.dense.BasicVector> basicVectorClass4 = basicVectorVectorFactory3.outputClass;
        org.la4j.vector.dense.BasicVector basicVector5 = compressedVector1.to(basicVectorVectorFactory3);
        java.lang.String str6 = basicVector5.toString();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory3);
        org.junit.Assert.assertNotNull(basicVectorClass4);
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000" + "'", str6, "0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.vector.DenseVector denseVector14 = org.la4j.vector.DenseVector.unit(0);
        double double15 = denseVector14.min();
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct16 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double24 = rowMajorSparseMatrix20.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix25 = rowMajorSparseMatrix20.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct26 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean27 = sparseMatrix25.equals((java.lang.Object) ooPlaceOuterProduct26);
        org.la4j.vector.DenseVector denseVector29 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random31 = null;
        org.la4j.vector.DenseVector denseVector32 = org.la4j.vector.DenseVector.random(0, random31);
        java.lang.String str33 = denseVector32.toString();
        ooPlaceOuterProduct26.ensureApplicableTo((org.la4j.Vector) denseVector29, (org.la4j.Vector) denseVector32);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation35 = ooPlaceInnerProduct16.partiallyApply(denseVector32);
        org.la4j.Vector vector36 = ooPlaceVectorHadamardProduct0.apply(denseVector14, denseVector32);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation37 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.SparseVector sparseVector38 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation39 = vectorVectorVectorOperation37.partiallyApply(sparseVector38);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector40 = denseVector32.apply(vectorVectorOperation39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(denseVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(denseVector29);
        org.junit.Assert.assertNotNull(denseVector32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation35);
        org.junit.Assert.assertNotNull(vector36);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation37);
        org.junit.Assert.assertNotNull(vectorVectorOperation39);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        basic2DMatrix77.set((int) (byte) 1, (int) (byte) 1, (double) 1L);
        java.lang.String str87 = basic2DMatrix77.toString();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "100,000 100,000 100,000 100,000 100,000 100,000\n100,000   1,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n" + "'", str87, "100,000 100,000 100,000 100,000 100,000 100,000\n100,000   1,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        int[] intArray9 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector10 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray6, intArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray6);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, 100]");
        org.junit.Assert.assertNotNull(basicVector11);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector45.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.SparseVector) compressedVector50);
        boolean boolean53 = compressedVector50.isZeroAt((int) (short) 1);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Vector vector58 = cRSMatrix56.getColumn(30);
        org.la4j.Vector vector59 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector50, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56);
        org.la4j.vector.DenseVector denseVector61 = org.la4j.vector.DenseVector.unit(0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double69 = rowMajorSparseMatrix65.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix65.multiplyByItsTranspose();
        org.la4j.Matrix matrix71 = matrix70.multiplyByItsTranspose();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorByMatrixMultiplication0.ensureApplicableTo((org.la4j.Vector) denseVector61, matrix71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 0 does not equal to 1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertNotNull(denseVector61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(matrix71);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.Matrix matrix28 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray31 = matrix28.foldColumns(vectorAccumulator30);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix32 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory39 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix40 = matrix38.to(basic1DMatrixMatrixFactory39);
        java.lang.Class<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixClass41 = basic1DMatrixMatrixFactory39.outputClass;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix42 = basic2DMatrix32.to(basic1DMatrixMatrixFactory39);
        java.util.Random random45 = null;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix46 = org.la4j.matrix.dense.Basic1DMatrix.random(10, (int) (byte) 0, random45);
        org.la4j.Matrix matrix47 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix32, (org.la4j.matrix.DenseMatrix) basic1DMatrix46);
        java.lang.String str48 = basic1DMatrix46.toMatrixMarket();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory39);
        org.junit.Assert.assertNotNull(basic1DMatrix40);
        org.junit.Assert.assertNotNull(basic1DMatrixClass41);
        org.junit.Assert.assertNotNull(basic1DMatrix42);
        org.junit.Assert.assertNotNull(basic1DMatrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "%%MatrixMarket matrix array real general\n10 0\n" + "'", str48, "%%MatrixMarket matrix array real general\n10 0\n");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) ' ', (int) ' ');
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct22 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix26.removeLastRow();
        double double31 = rowMajorSparseMatrix26.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int32 = rowMajorSparseMatrix26.cardinality();
        org.la4j.Vector vector34 = rowMajorSparseMatrix26.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix38 = ooPlaceMatrixHadamardProduct22.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix26, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction42 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean46 = cCSMatrix45.isRowMajor();
        org.la4j.Matrix matrix49 = cCSMatrix45.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator50 = cCSMatrix45.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix56 = rowMajorSparseMatrix54.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix60 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double64 = rowMajorSparseMatrix60.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix65 = rowMajorSparseMatrix60.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct66 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean67 = sparseMatrix65.equals((java.lang.Object) ooPlaceOuterProduct66);
        org.la4j.Matrix matrix68 = rowMajorSparseMatrix54.hadamardProduct((org.la4j.Matrix) sparseMatrix65);
        org.la4j.Matrix matrix69 = ooPlaceMatricesSubtraction42.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix45, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix54);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator70 = cCSMatrix45.iterator();
        org.la4j.Matrix matrix73 = cCSMatrix45.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix74 = ooPlaceMatrixHadamardProduct22.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix77 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double78 = columnMajorSparseMatrix77.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor79 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix77);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory80 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter81 = columnMajorSparseMatrix77.withInverter(inverterFactory80);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix83 = org.la4j.matrix.sparse.CRSMatrix.identity(100);
        org.la4j.inversion.MatrixInverter matrixInverter84 = inverterFactory80.create((org.la4j.Matrix) cRSMatrix83);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix85 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix45, (org.la4j.matrix.SparseMatrix) cRSMatrix83);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator50);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix60);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator70);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory80);
        org.junit.Assert.assertNotNull(matrixInverter81);
        org.junit.Assert.assertNotNull(cRSMatrix83);
        org.junit.Assert.assertNotNull(matrixInverter84);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix2.nonZeroAt((int) ' ', (int) '#');
        org.la4j.Vector vector7 = cCSMatrix2.getRow(1);
        java.text.NumberFormat numberFormat8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = vector7.toCSV(numberFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(vector7);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix3 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix2);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix7 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction8 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean12 = cCSMatrix11.isRowMajor();
        org.la4j.Matrix matrix15 = cCSMatrix11.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator16 = cCSMatrix11.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix20.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double30 = rowMajorSparseMatrix26.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix31 = rowMajorSparseMatrix26.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct32 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean33 = sparseMatrix31.equals((java.lang.Object) ooPlaceOuterProduct32);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix20.hadamardProduct((org.la4j.Matrix) sparseMatrix31);
        org.la4j.Matrix matrix35 = ooPlaceMatricesSubtraction8.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix11, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix20);
        org.la4j.Matrix matrix36 = ooPlaceMatricesSubtraction4.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix7, rowMajorSparseMatrix20);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor37 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix20);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix40 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator41 = cRSMatrix40.nonZeroIterator();
        org.la4j.Vector vector43 = cRSMatrix40.getColumn(100);
        boolean boolean46 = cRSMatrix40.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor47 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix40);
        double double48 = cRSMatrix40.infinityNorm();
        boolean boolean49 = singularValueDecompositor37.applicableTo((org.la4j.Matrix) cRSMatrix40);
        org.la4j.Matrix matrix50 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix40);
        org.la4j.Vector vector52 = cRSMatrix40.getColumn((int) (short) 1);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(basic2DMatrix7);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(cRSMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(vector43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(vector52);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) 'a');
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter2 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) basic2DMatrix1);
        org.la4j.Matrix matrix3 = gaussJordanInverter2.inverse();
        org.la4j.Matrix matrix4 = gaussJordanInverter2.self();
        org.junit.Assert.assertNotNull(basic2DMatrix1);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = org.la4j.matrix.dense.Basic1DMatrix.identity((int) (byte) 1);
        org.junit.Assert.assertNotNull(basic1DMatrix1);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 100, (int) (short) 1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(cCSMatrix3);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Vector vector4 = cRSMatrix2.getColumn(30);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = cRSMatrix2.get(100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(vector4);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct35 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix41 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator42 = cRSMatrix41.nonZeroIterator();
        org.la4j.Vector vector44 = cRSMatrix41.getColumn(100);
        boolean boolean47 = cRSMatrix41.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator49 = cRSMatrix41.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = cRSMatrix41.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix51 = ooPlaceMatrixHadamardProduct35.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix38, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix50);
        double double54 = basic2DMatrix38.get((int) (byte) 10, 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix57 = org.la4j.matrix.sparse.CRSMatrix.zero((int) '4', (int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic2DMatrix38, (org.la4j.matrix.SparseMatrix) cRSMatrix57);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication60 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct61 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator67 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray68 = cCSMatrix66.foldRows(vectorAccumulator67);
        org.la4j.matrix.DenseMatrix denseMatrix69 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray68);
        org.la4j.vector.dense.BasicVector basicVector70 = new org.la4j.vector.dense.BasicVector(doubleArray68);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix75 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator76 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray77 = cCSMatrix75.foldRows(vectorAccumulator76);
        org.la4j.matrix.DenseMatrix denseMatrix78 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray77);
        org.la4j.vector.dense.BasicVector basicVector79 = new org.la4j.vector.dense.BasicVector(doubleArray77);
        ooPlaceOuterProduct61.ensureApplicableTo((org.la4j.Vector) basicVector70, (org.la4j.Vector) basicVector79);
        java.lang.String str81 = basicVector79.toString();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix84 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double85 = columnMajorSparseMatrix84.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory86 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix87 = columnMajorSparseMatrix84.to(basic1DMatrixMatrixFactory86);
        org.la4j.Vector vector88 = ooPlaceVectorByMatrixMultiplication60.apply((org.la4j.vector.DenseVector) basicVector79, columnMajorSparseMatrix84);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix89 = cRSMatrix57.insertRow((int) (byte) 1, vector88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 0. Should be: 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(cRSMatrix41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(vector44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vectorIterator49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(cRSMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertNotNull(vectorAccumulator67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix69);
        org.junit.Assert.assertNotNull(cCSMatrix75);
        org.junit.Assert.assertNotNull(vectorAccumulator76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000" + "'", str81, "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory86);
        org.junit.Assert.assertNotNull(basic1DMatrix87);
        org.junit.Assert.assertNotNull(vector88);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.JACOBI;
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix5 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix9 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean10 = cCSMatrix9.isRowMajor();
        org.la4j.Matrix matrix13 = cCSMatrix9.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator14 = cCSMatrix9.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix18.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double28 = rowMajorSparseMatrix24.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix29 = rowMajorSparseMatrix24.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct30 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean31 = sparseMatrix29.equals((java.lang.Object) ooPlaceOuterProduct30);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix18.hadamardProduct((org.la4j.Matrix) sparseMatrix29);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix9, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction2.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix5, rowMajorSparseMatrix18);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor35 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix18);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix38 = inPlaceCopyMatrixToMatrix1.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18, (org.la4j.matrix.SparseMatrix) cRSMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator42 = columnMajorSparseMatrix41.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator43 = columnMajorSparseMatrix41.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix46 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator47 = cRSMatrix46.nonZeroIterator();
        org.la4j.Vector vector49 = cRSMatrix46.getColumn(100);
        boolean boolean52 = cRSMatrix46.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor53 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix46);
        double double54 = cRSMatrix46.infinityNorm();
        org.la4j.Matrix matrix55 = inPlaceCopyMatrixToMatrix1.apply(columnMajorSparseMatrix41, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix46);
        org.la4j.matrix.functor.MatrixFunction matrixFunction59 = org.la4j.Matrices.asMulFunction((double) 52);
        matrix55.updateAt((int) (byte) 0, (int) (short) 1, matrixFunction59);
        org.la4j.linear.LinearSystemSolver linearSystemSolver61 = solverFactory0.create(matrix55);
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(basic2DMatrix5);
        org.junit.Assert.assertNotNull(cCSMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(matrixIterator43);
        org.junit.Assert.assertNotNull(cRSMatrix46);
        org.junit.Assert.assertNotNull(matrixIterator47);
        org.junit.Assert.assertNotNull(vector49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(matrixFunction59);
        org.junit.Assert.assertNotNull(linearSystemSolver61);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asProductAccumulator(1365.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.Matrix matrix7 = ooPlaceMatrixByItsTransposeMultiplication1.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation8 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct9 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean25 = sparseMatrix23.is(advancedMatrixPredicate24);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double28 = sparseMatrix23.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator27);
        org.la4j.vector.functor.VectorProcedure vectorProcedure29 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator27);
        columnMajorSparseMatrix12.eachNonZeroInRow((-1), vectorProcedure29);
        boolean boolean31 = columnMajorSparseMatrix12.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication32 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix34 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix35 = ooPlaceMatrixByItsTransposeMultiplication32.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix34);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation36 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray43 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray50 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray57 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray64 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray71 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray72 = new double[][] { doubleArray43, doubleArray50, doubleArray57, doubleArray64, doubleArray71 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix73 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray72);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation74 = matrixMatrixMatrixOperation36.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix73);
        java.util.Spliterator<java.lang.Double> doubleSpliterator75 = basic2DMatrix73.spliterator();
        basic2DMatrix73.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication32.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix73);
        org.la4j.Matrix matrix79 = ooPlaceKroneckerProduct9.apply(columnMajorSparseMatrix12, (org.la4j.matrix.DenseMatrix) basic2DMatrix73);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation80 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix73);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorVectorOperation8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(cCSMatrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(basic2DMatrix73);
        org.junit.Assert.assertNotNull(matrixMatrixOperation74);
        org.junit.Assert.assertNotNull(doubleSpliterator75);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(vectorVectorOperation80);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double10 = cCSMatrix3.getOrElse((int) (byte) 10, (int) '#', 3.1622776601683795d);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.1622776601683795d + "'", double10 == 3.1622776601683795d);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct2 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix7 = rowMajorSparseMatrix6.removeLastRow();
        double double11 = rowMajorSparseMatrix6.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int12 = rowMajorSparseMatrix6.cardinality();
        org.la4j.Vector vector14 = rowMajorSparseMatrix6.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct2.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix6, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix17);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate19 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix22 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean23 = advancedMatrixPredicate19.test((org.la4j.Matrix) columnMajorSparseMatrix22);
        org.la4j.vector.functor.VectorFunction vectorFunction25 = null;
        org.la4j.Matrix matrix26 = columnMajorSparseMatrix22.transformRow(0, vectorFunction25);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix27 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction28 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix31 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.Matrix matrix60 = ooPlaceMatricesSubtraction28.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix31, rowMajorSparseMatrix44);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor61 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix63 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix27.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44, (org.la4j.matrix.SparseMatrix) cRSMatrix63);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix69 = rowMajorSparseMatrix68.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix73 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix75 = rowMajorSparseMatrix73.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory76 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix77 = matrix75.to(basic1DMatrixMatrixFactory76);
        org.la4j.Matrix matrix78 = inPlaceCopyMatrixToMatrix27.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix68, (org.la4j.matrix.DenseMatrix) basic1DMatrix77);
        org.la4j.Matrix matrix79 = ooPlaceMatrixHadamardProduct2.apply(columnMajorSparseMatrix22, (org.la4j.matrix.DenseMatrix) basic1DMatrix77);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator80 = null;
        double[] doubleArray81 = columnMajorSparseMatrix22.foldNonZeroInRows(vectorAccumulator80);
        org.la4j.Matrix matrix82 = org.la4j.Matrix.from1DArray(100, (int) (short) 100, doubleArray81);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate19);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(basic2DMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(cRSMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix73);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory76);
        org.junit.Assert.assertNotNull(basic1DMatrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(matrix82);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero((int) (short) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(sparseVector2);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = org.la4j.matrix.dense.Basic1DMatrix.fromCSV("%%MatrixMarket vector coordinate real\n32 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = org.la4j.matrix.ColumnMajorSparseMatrix.identity(1);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix1);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_BY_MATRIX_MULTIPLICATION;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.unit(0);
        double double3 = denseVector2.min();
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation4 = vectorVectorMatrixOperation0.partiallyApply(denseVector2);
        org.la4j.vector.SparseVector sparseVector5 = null;
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation6 = vectorVectorMatrixOperation0.partiallyApply(sparseVector5);
        org.la4j.vector.SparseVector sparseVector9 = org.la4j.vector.SparseVector.zero(1, (int) 'a');
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator13 = cRSMatrix12.nonZeroIterator();
        org.la4j.Vector vector15 = cRSMatrix12.getColumn(100);
        boolean boolean18 = cRSMatrix12.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator20 = cRSMatrix12.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = cRSMatrix12.toRowMajorSparseMatrix();
        java.util.Iterator<java.lang.Integer> intItor22 = cRSMatrix12.iteratorOfNonZeroRows();
        org.la4j.Vector vector23 = vectorVectorMatrixOperation0.apply(sparseVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix12);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix12.set((int) (short) -1, (int) (short) -1, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vectorVectorMatrixOperation0);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vectorMatrixOperation4);
        org.junit.Assert.assertNotNull(vectorMatrixOperation6);
        org.junit.Assert.assertNotNull(sparseVector9);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(vector15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vectorIterator20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(intItor22);
        org.junit.Assert.assertNotNull(vector23);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction41 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix49 = ooPlaceMatricesSubtraction41.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix45, denseMatrix48);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double53 = columnMajorSparseMatrix52.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory54 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix55 = columnMajorSparseMatrix52.to(basic1DMatrixMatrixFactory54);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure61 = null;
        rowMajorSparseMatrix59.eachNonZero(matrixProcedure61);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction41.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix55, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix59);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix69 = rowMajorSparseMatrix67.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix73 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double77 = rowMajorSparseMatrix73.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix78 = rowMajorSparseMatrix73.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct79 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean80 = sparseMatrix78.equals((java.lang.Object) ooPlaceOuterProduct79);
        org.la4j.Matrix matrix81 = rowMajorSparseMatrix67.hadamardProduct((org.la4j.Matrix) sparseMatrix78);
        org.la4j.Matrix matrix82 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix55, rowMajorSparseMatrix67);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix85 = basic1DMatrix55.copyOfShape(52, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 52x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory54);
        org.junit.Assert.assertNotNull(basic1DMatrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix73);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor33 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix16);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator37 = cRSMatrix36.nonZeroIterator();
        org.la4j.Vector vector39 = cRSMatrix36.getColumn(100);
        boolean boolean42 = cRSMatrix36.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor43 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix36);
        double double44 = cRSMatrix36.infinityNorm();
        boolean boolean45 = singularValueDecompositor33.applicableTo((org.la4j.Matrix) cRSMatrix36);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator49 = cRSMatrix48.nonZeroIterator();
        org.la4j.Vector vector51 = cRSMatrix48.getColumn(100);
        boolean boolean54 = cRSMatrix48.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator56 = cRSMatrix48.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = cRSMatrix48.toRowMajorSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate67 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean68 = sparseMatrix66.is(advancedMatrixPredicate67);
        boolean boolean69 = rowMajorSparseMatrix57.non(advancedMatrixPredicate67);
        boolean boolean70 = singularValueDecompositor33.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix57);
        org.la4j.Matrix matrix73 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        boolean boolean74 = singularValueDecompositor33.applicableTo(matrix73);
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrixIterator37);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertNotNull(matrixIterator49);
        org.junit.Assert.assertNotNull(vector51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(vectorIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct70 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random72 = null;
        org.la4j.vector.DenseVector denseVector73 = org.la4j.vector.DenseVector.random(0, random72);
        java.util.Random random75 = null;
        org.la4j.vector.DenseVector denseVector76 = org.la4j.vector.DenseVector.random(0, random75);
        org.la4j.Matrix matrix77 = ooPlaceOuterProduct70.apply(denseVector73, denseVector76);
        org.la4j.Vector vector79 = denseVector73.copyOfLength((int) 'a');
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation80 = ooPlaceVectorByMatrixMultiplication0.partiallyApply(denseVector73);
        org.la4j.vector.dense.BasicVector basicVector82 = new org.la4j.vector.dense.BasicVector((int) (short) 1);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix85 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean86 = cCSMatrix85.isRowMajor();
        org.la4j.Matrix matrix89 = cCSMatrix85.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix90 = matrix89.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector91 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector82, rowMajorSparseMatrix90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(denseVector73);
        org.junit.Assert.assertNotNull(denseVector76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertNotNull(vectorMatrixOperation80);
        org.junit.Assert.assertNotNull(cCSMatrix85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix90);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) 'a');
        rowMajorSparseMatrix1.setRow((int) (byte) 0, (double) 10.0f);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct5 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix14 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, denseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double18 = columnMajorSparseMatrix17.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory19 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix20 = columnMajorSparseMatrix17.to(basic1DMatrixMatrixFactory19);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = null;
        rowMajorSparseMatrix24.eachNonZero(matrixProcedure26);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix20, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.Matrix matrix29 = basic1DMatrix20.shuffle();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator33 = cRSMatrix32.nonZeroIterator();
        org.la4j.Vector vector35 = cRSMatrix32.getColumn(100);
        boolean boolean38 = cRSMatrix32.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator40 = cRSMatrix32.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = cRSMatrix32.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory42 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix43 = cRSMatrix32.to(basic1DMatrixMatrixFactory42);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix44 = matrix29.to(basic1DMatrixMatrixFactory42);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation45 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix48 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor49 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation45.partiallyApply(columnMajorSparseMatrix48);
        org.la4j.matrix.functor.MatrixFunction matrixFunction52 = org.la4j.Matrices.DEC_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator53 = org.la4j.Matrices.asSumFunctionAccumulator((double) (short) -1, matrixFunction52);
        double double54 = columnMajorSparseMatrix48.foldNonZero(matrixAccumulator53);
        org.la4j.Matrix matrix55 = ooPlaceKroneckerProduct5.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix44, columnMajorSparseMatrix48);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix56 = rowMajorSparseMatrix1.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 97x97 does not equal to 10x10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory19);
        org.junit.Assert.assertNotNull(basic1DMatrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertNotNull(matrixIterator33);
        org.junit.Assert.assertNotNull(vector35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(vectorIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory42);
        org.junit.Assert.assertNotNull(basic1DMatrix43);
        org.junit.Assert.assertNotNull(basic1DMatrix44);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation45);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(matrixFunction52);
        org.junit.Assert.assertNotNull(matrixAccumulator53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-11.0d) + "'", double54 == (-11.0d));
        org.junit.Assert.assertNotNull(matrix55);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct5 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        org.la4j.vector.dense.BasicVector basicVector14 = new org.la4j.vector.dense.BasicVector(doubleArray12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.DenseMatrix denseMatrix22 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray21);
        org.la4j.vector.dense.BasicVector basicVector23 = new org.la4j.vector.dense.BasicVector(doubleArray21);
        ooPlaceOuterProduct5.ensureApplicableTo((org.la4j.Vector) basicVector14, (org.la4j.Vector) basicVector23);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector26.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector31 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix32 = ooPlaceOuterProduct5.apply((org.la4j.vector.SparseVector) compressedVector26, (org.la4j.vector.SparseVector) compressedVector31);
        org.la4j.vector.functor.VectorFunction vectorFunction34 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator35 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction34);
        double double36 = compressedVector26.fold(vectorAccumulator35);
        double double37 = columnMajorSparseMatrix2.foldNonZeroInRow((int) '4', vectorAccumulator35);
        double double38 = vectorAccumulator35.accumulate();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix22);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vectorFunction34);
        org.junit.Assert.assertNotNull(vectorAccumulator35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = matrix6.minInRow((int) ' ');
        org.la4j.linear.SquareRootSolver squareRootSolver9 = new org.la4j.linear.SquareRootSolver(matrix6);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double17 = rowMajorSparseMatrix13.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix18 = rowMajorSparseMatrix13.toSparseMatrix();
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix13.removeFirstColumn();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = rowMajorSparseMatrix13.toColumnMajorSparseMatrix();
        boolean boolean21 = squareRootSolver9.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor8 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cCSMatrix2);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator10 = cCSMatrix2.iteratorOfColumn((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray4 = cCSMatrix2.foldRows(vectorAccumulator3);
        org.la4j.Vector vector5 = org.la4j.Vector.fromArray(doubleArray4);
        org.la4j.vector.dense.BasicVector basicVector6 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.la4j.vector.dense.BasicVector basicVector7 = new org.la4j.vector.dense.BasicVector(doubleArray4);
        org.la4j.vector.dense.BasicVector basicVector8 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray4);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(basicVector6);
        org.junit.Assert.assertNotNull(basicVector8);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix56.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double66 = rowMajorSparseMatrix62.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix67 = rowMajorSparseMatrix62.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct68 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean69 = sparseMatrix67.equals((java.lang.Object) ooPlaceOuterProduct68);
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix56.hadamardProduct((org.la4j.Matrix) sparseMatrix67);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix73 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix70, (org.la4j.Matrix) cRSMatrix73);
        org.la4j.Matrix matrix77 = cRSMatrix73.copyOfShape((int) 'a', 30);
        int int78 = cRSMatrix73.cardinality();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cRSMatrix73);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double11 = rowMajorSparseMatrix7.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix12 = rowMajorSparseMatrix7.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate13 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean14 = sparseMatrix12.is(advancedMatrixPredicate13);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double17 = sparseMatrix12.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator16);
        org.la4j.vector.functor.VectorProcedure vectorProcedure18 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator16);
        cCSMatrix2.eachNonZeroInRow((int) '#', vectorProcedure18);
        double double20 = cCSMatrix2.max();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix12);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.identity(100);
        org.la4j.Matrix matrix4 = cRSMatrix1.blankOfShape(1, (int) (short) 1);
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.Vector vector8 = denseVector6.shuffle();
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vector8);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor3 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix4 = qRDecompositor3.self();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        boolean boolean33 = qRDecompositor3.applicableTo(matrix32);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor34 = new org.la4j.decomposition.RawLUDecompositor(matrix32);
        org.la4j.Matrix[] matrixArray35 = rawLUDecompositor34.decompose();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(matrixArray35);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double30 = compressedVector2.getOrElse((int) (short) -1, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.iterator.MatrixIterator matrixIterator39 = basic2DMatrix37.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape((int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrixIterator39);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        double[] doubleArray9 = basicVector8.toArray();
        org.la4j.vector.sparse.CompressedVector compressedVector11 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double12 = compressedVector11.euclideanNorm();
        org.la4j.Vector vector14 = compressedVector11.blankOfLength(52);
        boolean boolean16 = basicVector8.equals((org.la4j.Vector) compressedVector11, 7.211102550927978d);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation17 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random20 = null;
        org.la4j.vector.DenseVector denseVector21 = org.la4j.vector.DenseVector.random(0, random20);
        java.util.Random random23 = null;
        org.la4j.vector.DenseVector denseVector24 = org.la4j.vector.DenseVector.random(0, random23);
        org.la4j.Matrix matrix25 = ooPlaceOuterProduct18.apply(denseVector21, denseVector24);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation26 = vectorVectorVectorOperation17.partiallyApply(denseVector21);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector27 = basicVector8.apply(vectorVectorOperation26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 0 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation17);
        org.junit.Assert.assertNotNull(denseVector21);
        org.junit.Assert.assertNotNull(denseVector24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(vectorVectorOperation26);
    }
}

