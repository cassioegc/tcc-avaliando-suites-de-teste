/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:40:16 GMT 2021
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrices;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrices_ESTest extends Matrices_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asPlusFunction(0.0);
      // Undeclared exception!
      try { 
        Matrices.asSumFunctionAccumulator(Double.POSITIVE_INFINITY, matrixFunction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.asSumAccumulator(Double.POSITIVE_INFINITY);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asMinusFunction(0.0);
      // Undeclared exception!
      try { 
        Matrices.asProductFunctionAccumulator(Double.POSITIVE_INFINITY, matrixFunction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.asProductAccumulator(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.asProductAccumulator(0.0);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.asSumAccumulator((-3371.81));
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asConstFunction(1242.09015);
      assertNotNull(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asModFunction(1242.09015);
      MatrixAccumulator matrixAccumulator0 = Matrices.asProductFunctionAccumulator(1242.09015, matrixFunction0);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkManhattanNormAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkInfinityNormAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkMaxAccumulator();
      MatrixProcedure matrixProcedure0 = Matrices.asAccumulatorProcedure(matrixAccumulator0);
      assertNotNull(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkEuclideanNormAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asModFunction(1242.09015);
      MatrixAccumulator matrixAccumulator0 = Matrices.asSumFunctionAccumulator(1242.09015, matrixFunction0);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkMinAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asMulFunction((-3371.81));
      assertNotNull(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asDivFunction(2533.005831659444);
      assertNotNull(matrixFunction0);
  }
}
