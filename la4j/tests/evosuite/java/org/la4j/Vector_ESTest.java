/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:37:39 GMT 2021
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector_ESTest extends Vector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 3131;
      DenseVector denseVector0 = DenseVector.constant(3131, 3131);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      vector0.subtract((double) 3131);
      // Undeclared exception!
      Vector.unit(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(181);
      VectorFactory<DenseVector> vectorFactory0 = (VectorFactory<DenseVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      sparseVector0.to(vectorFactory0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket(bufferedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.unit(0);
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 1959.6207546136134, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      Double double0 = new Double(0.0);
      vector0.equals((Object) double0);
      vector0.infinityNorm();
      org.evosuite.runtime.Random.setNextRandom(0);
      denseVector0.equals(vector0, 1959.6207546136134);
      denseVector0.copyOfLength(0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.toString();
      Vector vector1 = sparseVector0.multiply(0.0);
      vector1.sliceLeft(0);
      vector1.toBinary();
      Vector vector2 = vector0.hadamardProduct(vector1);
      Vector vector3 = Vector.zero(0);
      vector3.divide(0.0);
      vector3.slice(0, 0);
      vector2.add(0.0);
      Vector vector4 = Vector.constant(0, 1.0);
      Vector.unit(37);
      vector4.sum();
      vector0.norm();
      sparseVector0.toCSV();
      vector0.infinityNorm();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Vector vector5 = Vector.fromCollection(linkedList0);
      Vector vector6 = vector5.blank();
      vector6.manhattanNorm();
      Vector vector7 = Vector.zero(3);
      Vector vector8 = Vector.zero(0);
      vector5.min();
      vector8.hashCode();
      vector0.shuffle();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(558.07307241331).when(vectorAccumulator0).accumulate();
      vector7.fold(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.toString();
      Vector vector1 = sparseVector0.multiply(0.0);
      vector1.sliceLeft(0);
      vector1.toBinary();
      Vector vector2 = vector0.hadamardProduct(vector1);
      Vector vector3 = Vector.zero(0);
      vector3.divide(0.0);
      vector3.slice(0, 0);
      vector2.add(0.0);
      Vector vector4 = Vector.constant(0, 1.0);
      Vector.unit(37);
      vector4.sum();
      vector0.norm();
      sparseVector0.toCSV();
      vector0.infinityNorm();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Vector vector5 = Vector.fromCollection(linkedList0);
      Vector vector6 = vector5.blank();
      vector6.manhattanNorm();
      Vector vector7 = Vector.zero(3);
      Vector vector8 = Vector.zero(0);
      vector5.min();
      vector8.hashCode();
      vector0.shuffle();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      vector7.fold(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 215;
      intArray0[1] = 215;
      intArray0[2] = 215;
      intArray0[3] = 1000;
      intArray0[5] = 215;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3938);
      linkedList0.add(integer0);
      Vector.fromCollection(linkedList0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.fromCSV("0.000");
      SparseVector sparseVector0 = SparseVector.zero(4, 4);
      sparseVector0.outerProduct(denseVector0);
      sparseVector0.copy();
      sparseVector0.euclideanNorm();
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      vector0.min();
      vector0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 697.1844;
      doubleArray0[1] = 674.9072305455242;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.4408548522615761;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1713.0953955594;
      doubleArray0[6] = 1957.668088;
      doubleArray0[7] = 0.0;
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        vector0.sliceLeft((-1807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1807].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-835.0);
      doubleArray0[1] = (-1196.94352297087);
      doubleArray0[2] = 657.74;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      Vector vector0 = Vector.fromArray(doubleArray0);
      vector0.setAll((-1.0));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.sum();
      Vector.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      vector0.toMatrixMarket(numberFormat0);
      vector0.toMatrixMarket();
      vector0.copy();
      vector0.max();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-835.0);
      doubleArray0[1] = (-1196.94352297087);
      doubleArray0[2] = 657.74;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      Vector vector0 = Vector.fromArray(doubleArray0);
      vector0.setAll((-1.0));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.sum();
      Vector.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      vector0.toMatrixMarket(numberFormat0);
      vector0.toMatrixMarket();
      Byte byte0 = new Byte((byte)10);
      vector0.equals((Object) byte0);
      vector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = 1000;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        vector0.slice((-1697), 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.fromCSV("0.000");
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      vector0.sliceRight(0);
      // Undeclared exception!
      try { 
        SparseVector.fromMap((Map<Integer, ? extends Number>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 2675;
      DenseVector denseVector0 = DenseVector.unit(2675);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.ITALIAN;
      locale1.stripExtensions();
      locale0.getDisplayLanguage(locale1);
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Vector.fromCollection(linkedList0);
      denseVector0.toMatrixMarket(numberFormat0);
      // Undeclared exception!
      denseVector0.divide(2675);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.toString();
      Vector vector1 = sparseVector0.multiply(0.0);
      vector1.sliceLeft(0);
      vector1.toBinary();
      Vector vector2 = vector0.hadamardProduct(vector1);
      Vector vector3 = Vector.zero(0);
      vector3.divide(0.0);
      Vector vector4 = vector3.slice(0, 0);
      vector2.add(0.0);
      Vector vector5 = Vector.constant(0, 1.0);
      Vector.unit(37);
      vector5.sum();
      vector0.norm();
      sparseVector0.toCSV();
      vector0.infinityNorm();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Vector vector6 = Vector.fromCollection(linkedList0);
      Vector vector7 = vector6.blank();
      vector7.manhattanNorm();
      Vector.zero(3);
      Vector vector8 = Vector.zero(0);
      vector6.min();
      vector8.hashCode();
      // Undeclared exception!
      try { 
        vector4.outerProduct((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1572));
      Integer.getInteger("-gm");
      Integer integer1 = new Integer((-1572));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll(0, (Collection<? extends Integer>) linkedList1);
      Integer.toUnsignedString(2329);
      Integer.min(0, 0);
      Integer.compare(2329, (-2786));
      Integer.compareUnsigned(0, (-1572));
      Integer.divideUnsigned(2329, 2329);
      linkedList0.add(integer1);
      Integer.toUnsignedLong(2329);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.iterator();
      Vector vector0 = sparseVector0.shuffle();
      VectorFactory<SparseVector> vectorFactory0 = (VectorFactory<SparseVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      sparseVector0.to(vectorFactory0);
      vector0.min();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 199;
      Vector vector0 = Vector.zero(199);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int1 = (-3456);
      // Undeclared exception!
      try { 
        vector0.copyOfLength((-3456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3456
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector vector0 = Vector.zero(208);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      vector0.mkString(numberFormat0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Vector vector1 = Vector.fromMap(hashMap0, 3809);
      // Undeclared exception!
      try { 
        vector1.transform((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable {
      Vector vector0 = Vector.unit(215);
      vector0.toRowMatrix();
      Vector vector1 = vector0.shuffle();
      vector0.setAll(0.0);
      int[] intArray0 = new int[7];
      intArray0[5] = 215;
      intArray0[1] = 215;
      intArray0[2] = 215;
      intArray0[3] = 1000;
      intArray0[4] = 215;
      intArray0[5] = 215;
      // Undeclared exception!
      try {
          vector1.select(intArray0);
          fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch (ArrayIndexOutOfBoundsException e) {
          //
          // no message in exception (getMessage() returned null)
          //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 178;
      // Undeclared exception!
      try { 
        Vector.random(184, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DenseVector denseVector0 = DenseVector.fromCSV("0.000");
      Map<Integer, Integer> map0 = null;
      // Undeclared exception!
      try { 
        denseVector0.select((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 3131;
      DenseVector denseVector0 = DenseVector.constant(3131, 3131);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      Vector vector1 = vector0.subtract((double) 3131);
      DenseVector denseVector1 = DenseVector.unit(3131);
      // Undeclared exception!
      vector1.outerProduct(denseVector1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      Long long0 = new Long(0L);
      vector0.manhattanNorm();
      linkedList0.add(long0);
      Vector vector1 = vector0.divide(0.0);
      vector1.blankOfLength(4736);
      vector0.manhattanNorm();
      Vector vector2 = vector0.blank();
      vector0.equals((Object) vector1);
      linkedList0.clear();
      MockRandom mockRandom0 = new MockRandom((-2027L));
      SparseMatrix.randomSymmetric(4736, 0.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector2.update(vectorFunction0);
      vector2.blankOfLength(0);
      Vector vector3 = Vector.unit(4736);
      // Undeclared exception!
      vector3.norm();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-835.0);
      doubleArray0[1] = (-1196.94352297087);
      doubleArray0[2] = 657.74;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      Vector vector0 = Vector.fromArray(doubleArray0);
      vector0.setAll((-1.0));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.sum();
      Vector.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      vector0.toMatrixMarket(numberFormat0);
      vector0.toMatrixMarket();
      vector0.get(3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-835.0);
      doubleArray0[1] = (-1196.94352297087);
      doubleArray0[2] = 657.74;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      Vector vector0 = Vector.fromArray(doubleArray0);
      vector0.setAll((-1.0));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.sum();
      Vector.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      vector0.toMatrixMarket(numberFormat0);
      vector0.toMatrixMarket();
      // Undeclared exception!
      try { 
        vector0.get((-531));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 215;
      Vector vector0 = Vector.unit(215);
      Matrix matrix0 = vector0.toRowMatrix();
      Vector vector1 = vector0.shuffle();
      double double0 = 0.0;
      vector0.setAll(0.0);
      vector1.equals(vector0, 3040.00394272305);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      vector1.transform(vectorFunction0);
      // Undeclared exception!
      try { 
        vector1.multiply(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of rows in the given matrix: 215 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector vector0 = Vector.unit(215);
      vector0.toRowMatrix();
      vector0.setAll(0.0);
      vector0.equals(vector0, 3040.00394272305);
      vector0.innerProduct(vector0);
      vector0.manhattanNorm();
      vector0.product();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.unit(0);
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 1959.6207546136134, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      Double double0 = new Double(0.0);
      vector0.equals((Object) double0);
      denseVector0.innerProduct(vector0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      VectorOperation<Vector> vectorOperation0 = ooPlaceMatrixByVectorMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      vector0.apply(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      SparseVector sparseVector1 = SparseVector.zero(0);
      sparseVector0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseVector0.updateAt(0, vectorFunction0);
      sparseVector0.product();
      sparseVector1.equals((Object) "%%MatrixMarket vector coordinate real\n0 0\n");
      Vector vector0 = Vector.zero(1400);
      sparseVector0.toString();
      Matrix matrix0 = vector0.outerProduct(sparseVector1);
      sparseVector1.toColumnMatrix();
      Vector vector1 = sparseVector0.sliceRight(0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.min();
      matrix0.transformRow(0, vectorFunction1);
      vector1.toColumnMatrix();
      vector0.norm();
      sparseVector1.toRowMatrix();
      vector0.multiply(matrix0);
      vector1.add((Vector) sparseVector1);
      // Undeclared exception!
      try { 
        Vector.constant((-66), 367.43);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toMatrixMarket();
      denseVector0.toDenseVector();
      Vector vector0 = Vector.fromArray(doubleArray0);
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayScript(locale1);
      locale0.getExtensionKeys();
      numberFormat0.setMinimumFractionDigits(37);
      vector0.toCSV(numberFormat0);
      Vector vector1 = Vector.unit(17);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      vector0.toRowMatrix();
      vector1.outerProduct(vector0);
      Vector vector2 = Vector.unit(17);
      denseVector0.innerProduct(vector0);
      // Undeclared exception!
      try { 
        vector2.cosineSimilarity(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 17 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      Vector vector0 = Vector.unit(0);
      double double0 = Double.POSITIVE_INFINITY;
      Vector vector1 = vector0.subtract(Double.POSITIVE_INFINITY);
      Vector vector2 = vector0.subtract(vector1);
      vector2.blank();
      int int1 = 862;
      Locale locale0 = new Locale("org.la4j.Vector", "Ey<%eI<U_n\"M", "org.la4j.Vector");
      locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      vector0.mkString(numberFormat0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vector0.updateAt(862, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 86;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 86);
      denseVector0.shuffle();
      BasicVector basicVector0 = (BasicVector)ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        ((Vector)basicVector0).fail("8Zj{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8Zj{
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int1 = 0;
      decimalFormat0.setMinimumFractionDigits(0);
      Integer integer0 = new Integer(0);
      denseVector0.toSparseVector();
      denseVector0.toCSV();
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(3, mockRandom0);
      denseVector0.norm();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      DenseVector denseVector1 = vector0.toDenseVector();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseVector0.mkString((NumberFormat) decimalFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector.unit(3);
      denseVector1.subtract(179.2);
      // Undeclared exception!
      try { 
        denseVector0.add((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      int int0 = 0;
      SparseVector.zero(0);
      sparseVector0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1148.63118012)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        sparseVector0.updateAt(0, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector vector0 = Vector.unit(215);
      vector0.toRowMatrix();
      Vector vector1 = vector0.shuffle();
      vector0.setAll(215);
      vector1.equals(vector0, 3040.00394272305);
      vector1.innerProduct(vector0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.constant(2, 0.0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      denseVector0.add(0.0);
      Vector vector1 = vector0.blank();
      vector1.slice(2, 2);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2642;
      intArray0[2] = 2;
      intArray0[3] = 2;
      // Undeclared exception!
      try { 
        vector0.select(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseVector0.fold(vectorAccumulator0);
      int int0 = 32;
      Integer integer0 = new Integer(32);
      // Undeclared exception!
      try { 
        linkedList0.add(32, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector vector0 = Vector.constant(0, 0);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      Vector vector1 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      vector0.apply((VectorVectorOperation<Double>) ooPlaceInnerProduct0, vector1);
      vector0.toColumnMatrix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 700;
      Vector vector0 = Vector.constant(700, (-1464.0));
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      vector0.updateAt(0, vectorFunction0);
      vector0.iterator();
      vector0.sum();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        vector0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom(32);
      Vector vector0 = Vector.random(32, mockRandom0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.random(32, mockRandom0);
      Vector vector1 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      vector1.is(vectorPredicate0);
      vector0.add(vector1);
      vector0.min();
      DenseVector denseVector1 = vector0.toDenseVector();
      denseVector1.setAll(32);
      denseVector1.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseVector1.min();
      denseVector1.update(vectorFunction0);
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      denseVector1.toMatrixMarket(numberFormat0);
      denseVector1.infinityNorm();
      int int1 = (-4137);
      // Undeclared exception!
      try { 
        Vector.random((-4137), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long(0L);
      SparseMatrix.zero(4736, 4736);
      MockRandom mockRandom0 = new MockRandom((-2027L));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Vector vector0 = Vector.unit(4736);
      // Undeclared exception!
      vector0.max();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1763;
      Vector vector0 = Vector.fromMap(hashMap0, 1763);
      Vector vector1 = null;
      // Undeclared exception!
      try { 
        vector0.subtract((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      Vector vector0 = Vector.zero(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.each(vectorProcedure0);
      Vector vector1 = vector0.blank();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      vector1.hadamardProduct(vector0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.compareUnsigned(0, 0);
      vector0.toMatrixMarket();
      hashMap0.put(integer0, integer1);
      int int1 = Integer.MAX_VALUE;
      vector0.is((VectorPredicate) null);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      Long long0 = new Long(0L);
      linkedList0.addFirst(long0);
      vector0.manhattanNorm();
      linkedList0.add(long0);
      Vector vector1 = vector0.divide(0.0);
      int int0 = 4736;
      vector1.blankOfLength(4736);
      vector0.manhattanNorm();
      vector0.blank();
      vector0.equals((Object) vector1);
      linkedList0.clear();
      // Undeclared exception!
      try { 
        SparseMatrix.identity((-1222));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1268);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        vector0.fold((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        sparseVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.toString();
      Vector vector1 = sparseVector0.multiply(0.0);
      vector1.sliceLeft(0);
      vector1.toBinary();
      Vector vector2 = vector0.hadamardProduct(vector1);
      Vector vector3 = Vector.zero(0);
      vector3.divide(0.0);
      vector3.slice(0, 0);
      Vector vector4 = vector2.add(0.0);
      Vector vector5 = Vector.constant(0, 1.0);
      Vector.unit(37);
      vector5.sum();
      vector0.norm();
      sparseVector0.toCSV();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Vector vector6 = Vector.fromCollection(linkedList0);
      Vector vector7 = vector6.blank();
      vector7.manhattanNorm();
      Vector.zero(3);
      Vector vector8 = Vector.zero(0);
      vector6.min();
      vector8.hashCode();
      org.evosuite.runtime.Random.setNextRandom((-2642));
      sparseVector0.blankOfLength(0);
      Vector.fromCollection(linkedList0);
      vector4.equals((Object) vector2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1572));
      Integer.getInteger("-gm");
      Integer integer1 = new Integer((-1572));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll(0, (Collection<? extends Integer>) linkedList1);
      Integer.toUnsignedString(2329);
      Integer.compareUnsigned(0, (-1572));
      Integer.divideUnsigned(2329, 2329);
      linkedList0.add(integer1);
      Integer.toUnsignedLong((-1178));
      linkedList0.add(integer0);
      SparseVector.fromCollection(linkedList0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 2028;
      Vector vector0 = Vector.constant(2028, 2028);
      Vector.unit(2028);
      DenseVector denseVector0 = vector0.toDenseVector();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2028, 2028, 1893);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      denseVector0.multiply(matrix0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(6507, 979.0);
      // Undeclared exception!
      denseVector0.add((-2746.0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.add(748.5401495462);
      int int0 = (-4545);
      // Undeclared exception!
      try { 
        vector0.sliceRight((-4545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector vector0 = Vector.fromCSV("");
      vector0.add((-2155.2));
      VectorFactory<DenseVector> vectorFactory0 = (VectorFactory<DenseVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vector0.sliceLeft(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector vector0 = Vector.unit(17);
      vector0.toDiagonalMatrix();
      vector0.product();
      int[] intArray0 = new int[7];
      vector0.min();
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      intArray0[5] = 1;
      intArray0[6] = 3019;
      // Undeclared exception!
      try { 
        vector0.select(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2268.234602986;
      doubleArray0[1] = (-362.34);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1770.147;
      Vector.fromArray(doubleArray0);
      DenseVector denseVector1 = denseVector0.toDenseVector();
      Vector vector0 = Vector.fromCSV("");
      vector0.sum();
      denseVector1.cosineSimilarity(denseVector0);
      vector0.cosineSimilarity(denseVector1);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-2473);
      intArray0[2] = (-431);
      intArray0[3] = (-4861);
      intArray0[4] = 1000;
      // Undeclared exception!
      try { 
        vector0.select(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-823.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2731.84465);
      doubleArray0[4] = 659.5483102719;
      doubleArray0[5] = 340.13711345;
      doubleArray0[6] = (-2323.5745422744303);
      doubleArray0[7] = (-1784.8);
      doubleArray0[8] = 926.815474026;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toColumnMatrix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector vector0 = Vector.zero(0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      vector0.non(vectorPredicate0);
      vector0.toDiagonalMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.multiply((double) 0);
      vector0.update(vectorFunction0);
      vector0.toRowMatrix();
      // Undeclared exception!
      try { 
        vector0.hadamardProduct((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseMatrix.identity(0);
      // Undeclared exception!
      try { 
        sparseVector0.add((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 6 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(1, mockRandom0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      numberFormat0.setMaximumIntegerDigits(1);
      NumberFormat.getNumberInstance();
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      numberFormat0.setRoundingMode(roundingMode0);
      mockRandom0.nextInt();
      denseVector0.toRowMatrix();
      denseVector0.toCSV(numberFormat0);
      denseVector0.infinityNorm();
      Matrix matrix0 = denseVector0.toRowMatrix();
      mockRandom0.ints((long) 123);
      Vector vector0 = Vector.unit(123);
      Vector vector1 = Vector.unit(1);
      vector1.multiply(matrix0);
      Vector vector2 = Vector.constant(1819, 0.0);
      denseVector0.equals(vector0, (double) 1);
      vector1.blank();
      vector0.euclideanNorm();
      denseVector0.product();
      Vector vector3 = vector0.copyOfLength(1);
      // Undeclared exception!
      try { 
        vector3.add(vector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 1 does not equal to 1819.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 37;
      DenseVector denseVector0 = DenseVector.zero(37);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int1 = (-7);
      // Undeclared exception!
      try { 
        denseVector0.innerProduct((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector vector0 = Vector.unit(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vector0.updateAt(5, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 615;
      DenseVector denseVector0 = DenseVector.constant(615, 615);
      // Undeclared exception!
      try { 
        denseVector0.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseVector0.each(vectorProcedure0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      sparseVector0.non(vectorPredicate0);
      Vector vector0 = sparseVector0.add(0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.transform(vectorFunction0);
      vector0.copy();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 561.0;
      doubleArray0[7] = 0.0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0.000";
      stringArray0[1] = "sMs@08=uGS.OF;(!!J";
      stringArray0[2] = " ";
      stringArray0[3] = ".";
      stringArray0[4] = "Q|1Y1HpGx";
      stringArray0[5] = "?PPF9Ov7`Kk->id";
      stringArray0[6] = "array";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 937.97;
      doubleArray0[1] = 3256.88408644;
      doubleArray0[2] = (-1.0);
      Vector vector0 = Vector.fromArray(doubleArray0);
      vector0.toString();
      vector0.sliceLeft(0);
      int int0 = (-1541);
      // Undeclared exception!
      try { 
        Vector.zero((-1541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector vector0 = Vector.zero(7);
      // Undeclared exception!
      vector0.slice(114, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>(2, 1.0F);
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 2);
      Byte byte0 = new Byte((byte) (-12));
      Byte.compare((byte)52, (byte) (-12));
      compressedVector0.equals((Object) byte0);
      compressedVector0.hashCode();
      // Undeclared exception!
      try { 
        ((Vector)compressedVector0).ensureLengthIsCorrect((-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -364
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      int int0 = 4;
      sparseVector0.isZeroAt(4);
      int int1 = 2927;
      // Undeclared exception!
      try { 
        sparseVector0.sliceLeft(2927);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        vector0.sliceLeft(2035);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector.unit((-1694));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(3, mockRandom0);
      denseVector0.norm();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      vector0.toDenseVector();
      Vector vector1 = null;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      denseVector0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        denseVector0.equals((Vector) null, 1223.6549101957728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("");
      int int0 = 2879;
      int int1 = 0;
      denseVector0.infinityNorm();
      denseVector0.sum();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      denseVector0.toCSV(numberFormat0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.setSeed(301L);
      Vector.random(0, mockRandom0);
      Vector vector0 = denseVector0.blankOfLength(2879);
      // Undeclared exception!
      vector0.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = Integer.getInteger("", 48);
      Integer integer1 = new Integer((-903));
      Integer.toUnsignedString((-2566));
      Short short0 = new Short((short)3389);
      Integer integer2 = new Integer(1637);
      Short short1 = new Short((short) (-1));
      hashMap0.replace(integer2, short0, short1);
      Short.toUnsignedInt((short)37);
      hashMap0.put(integer1, short0);
      Short short2 = new Short((short)2129);
      Short.compare((short)2129, (short)2129);
      hashMap0.put(integer0, short2);
      int int0 = (-250);
      // Undeclared exception!
      try { 
        Vector.fromMap(hashMap0, (-250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector vector0 = Vector.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      vector0.toMatrixMarket(numberFormat0);
      vector0.product();
      vector0.product();
      vector0.product();
      Vector vector1 = vector0.sliceLeft(0);
      Vector vector2 = vector1.multiply(0.0);
      vector2.outerProduct(vector0);
      vector1.norm();
      vector0.toDiagonalMatrix();
      vector1.infinityNorm();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Vector.fromMap(hashMap0, 0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("9>c)Lw0h~Z&[e\"l8");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 538;
      Vector vector0 = Vector.constant(538, 1582.7752757429826);
      vector0.manhattanNorm();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int1 = 0;
      Integer integer0 = new Integer(0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      vector0.non(vectorPredicate0);
      linkedList0.addLast(integer0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseVector0.shuffle();
      Integer integer1 = new Integer(538);
      linkedList0.add(integer1);
      vector0.euclideanNorm();
      denseVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        vector0.innerProduct(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 538 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Short short0 = new Short((short)1814);
      linkedList0.add(short0);
      Short short1 = new Short((short) (-793));
      linkedList0.add(short1);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      denseVector0.non(vectorPredicate0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        Vector.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      SparseVector sparseVector1 = SparseVector.zero(0);
      sparseVector0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseVector0.updateAt(0, vectorFunction0);
      sparseVector0.product();
      sparseVector1.equals((Object) "%%MatrixMarket vector coordinate real\n0 0\n");
      Vector vector0 = Vector.zero(1400);
      sparseVector0.toString();
      Matrix matrix0 = vector0.outerProduct(sparseVector1);
      sparseVector1.toColumnMatrix();
      Vector vector1 = sparseVector0.sliceRight(0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.min();
      Matrix matrix1 = matrix0.transformRow(0, vectorFunction1);
      vector1.toColumnMatrix();
      vector0.norm();
      sparseVector1.toRowMatrix();
      vector0.multiply(matrix0);
      // Undeclared exception!
      try { 
        vector1.multiply(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of rows in the given matrix: 0 does not equal to 1400.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      SparseVector sparseVector0 = SparseVector.random(0, 0.0, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      Integer integer0 = new Integer(0);
      vector0.equals((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      vector0.multiply((Matrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      linkedList0.toArray();
      SparseVector sparseVector0 = SparseVector.zero(1);
      Vector vector0 = ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      Vector vector1 = vector0.blankOfLength(0);
      vector1.manhattanNorm();
      Vector vector2 = sparseVector0.copyOfLength(1);
      vector2.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2904.9);
      doubleArray0[1] = 2923.31;
      Vector vector0 = Vector.fromArray(doubleArray0);
      Vector vector1 = vector0.divide((-2904.9));
      Vector vector2 = vector1.blankOfLength(32);
      vector0.toBinary();
      vector2.subtract((-1.0));
      vector1.subtract((-1.0));
      int int0 = 0;
      vector1.get(0);
      vector2.subtract((-2904.9));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Vector.random((-1459), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector vector0 = Vector.unit(0);
      SparseVector sparseVector0 = SparseVector.zero(0, 7);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      sparseVector0.copy();
      Vector vector1 = sparseVector0.multiply((double) 7);
      vector0.product();
      Vector vector2 = vector0.subtract(vector1);
      vector2.equals((Vector) sparseVector0, (-972.16930059));
      Vector vector3 = Vector.constant(7, 0.0);
      // Undeclared exception!
      try { 
        vector3.swapElements(0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      // Undeclared exception!
      try { 
        SparseVector.zero((-2941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2941
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(387);
      denseVector0.get(8);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Vector vector0 = Vector.random(1, mockRandom0);
      mockRandom0.nextFloat();
      mockRandom0.longs();
      mockRandom0.nextFloat();
      mockRandom0.doubles(420L, (-2598.48), 670.97515);
      mockRandom0.doubles(420L, (double) 0.2F, Double.POSITIVE_INFINITY);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.each(vectorProcedure0);
      mockRandom0.ints();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("].");
      // Undeclared exception!
      try { 
        vector0.toMatrixMarket((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 3120;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3120);
      try { 
        Vector.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector vector0 = Vector.unit(215);
      vector0.toRowMatrix();
      Vector vector1 = vector0.shuffle();
      vector0.setAll(0.0);
      vector1.equals(vector0, 3040.00394272305);
      vector1.innerProduct(vector0);
      vector0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-93);
      // Undeclared exception!
      try { 
        Vector.zero((-93));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      vector0.divide(3159.2199);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 9);
      denseVector0.multiply((double) 9);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseVector0.mkString((NumberFormat) decimalFormat0, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector.fromMap((Map<Integer, ? extends Number>) null, (-743));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      Vector vector0 = Vector.unit(0);
      double double0 = Double.POSITIVE_INFINITY;
      Vector vector1 = vector0.subtract(Double.POSITIVE_INFINITY);
      Vector vector2 = vector0.subtract(vector1);
      vector2.blank();
      int int1 = 862;
      // Undeclared exception!
      try { 
        vector0.slice(1000, 862);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1000..862].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector.fromCSV("org.la4j.Vectors$3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Vector vector0 = Vector.random(0, mockRandom0);
      // Undeclared exception!
      try { 
        vector0.set(0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.isZeroAt(4);
      Vector vector0 = Vector.unit(2927);
      sparseVector0.mkString((NumberFormat) null, "\uFFFD");
      vector0.subtract((double) 4);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2301.2800618);
      doubleArray0[1] = (double) 2927;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2927;
      String[] stringArray0 = new String[0];
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1249, 1249, 1249);
      DenseVector denseVector0 = DenseVector.unit(1249);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      vector0.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom(0L);
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, columnMajorSparseMatrix0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        vector0.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        vector0.set((-2626), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(10);
      Vector.random(10, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1133.0;
      doubleArray0[1] = 2353.88045;
      double double0 = (-1081.9);
      doubleArray0[2] = (-1081.9);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      sparseVector0.sum();
      vector0.subtract((Vector) sparseVector0);
      vector0.outerProduct(sparseVector0);
      sparseVector0.sum();
      int int0 = (-2479);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      vector0.updateAt((-2479), vectorFunction0);
      Vector vector1 = sparseVector0.shuffle();
      vector1.toDiagonalMatrix();
      VectorFactory<DenseVector> vectorFactory0 = (VectorFactory<DenseVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        vector1.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-1205);
      double double0 = 3617.1293672074;
      // Undeclared exception!
      try { 
        Vector.constant((-1205), 3617.1293672074);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int0 = 0;
      Vector vector0 = Vector.fromMap(hashMap0, 0);
      Vector vector1 = Vector.fromMap(hashMap0, 3);
      vector0.equals(vector1, (-3564.598));
      // Undeclared exception!
      try { 
        vector0.hadamardProduct(vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 0 does not equal to 3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1392);
      denseVector0.multiply((double) 1392);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector vector0 = Vector.zero(1220);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1220);
      denseVector0.outerProduct(vector0);
      SparseVector sparseVector0 = SparseVector.zero(16, 16);
      Vector vector1 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      vector0.equals(vector1, (double) 16);
      vector0.set(178, 178);
      org.evosuite.runtime.Random.setNextRandom(1220);
      sparseVector0.outerProduct(vector0);
      // Undeclared exception!
      try { 
        sparseVector0.apply((VectorOperation<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.toString();
      Vector vector1 = sparseVector0.multiply(0.0);
      vector1.sliceLeft(0);
      vector1.toBinary();
      Vector vector2 = vector0.hadamardProduct(vector1);
      Vector vector3 = Vector.zero(0);
      vector3.divide(0.0);
      vector3.slice(0, 0);
      vector2.add(0.0);
      Vector vector4 = Vector.constant(0, 1.0);
      Vector.unit(37);
      vector4.sum();
      vector0.norm();
      sparseVector0.toCSV();
      vector0.infinityNorm();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Vector vector5 = Vector.fromCollection(linkedList0);
      Vector vector6 = vector5.blank();
      vector6.manhattanNorm();
      Vector.zero(3);
      Vector.zero(0);
      vector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicVector basicVector0 = (BasicVector)Vector.unit(0);
      basicVector0.product();
      int int0 = 0;
      int int1 = 7;
      basicVector0.euclideanNorm();
      BasicVector basicVector1 = (BasicVector)basicVector0.copyOfLength(7);
      ((Vector)basicVector0).ensureLengthIsCorrect(0);
      basicVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        basicVector1.subtract((Vector) basicVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 7 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector vector0 = Vector.constant(0, 0.0);
      // Undeclared exception!
      try { 
        vector0.sliceRight(2763);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2763..0].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        DenseVector.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.spliterator();
      denseVector0.toMatrixMarket();
      denseVector0.iterator();
      denseVector0.toCSV();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 200);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      SparseVector sparseVector1 = SparseVector.fromMap(hashMap0, 200);
      vector0.cosineSimilarity(sparseVector1);
      // Undeclared exception!
      try { 
        denseVector0.add(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 0 does not equal to 200.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 3131;
      DenseVector denseVector0 = DenseVector.constant(3131, 3131);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      Vector vector1 = vector0.subtract((double) 3131);
      DenseVector denseVector1 = DenseVector.unit(3131);
      // Undeclared exception!
      vector1.outerProduct(denseVector1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      int int0 = 2313;
      DenseVector denseVector0 = DenseVector.zero(2313);
      assertEquals(2313, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotNull(vector0);
      assertTrue(vector0.equals((Object)denseVector0));
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = vector0.toMatrixMarket();
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotNull(string0);
      assertTrue(vector0.equals((Object)denseVector0));
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Chinese", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\uFFE5", decimalFormat0.getPositivePrefix());
      assertEquals("-\uFFE5", decimalFormat0.getNegativePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toLocalizedPattern());
      assertEquals("-\u00A4", decimalFormat1.getNegativePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals("\u00A4", decimalFormat1.getPositivePrefix());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(2, decimalFormat1.getMinimumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertNotSame(decimalFormat1, decimalFormat0);
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      
      String string2 = vector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\uFFE5", decimalFormat0.getPositivePrefix());
      assertEquals("-\uFFE5", decimalFormat0.getNegativePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotNull(string2);
      assertTrue(denseVector0.equals((Object)vector0));
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      BasicVector basicVector0 = (BasicVector)denseVector0.copy();
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, basicVector0.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotNull(basicVector0);
      assertTrue(denseVector0.equals((Object)vector0));
      assertTrue(basicVector0.equals((Object)denseVector0));
      
      BasicVector basicVector1 = (BasicVector)vector0.subtract((Vector) basicVector0);
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertEquals(2313, basicVector0.length());
      assertEquals(2313, basicVector1.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(vector0, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotSame(vector0, denseVector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertTrue(vector0.equals((Object)basicVector0));
      assertTrue(vector0.equals((Object)denseVector0));
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      
      boolean boolean1 = basicVector0.equals((Vector) denseVector0, (double) 2313);
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, basicVector0.length());
      assertTrue(boolean1);
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, basicVector1);
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertTrue(denseVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)vector0));
      assertTrue(basicVector0.equals((Object)basicVector1));
      assertTrue(boolean1 == boolean0);
      
      String string3 = basicVector1.toMatrixMarket();
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertEquals(2313, basicVector0.length());
      assertEquals(2313, basicVector1.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(vector0, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotSame(vector0, denseVector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(string3);
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertTrue(denseVector0.equals((Object)basicVector1));
      assertTrue(vector0.equals((Object)basicVector0));
      assertTrue(vector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)vector0));
      assertTrue(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)vector0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      BasicVector basicVector2 = (BasicVector)basicVector1.shuffle();
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertEquals(2313, basicVector0.length());
      assertEquals(2313, basicVector1.length());
      assertEquals(2313, basicVector2.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector2);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(vector0, basicVector2);
      assertNotSame(vector0, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotSame(vector0, denseVector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, basicVector2);
      assertNotSame(basicVector2, basicVector1);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, denseVector0);
      assertNotSame(basicVector2, vector0);
      assertNotNull(basicVector2);
      assertTrue(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)vector0));
      assertTrue(vector0.equals((Object)denseVector0));
      assertTrue(vector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertTrue(basicVector2.equals((Object)vector0));
      assertTrue(basicVector2.equals((Object)denseVector0));
      assertTrue(basicVector2.equals((Object)basicVector1));
      
      String string4 = basicVector2.mkString((NumberFormat) decimalFormat1, string3);
      assertEquals(2313, denseVector0.length());
      assertEquals(2313, vector0.length());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toLocalizedPattern());
      assertEquals("-\u00A4", decimalFormat1.getNegativePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals("\u00A4", decimalFormat1.getPositivePrefix());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(2, decimalFormat1.getMinimumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(2313, basicVector0.length());
      assertEquals(2313, basicVector1.length());
      assertEquals(2313, basicVector2.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector2);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(vector0, basicVector2);
      assertNotSame(vector0, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotSame(vector0, denseVector0);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, basicVector2);
      assertNotSame(basicVector2, basicVector1);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, denseVector0);
      assertNotSame(basicVector2, vector0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(denseVector0.equals((Object)basicVector2));
      assertTrue(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)vector0));
      assertTrue(vector0.equals((Object)denseVector0));
      assertTrue(vector0.equals((Object)basicVector0));
      assertTrue(vector0.equals((Object)basicVector2));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertTrue(basicVector0.equals((Object)vector0));
      assertTrue(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector1.equals((Object)basicVector2));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(basicVector2.equals((Object)vector0));
      assertTrue(basicVector2.equals((Object)denseVector0));
      assertTrue(basicVector2.equals((Object)basicVector1));
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int1 = (-592);
      // Undeclared exception!
      try { 
        Vector.fromMap(hashMap0, (-592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -592
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1031;
      MockRandom mockRandom0 = new MockRandom(1031);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = mockRandom0.nextInt(1031);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Vector vector0 = Vector.random(1031, mockRandom0);
      assertEquals(1031, vector0.length());
      assertNotNull(vector0);
      
      Vector vector1 = vector0.blankOfLength(1031);
      assertEquals(1031, vector0.length());
      assertEquals(1031, vector1.length());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotNull(vector1);
      assertFalse(vector1.equals((Object)vector0));
      
      int int2 = vector1.hashCode();
      assertEquals(1031, vector0.length());
      assertEquals(1031, vector1.length());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertFalse(vector0.equals((Object)vector1));
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int3 = 209;
      Integer integer0 = new Integer(209);
      assertEquals(209, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int3));
      
      try { 
        Byte.valueOf("\uFFFD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFFD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 0;
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)Vector.fromMap(hashMap0, 3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector0.equals((Vector) compressedVector1, (-3564.598));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(boolean0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        compressedVector0.hadamardProduct(compressedVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 0 does not equal to 3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 2675;
      DenseVector denseVector0 = DenseVector.unit(2675);
      assertEquals(2675, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.copy();
      assertEquals(2675, denseVector0.length());
      assertEquals(2675, vector0.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotNull(vector0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("cinese", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotNull(decimalFormat0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BasicVector basicVector0 = (BasicVector)Vector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector0.length());
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotNull(basicVector0);
      assertFalse(basicVector0.equals((Object)vector0));
      assertFalse(basicVector0.equals((Object)denseVector0));
      
      String string1 = denseVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals(2675, denseVector0.length());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotNull(string1);
      assertFalse(denseVector0.equals((Object)basicVector0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      
      BasicVector basicVector1 = (BasicVector)vector0.divide(2675);
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "#c5S$?4Y";
      // Undeclared exception!
      basicVector1.toCSV();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 697.1844;
      doubleArray0[1] = 697.1844;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 697.1844;
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(8, vector0.length());
      assertArrayEquals(new double[] {697.1844, 697.1844, 2.0, 0.0, (-1.0), 0.0, (-1.0), 697.1844}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        vector0.slice((-320), (-1807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-320..-1807].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector vector0 = Vector.unit(215);
      assertEquals(215, vector0.length());
      assertNotNull(vector0);
      
      Matrix matrix0 = vector0.toRowMatrix();
      assertEquals(215, vector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(215, matrix0.columns());
      assertNotNull(matrix0);
      
      Vector vector1 = vector0.shuffle();
      assertEquals(215, vector0.length());
      assertEquals(215, vector1.length());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      
      vector0.setAll(0.0);
      assertEquals(215, vector0.length());
      assertNotSame(vector0, vector1);
      assertFalse(vector0.equals((Object)vector1));
      
      boolean boolean0 = vector1.equals(vector0, 0.0);
      assertEquals(215, vector0.length());
      assertEquals(215, vector1.length());
      assertFalse(boolean0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertFalse(vector0.equals((Object)vector1));
      assertFalse(vector1.equals((Object)vector0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 215;
      intArray0[1] = 215;
      intArray0[2] = 215;
      intArray0[3] = 1000;
      intArray0[4] = 215;
      intArray0[5] = 215;
      // Undeclared exception!
      try { 
        vector1.select(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector vector0 = Vector.unit(215);
      vector0.toRowMatrix();
      Vector vector1 = vector0.shuffle();
      vector0.setAll(0.0);
      vector1.equals(vector0, 3040.00394272305);
      int[] intArray0 = new int[6];
      intArray0[0] = 215;
      intArray0[1] = 215;
      intArray0[2] = 215;
      intArray0[3] = 1000;
      intArray0[4] = 215;
      intArray0[5] = 215;
      // Undeclared exception!
      try { 
        vector1.select(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.unit(0);
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 1959.6207546136134, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      Double double0 = new Double(0.0);
      vector0.equals((Object) double0);
      vector0.infinityNorm();
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      SparseVector sparseVector1 = SparseVector.zero(0);
      sparseVector0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseVector0.updateAt(0, vectorFunction0);
      sparseVector0.product();
      sparseVector1.equals((Object) "%%MatrixMarket vector coordinate real\n0 0\n");
      Vector vector0 = Vector.zero(1400);
      sparseVector0.toString();
      Matrix matrix0 = vector0.outerProduct(sparseVector1);
      sparseVector1.toColumnMatrix();
      Vector vector1 = sparseVector0.sliceRight(0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.min();
      Matrix matrix1 = matrix0.transformRow(0, vectorFunction1);
      vector1.toColumnMatrix();
      vector0.norm();
      sparseVector1.toRowMatrix();
      vector0.multiply(matrix0);
      // Undeclared exception!
      try { 
        vector1.multiply(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of rows in the given matrix: 0 does not equal to 1400.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(24, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector.fromCSV("0.000");
      // Undeclared exception!
      try { 
        SparseVector.fromMap((Map<Integer, ? extends Number>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-835.0);
      doubleArray0[1] = (-1196.94352297087);
      doubleArray0[2] = 657.74;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      Vector vector0 = Vector.fromArray(doubleArray0);
      vector0.setAll((-1.0));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      vector0.sum();
      Vector.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      vector0.toMatrixMarket(numberFormat0);
      String string0 = vector0.toMatrixMarket();
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals("%%MatrixMarket vector array real\n4\n-1.000\n-1.000\n-1.000\n-1.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.toString();
      Vector vector1 = sparseVector0.multiply(0.0);
      Vector vector2 = vector1.sliceLeft(0);
      vector1.toBinary();
      Vector vector3 = vector0.hadamardProduct(vector1);
      Vector vector4 = Vector.zero(0);
      Vector vector5 = vector4.divide(0.0);
      vector4.slice(0, 0);
      vector3.add(0.0);
      assertNotSame(vector1, vector2);
      
      Vector vector6 = Vector.constant(0, 1.0);
      Vector vector7 = Vector.unit(37);
      assertEquals(37, vector7.length());
      
      double double0 = vector6.sum();
      assertEquals(0.0, double0, 0.01);
      assertTrue(vector6.equals((Object)vector5));
      
      vector0.norm();
      sparseVector0.toCSV();
      vector0.infinityNorm();
      assertEquals(0, sparseVector0.length());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Vector vector8 = Vector.fromCollection(linkedList0);
      Vector vector9 = vector8.blank();
      vector9.manhattanNorm();
      Vector.zero(3);
      Vector vector10 = Vector.zero(0);
      vector8.min();
      vector10.hashCode();
      assertTrue(vector10.equals((Object)vector8));
  }
}
