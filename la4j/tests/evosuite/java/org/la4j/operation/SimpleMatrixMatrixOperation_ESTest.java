/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:42:13 GMT 2021
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleMatrixMatrixOperation_ESTest extends SimpleMatrixMatrixOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(582, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(582, 3585, (-27.12));
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, denseMatrix0);
      assertEquals(3585, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(48);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(48, 0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, columnMajorSparseMatrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, denseMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) null, (RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(16, 16);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply(denseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 1250, 0);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply((ColumnMajorSparseMatrix) null, denseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[4];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 0, doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, rowMajorSparseMatrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1737);
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      // Undeclared exception!
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1091, 1);
      CCSMatrix cCSMatrix0 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, (DenseMatrix) null);
      assertNull(matrix0);
  }
}
