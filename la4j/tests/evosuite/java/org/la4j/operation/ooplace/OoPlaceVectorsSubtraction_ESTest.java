/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:16:19 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceVectorsSubtraction_ESTest extends OoPlaceVectorsSubtraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.constant(1310, 0.0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      denseVector0.toMatrixMarket();
      ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      DenseVector.constant(651, 651);
      // Undeclared exception!
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1108.977488);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1756.752;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-221.58690027);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1, 1);
      CompressedVector compressedVector0 = (CompressedVector)columnMajorSparseMatrix0.getRow(2081);
      ooPlaceVectorsSubtraction0.ensureApplicableTo(compressedVector0, compressedVector0);
      MockRandom mockRandom0 = new MockRandom((-1627L));
      BasicVector basicVector0 = (BasicVector)DenseVector.random(2081, mockRandom0);
      ooPlaceVectorsSubtraction0.apply((DenseVector) basicVector0, (DenseVector) basicVector0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1627L);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1627L);
      CompressedVector compressedVector1 = (CompressedVector)SparseVector.fromArray(doubleArray0);
      ooPlaceVectorsSubtraction0.apply((SparseVector) compressedVector1, (DenseVector) basicVector0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.ensureApplicableTo((Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2536.9643;
      doubleArray0[1] = (-1623.574584351);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5516.024490003034);
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseVector0.forEach(consumer0);
      ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((-1450.8), (-1.0));
      Vector vector0 = Vector.random(0, mockRandom0);
      sparseVector0.toColumnMatrix();
      Vector vector1 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.ensureApplicableTo(vector0, vector1);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.ensureApplicableTo(sparseVector0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 0 does not equal to 6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1, 1);
      Vector vector0 = columnMajorSparseMatrix0.getRow(2081);
      ooPlaceVectorsSubtraction0.ensureApplicableTo(vector0, vector0);
      MockRandom mockRandom0 = new MockRandom((-1627L));
      DenseVector denseVector0 = DenseVector.random(2081, mockRandom0);
      ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1627L);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2081;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1627L);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector1 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      assertEquals(2081, vector1.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[7];
      denseVector0.toString();
      doubleArray0[0] = 657.664822523765;
      doubleArray0[1] = 275.827174;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      SparseVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      sparseVector0.eachNonZero(vectorProcedure0);
      sparseVector0.toBinary();
      ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      doubleArray0[4] = 972.818457649952;
      doubleArray0[5] = (-982.562300479);
      doubleArray0[6] = 0.0;
      ooPlaceVectorsSubtraction0.partiallyApply(sparseVector0);
      SparseVector sparseVector1 = SparseVector.fromArray(doubleArray0);
      sparseVector1.copy();
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      String string0 = "";
      DenseVector denseVector0 = DenseVector.fromCSV("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-143.372670040074);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 990.7724747;
      doubleArray0[3] = (-1733.2471198184212);
      doubleArray0[4] = 330.103;
      doubleArray0[5] = (-1.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      SparseVector sparseVector1 = SparseVector.fromCSV("");
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector1);
      ooPlaceVectorsSubtraction0.apply(sparseVector1, sparseVector1);
      SparseVector sparseVector2 = SparseVector.fromCSV("");
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector2, sparseVector2);
      assertNotSame(sparseVector2, vector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((SparseVector) null, denseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3626.3408);
      doubleArray0[1] = 593.95407;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      DenseVector denseVector1 = DenseVector.unit(1128);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.pollLast();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.add((-333.83));
      SparseVector sparseVector0 = null;
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply(denseVector0, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.constant(0, (-1279.5719930089172));
      SparseVector sparseVector0 = SparseVector.zero(0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(0, 8);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      assertNotSame(denseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1127);
      DenseVector denseVector1 = DenseVector.zero(1127);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector1);
      assertTrue(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 191.777;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1521.50636645;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      int int0 = 3369;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = null;
      mockRandom0.ints();
      mockRandom0.nextLong();
      ooPlaceVectorsSubtraction0.partiallyApply((DenseVector) null);
      SparseVector sparseVector0 = SparseVector.random(3369, 0.0, (java.util.Random) mockRandom0);
      sparseVector0.toDiagonalMatrix();
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((DenseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      int int0 = (-341);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        DenseVector.random((-341), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1464.470009203527;
      doubleArray0[2] = (-820.194371);
      doubleArray0[3] = 888.772129504115;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      DenseVector denseVector0 = DenseVector.constant(30, (-1.0));
      ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      MockRandom mockRandom0 = new MockRandom(450);
      // Undeclared exception!
      try { 
        SparseVector.random(450, (double) 450, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.constant(350, 350);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
      assertEquals(350, vector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 17;
      DenseVector.fromMap(hashMap0, 17);
      Integer integer0 = new Integer(0);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      // Undeclared exception!
      try { 
        DenseVector.fromCSV("p'3o-{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.zero(566);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 566);
      ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.partiallyApply(denseVector0);
      ooPlaceVectorsSubtraction0.ensureApplicableTo(vector0, vector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      ooPlaceVectorsSubtraction0.ensureApplicableTo(vector0, sparseVector0);
      Vector vector1 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      assertNotSame(denseVector0, vector1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      double double0 = 0.0;
      DenseVector denseVector0 = DenseVector.constant(1310, 0.0);
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.ensureApplicableTo(denseVector0, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 1310 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }
}
