/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:55:16 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceMatrixByVectorMultiplication_ESTest extends OoPlaceMatrixByVectorMultiplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      Random random0 = null;
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, 1.0, (Random) null);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1628, 606);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.clear();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1628);
      sparseVector0.spliterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (DenseVector) basicVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      mockRandom0.doubles();
      SparseVector sparseVector0 = SparseVector.zero(1, (-1079));
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(1);
      ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, sparseVector0);
      BasicVector basicVector1 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (DenseVector) basicVector0);
      assertTrue(basicVector1.equals((Object)basicVector0));
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1079);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (-1079);
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseVector) basicVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 657.7;
      doubleArray1[3] = (-227.576428339701);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-227.576428339701);
      doubleArray2[1] = 657.7;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-227.576428339701);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4232, 4232);
      DenseMatrix.from1DArray(4212, 4212, (double[]) null);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 657.7;
      doubleArray1[3] = (-227.576428339701);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-227.576428339701);
      doubleArray2[1] = 657.7;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-227.576428339701);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-541.160577));
      DenseVector denseVector0 = DenseVector.constant(1, (-1.0));
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(4219, 10, doubleArray1);
      SparseVector sparseVector0 = SparseVector.zero(10);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      Integer integer0 = new Integer(13);
      hashMap0.put(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        DenseVector.fromMap(hashMap0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 1139;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1139, 1139);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1139;
      doubleArray0[2] = (double) 1139;
      doubleArray0[3] = 1986.336694276;
      doubleArray0[4] = (double) 1139;
      doubleArray0[5] = (double) 1139;
      doubleArray0[5] = (double) 1139;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(3, mockRandom0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      Matrix matrix0 = columnMajorSparseMatrix0.multiplyByItsTranspose();
      ooPlaceMatrixByVectorMultiplication0.partiallyApply(columnMajorSparseMatrix0);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = (-1329);
      matrix0.removeFirstRow();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1139, 1139);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1139;
      doubleArray0[2] = (double) 1139;
      doubleArray0[3] = 1986.336694276;
      doubleArray0[4] = (double) 1139;
      doubleArray0[5] = (double) 1139;
      doubleArray0[6] = (double) 1139;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      assertEquals(0.0052677787532923615, compressedVector0.density(), 0.01);
      
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)DenseMatrix.from1DArray(1819, 1819, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((DenseMatrix) basic1DMatrix0, (SparseVector) compressedVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1820
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      mockRandom0.nextInt();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap1, 0);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseVector0.forEach(consumer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      DenseVector.fromArray(doubleArray0);
      denseMatrix0.transform(matrixFunction0);
      DenseVector denseVector1 = DenseVector.random(0, mockRandom0);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector1);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector1);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) null, denseVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(10, 10, 0.0, (Random) mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(661);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, sparseVector0);
      assertEquals(10, vector0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.zero(0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, sparseVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (-4034.8739299), (Random) mockRandom0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3962.907606);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1320.29;
      doubleArray1[3] = 2143.4661;
      doubleArray1[4] = (-314.07);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-1054.923350011);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1054.923350011);
      doubleArray2[1] = (-3962.907606);
      doubleArray2[2] = (-1054.923350011);
      doubleArray2[3] = 2143.4661;
      doubleArray2[4] = (-1054.923350011);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1054.923350011);
      doubleArray3[1] = 1320.29;
      doubleArray3[2] = 1320.29;
      doubleArray3[3] = (-1054.923350011);
      doubleArray3[4] = (-3962.907606);
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-1054.923350011);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-314.07);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1023.699;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-3962.907606);
      doubleArray4[7] = (-314.07);
      doubleArray4[8] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1054.923350011);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-314.07);
      doubleArray5[5] = 1023.699;
      doubleArray5[6] = 1.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 2143.4661;
      doubleArray6[1] = 1023.699;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-1054.923350011);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-314.07);
      doubleArray6[7] = (-3962.907606);
      doubleArray6[8] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray4);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 2;
      Matrix matrix0 = Matrix.constant(2, 2, 2);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo(matrix0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-5203.67148632);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1127.28;
      doubleArray1[4] = (-1260.7695);
      doubleArray1[5] = 2084.766;
      doubleArray1[6] = 335.27928929921;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-4087.5533042095285);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatrixByVectorMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(1, (double) 1, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      denseVector0.iterator();
      ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo(matrix0, denseVector0);
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-337.0);
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(10, 0, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      DenseVector denseVector0 = DenseVector.random(0, (Random) null);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) null, denseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      SparseVector sparseVector0 = SparseVector.zero(1, (-1079));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      assertEquals(1, vector0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[0][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.determinant();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1226, 6);
      DenseVector denseVector0 = DenseVector.unit(0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 657.7;
      doubleArray1[3] = (-227.576428339701);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-227.576428339701);
      doubleArray2[1] = 657.7;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-227.576428339701);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      DenseVector denseVector0 = DenseVector.constant(0, 0.0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 13;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 13, doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZeroInRow(1738, vectorAccumulator0);
      Vector vector0 = Vector.unit(0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo(rowMajorSparseMatrix0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 13.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1398, 1398);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1398;
      doubleArray0[1] = (-24.0);
      doubleArray0[2] = 3633.27068936487;
      doubleArray0[3] = (double) 1398;
      doubleArray0[4] = (double) 1398;
      doubleArray0[5] = (double) 1398;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 7;
      DenseVector denseVector0 = DenseVector.constant(7, 7);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) null, denseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 2725.210022, (Random) mockRandom0);
      DenseVector denseVector0 = DenseVector.unit(368);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      assertNotSame(denseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      SparseVector sparseVector0 = SparseVector.zero(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      sparseVector0.spliterator();
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-817.909193);
      doubleArray1[3] = 653.0604;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3477.455);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.unit(94);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      assertNotSame(vector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      mockRandom0.doubles();
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(1);
      ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, sparseVector0);
      BasicVector basicVector1 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (DenseVector) basicVector0);
      assertTrue(basicVector1.equals((Object)basicVector0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, 1.0, (Random) null);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo(matrix0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 3 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      mockRandom0.doubles();
      SparseVector sparseVector0 = SparseVector.zero(1, (-1079));
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(1);
      ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, sparseVector0);
      BasicVector basicVector1 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (DenseVector) basicVector0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1079);
      doubleArray1[1] = (double) 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray1[2] = (double) (-1079);
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (DenseVector) basicVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 2.3304809480241535;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JW50z31Bg!'%$,Wx9");
      MockRandom mockRandom0 = new MockRandom();
      String string0 = null;
      // Undeclared exception!
      try { 
        mockRandom0.ints((-2663), (-2663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      SparseVector sparseVector0 = null;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector.fromMap(hashMap0, 268);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3934, 3934, 417);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 100.0;
      doubleArray1[2] = 657.7;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[3] = (-227.576428339701);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-227.576428339701);
      doubleArray2[1] = 657.7;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-227.576428339701);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      org.evosuite.runtime.Random.setNextRandom(74);
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 16);
      ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      DenseVector denseVector1 = DenseVector.fromMap(hashMap0, 0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
