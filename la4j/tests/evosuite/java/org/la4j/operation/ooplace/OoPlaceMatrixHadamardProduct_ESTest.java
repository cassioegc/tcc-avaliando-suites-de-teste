/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:06:59 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.iterator.MatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceMatrixHadamardProduct_ESTest extends OoPlaceMatrixHadamardProduct_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[1];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(23, 23);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(23, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(23, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(denseMatrix0);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.diagonal(21, 0.0);
      assertNotNull(rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(21, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(21, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(21, rowMajorSparseMatrix1.cardinality());
      assertEquals(0.047619047619047616, rowMajorSparseMatrix1.density(), 0.01);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix1.copy();
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(21, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(21, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(21, rowMajorSparseMatrix1.cardinality());
      assertEquals(0.047619047619047616, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(21, cRSMatrix0.cardinality());
      assertEquals(21, cRSMatrix0.columns());
      assertEquals(21, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.047619047619047616, cRSMatrix0.density(), 0.01);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = (-1);
      Random.setNextRandom((-1));
      MatrixIterator matrixIterator0 = denseMatrix0.iterator();
      assertEquals(2, doubleArray0.length);
      assertNotNull(matrixIterator0);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo(rowMajorSparseMatrix1, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 21x21 does not equal to 2x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      assertNotNull(denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, matrix0.columns());
      assertEquals(32, matrix0.rows());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, matrix1.columns());
      assertEquals(32, matrix1.rows());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (-1.0), (java.util.Random) mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      int int1 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(32, 5, (double) 0, (java.util.Random) mockRandom0);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(5, columnMajorSparseMatrix0.cardinality());
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(5, columnMajorSparseMatrix0.cardinality());
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(5, columnMajorSparseMatrix0.cardinality());
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      VectorProcedure vectorProcedure0 = null;
      CRSMatrix cRSMatrix2 = (CRSMatrix)rowMajorSparseMatrix0.blankOfShape(32, 0);
      assertNotNull(cRSMatrix2);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(32, cRSMatrix2.rows());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo(columnMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 32x5 does not equal to 32x32.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      int int0 = 1332;
      MockRandom mockRandom0 = new MockRandom(1332);
      assertNotNull(mockRandom0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 790;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(790, 790, 790);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 790;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1332;
      doubleArray1[3] = (double) 1332;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = (double) 1332;
      doubleArray1[6] = (double) 790;
      doubleArray1[7] = (double) 1332;
      doubleArray1[8] = (-526.1112877681612);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, sparseMatrix0);
      // Undeclared exception!
      DenseMatrix.random(790, 581, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2201, 18, 0.0);
      assertNotNull(denseMatrix0);
      assertEquals(2201, denseMatrix0.rows());
      assertEquals(18, denseMatrix0.columns());
      
      // Undeclared exception!
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(11);
      assertNotNull(denseMatrix0);
      assertEquals(11, denseMatrix0.columns());
      assertEquals(11, denseMatrix0.rows());
      
      DenseMatrix denseMatrix1 = null;
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (java.util.Random) mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo(rowMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x1 does not equal to 11x11.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(23, 23);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(23, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(23, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(23, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(23, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(23, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(23, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.from2DArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(basic2DMatrix0);
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.diagonal(21, 0.0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(21, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.047619047619047616, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(21, cRSMatrix1.cardinality());
      assertEquals(21, cRSMatrix1.columns());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.copy();
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertEquals(21, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.047619047619047616, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(21, cRSMatrix1.cardinality());
      assertEquals(21, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(21, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(21, cRSMatrix2.rows());
      assertEquals(0.047619047619047616, cRSMatrix2.density(), 0.01);
      assertEquals(21, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) basic2DMatrix0, (SparseMatrix) cRSMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      DenseMatrix denseMatrix0 = null;
      DenseMatrix denseMatrix1 = DenseMatrix.identity(6);
      assertNotNull(denseMatrix1);
      assertEquals(6, denseMatrix1.columns());
      assertEquals(6, denseMatrix1.rows());
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) null, denseMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3474.5198;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-379.527);
      doubleArray1[4] = 1635.912470441544;
      doubleArray1[5] = 199.467801140173;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-379.527);
      doubleArray4[2] = (-379.527);
      doubleArray4[3] = (-379.527);
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 199.467801140173;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 199.467801140173;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 199.467801140173;
      doubleArray6[5] = 3474.5198;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-379.527);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = 1635.912470441544;
      doubleArray8[1] = (-379.527);
      doubleArray8[2] = 1612.42943807727;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = 396.7574913;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 100.0;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = 3474.5198;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(0, 0, doubleArray3);
      assertEquals(0, doubleArray3.length);
      assertNotNull(denseMatrix1);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray8);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertEquals(0, denseMatrix1.columns());
      assertEquals(0, denseMatrix1.rows());
      assertFalse(doubleArray3.equals((Object)doubleArray7));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray8));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      int int0 = 48;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(48, 48);
      assertNotNull(denseMatrix0);
      assertEquals(48, denseMatrix0.columns());
      assertEquals(48, denseMatrix0.rows());
      
      int int1 = 10;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(10, 10);
      assertNotNull(sparseMatrix0);
      assertEquals(10, sparseMatrix0.rows());
      assertEquals(0.1, sparseMatrix0.density(), 0.01);
      assertEquals(10.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(10, sparseMatrix0.cardinality());
      assertEquals(10, sparseMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, sparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertEquals(48, denseMatrix0.columns());
      assertEquals(48, denseMatrix0.rows());
      assertEquals(10, sparseMatrix0.rows());
      assertEquals(0.1, sparseMatrix0.density(), 0.01);
      assertEquals(10.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(10, sparseMatrix0.cardinality());
      assertEquals(10, sparseMatrix0.columns());
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      assertEquals(10, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      assertEquals(480.0, cRSMatrix0.max(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      
      int int2 = 32;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 48;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(32, 32, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = null;
      SparseMatrix sparseMatrix1 = denseMatrix0.toSparseMatrix();
      assertNotNull(sparseMatrix1);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, sparseMatrix1.cardinality());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertTrue(sparseMatrix1.isRowMajor());
      assertEquals(0, sparseMatrix1.columns());
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
      assertEquals(0, sparseMatrix1.rows());
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1666.912225098422);
      doubleArray1[1] = 1639.1;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-47.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1666.912225098422);
      doubleArray2[2] = (-47.1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1639.1;
      doubleArray3[1] = 1639.1;
      doubleArray3[2] = (-47.1);
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1666.912225098422);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-47.1);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1639.1;
      doubleArray5[2] = 1639.1;
      doubleArray5[3] = 1639.1;
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (-5373.5348221);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-47.1);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-47.1);
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-1.0);
      doubleArray7[6] = (-47.1);
      doubleArray7[7] = (-47.1);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (-1666.912225098422);
      doubleArray8[1] = (-47.1);
      doubleArray8[2] = (-5373.5348221);
      doubleArray8[3] = (-47.1);
      doubleArray8[4] = (-1666.912225098422);
      doubleArray8[5] = 185.69846991;
      doubleArray8[6] = 0.0;
      doubleArray8[7] = 1639.1;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(denseMatrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      int int0 = 2236;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2236, 2236);
      assertNotNull(rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2236, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2236, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      
      Iterator<Integer> iterator0 = columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      assertNotNull(iterator0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2236, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2236, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(2236, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2236, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2236, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2236, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(2236, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(2236, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix2);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2236, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2236, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(2236, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(2236, cRSMatrix2.rows());
      
      SparseMatrix sparseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) null, (SparseMatrix) rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-559.37276);
      doubleArray1[2] = 2920.57;
      doubleArray1[3] = 4847.596663670693;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3641.279853202862);
      doubleArray2[1] = 2920.57;
      doubleArray2[2] = 2920.57;
      doubleArray2[3] = 2920.57;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertEquals((-3641.279853202862), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.7, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4847.596663670693, columnMajorSparseMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(5, columnMajorSparseMatrix0.columns());
      assertEquals((-3641.279853202862), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.7, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4847.596663670693, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.7, cCSMatrix0.density(), 0.01);
      assertEquals(2.349919341363123E7, cCSMatrix0.max(), 0.01);
      assertEquals(5, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)33, (byte) (-119)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      int int0 = 426;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(426, 0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(426, columnMajorSparseMatrix0.rows());
      
      Spliterator<Double> spliterator0 = columnMajorSparseMatrix0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(426, columnMajorSparseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo((Matrix) null, columnMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (java.util.Random) null);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1020.8612062);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.copyOfShape(0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) null, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      MockRandom mockRandom0 = new MockRandom(3);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      assertNotNull(sparseMatrix0);
      assertEquals(3, sparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(3, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, sparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, sparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(3, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.8, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      int int0 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      assertNotNull(denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, matrix0.columns());
      assertEquals(32, matrix0.rows());
      assertTrue(matrix0.equals((Object)denseMatrix0));
      
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertEquals(32, denseMatrix0.rows());
      assertEquals(32, denseMatrix0.columns());
      assertEquals(32, matrix1.columns());
      assertEquals(32, matrix1.rows());
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (-1.0), (java.util.Random) mockRandom0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(32, 32, (double) 0, (java.util.Random) mockRandom0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.9, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.9, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(0.9, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.blankOfShape((-1627), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1627x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4042;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(4042, 22, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (-237.3677573109), (java.util.Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertTrue(matrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1, 0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(0.0, matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.doubles();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix0 = Matrix.zero(0, 0);
      ooPlaceMatrixHadamardProduct0.ensureApplicableTo(matrix0, matrix0);
      RowMajorSparseMatrix.zero(0, 0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Matrix matrix1 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo((Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      ooPlaceMatrixHadamardProduct0.ensureApplicableTo(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo((Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      assertNotSame(denseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 2262;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(2262);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(2262, 2262, 0.0, (java.util.Random) mockRandom0);
      // Undeclared exception!
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(23, 23);
      ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.diagonal(21, 0.0);
      rowMajorSparseMatrix1.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(32);
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      int int0 = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (-1.0), (java.util.Random) mockRandom0);
      int int1 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(32, 5, (double) 0, (java.util.Random) mockRandom0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.blankOfShape((-1627), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1627x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-34);
      int int1 = (-427);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-34), (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -34x-34
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2186, 2186, 4222);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ooPlaceMatrixHadamardProduct0.ensureApplicableTo(rowMajorSparseMatrix0, cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom(4222);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.zero(32, 4222);
      CRSMatrix cRSMatrix2 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) basic2DMatrix0, (SparseMatrix) cRSMatrix1);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo(cCSMatrix0, cRSMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 2186x2186.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1828;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1828;
      doubleArray0[3] = (double) 1828;
      doubleArray0[4] = (double) 1828;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4036.0);
      doubleArray0[7] = (double) 1828;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 1828, doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-1), (-1), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1000, 1000, 0);
      ooPlaceMatrixHadamardProduct0.ensureApplicableTo(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(1000);
      DenseVector denseVector0 = DenseVector.zero(2337);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.ensureApplicableTo(rowMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1000x1000 does not equal to 1000x2337.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }
}
