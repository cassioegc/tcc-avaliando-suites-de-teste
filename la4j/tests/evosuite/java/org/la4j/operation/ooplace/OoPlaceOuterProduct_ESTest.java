/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:02:18 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceOuterProduct_ESTest extends OoPlaceOuterProduct_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(165, 0);
      long long0 = (-879L);
      MockRandom mockRandom0 = new MockRandom((-879L));
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = locale0.stripExtensions();
      Locale.forLanguageTag("cPvf[#");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      numberFormat0.setMaximumIntegerDigits(1643);
      locale0.getDisplayLanguage(locale1);
      numberFormat0.setCurrency(currency0);
      sparseVector0.toMatrixMarket(numberFormat0);
      DenseVector denseVector0 = DenseVector.random(165, mockRandom0);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      double double0 = (-1.0);
      Vector.constant(0, (-1.0));
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      SparseVector sparseVector1 = denseVector0.toSparseVector();
      ooPlaceOuterProduct0.apply(sparseVector1, sparseVector0);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(1344);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 684);
      ooPlaceOuterProduct0.partiallyApply(denseVector0);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector1 = DenseVector.random(2409, mockRandom0);
      SparseVector sparseVector0 = denseVector1.toSparseVector();
      sparseVector0.toBinary();
      // Undeclared exception!
      ooPlaceOuterProduct0.apply(denseVector1, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.constant(0, 0.0);
      denseVector0.manhattanNorm();
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      MockRandom mockRandom0 = new MockRandom(0);
      DenseVector denseVector1 = DenseVector.random(0, mockRandom0);
      denseVector1.slice(0, 0);
      ooPlaceOuterProduct0.apply(denseVector1, denseVector1);
      ooPlaceOuterProduct0.apply(denseVector1, denseVector1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      DenseVector denseVector2 = DenseVector.fromArray(doubleArray0);
      ooPlaceOuterProduct0.apply(denseVector2, denseVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector1 = SparseVector.fromCollection(linkedList0);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = null;
      // Undeclared exception!
      try { 
        ooPlaceOuterProduct0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceOuterProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 177;
      double double0 = (-1076.82);
      DenseVector denseVector0 = DenseVector.constant(177, (-1076.82));
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      // Undeclared exception!
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.constant(1008, 2112.9228);
      // Undeclared exception!
      ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1683.96719431;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-971.06999);
      double double0 = 0.0;
      SparseVector sparseVector0 = null;
      DenseVector denseVector0 = null;
      // Undeclared exception!
      try { 
        ooPlaceOuterProduct0.apply((SparseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceOuterProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(6, 0);
      ooPlaceOuterProduct0.partiallyApply(sparseVector0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 208;
      SparseVector sparseVector1 = SparseVector.fromMap(hashMap0, 208);
      // Undeclared exception!
      try { 
        ooPlaceOuterProduct0.apply((DenseVector) null, sparseVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceOuterProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      // Undeclared exception!
      try { 
        ooPlaceOuterProduct0.apply((DenseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      sparseVector0.toBinary();
      DenseVector denseVector0 = DenseVector.constant(8, 155.228902481);
      denseVector0.toRowMatrix();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4748.36873573);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (-478.808305);
      doubleArray0[5] = (-669.4772556);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceOuterProduct0.apply(denseVector0, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceOuterProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-889), (-889));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = null;
      DenseVector denseVector0 = DenseVector.constant(2517, 2517);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseVector0.toDiagonalMatrix();
      denseVector0.toMatrixMarket();
      // Undeclared exception!
      ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      // Undeclared exception!
      try { 
        DenseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 417.67441547537;
      doubleArray0[2] = 634.75671;
      doubleArray0[3] = (-2888.7349373);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      assertEquals((-1833643.8848626043), cRSMatrix0.min(), 0.01);
      assertEquals(0.5625, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      Vector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(1);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      assertEquals(0.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2363.624;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Random.setNextRandom((byte)7);
      doubleArray0[1] = (-1508.669120696004);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertEquals(2, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 455.228;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1743.8601085467);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toRowMatrix();
      DenseVector denseVector1 = denseVector0.toDenseVector();
      Vector.unit(906);
      SparseVector sparseVector0 = denseVector1.toSparseVector();
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector2 = DenseVector.fromCollection(linkedList0);
      linkedList0.toArray();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      denseVector2.subtract(3169.099792523127);
      ooPlaceOuterProduct0.apply(denseVector1, sparseVector0);
      ooPlaceOuterProduct0.apply(denseVector2, denseVector0);
      ooPlaceOuterProduct0.apply(denseVector2, denseVector0);
      // Undeclared exception!
      try { 
        ooPlaceOuterProduct0.apply((DenseVector) null, denseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
