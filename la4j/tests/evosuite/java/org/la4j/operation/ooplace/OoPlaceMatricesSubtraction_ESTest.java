/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:56:40 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceMatricesSubtraction_ESTest extends OoPlaceMatricesSubtraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      ooPlaceMatricesSubtraction0.ensureApplicableTo(rowMajorSparseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3451.51;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom((-1830L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(94, 2, mockRandom0);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) (-1830L);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1456, 1456, 1456);
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix denseMatrix1 = DenseMatrix.randomSymmetric(0, mockRandom0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3237, 3237);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, (double[]) null);
      ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      double[] doubleArray0 = new double[4];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 533.217329702);
      ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom((-1610L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      double[] doubleArray0 = new double[8];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(16, 0, doubleArray0);
      ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.ensureApplicableTo((Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1474, 1474);
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) null, (SparseMatrix) columnMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(918, 9);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(918, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(9, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(918, 2150.35889861849);
      assertNotNull(denseMatrix0);
      assertEquals(918, denseMatrix0.rows());
      assertEquals(918, denseMatrix0.columns());
      
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      double[] doubleArray0 = new double[1];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1448, 1448, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      assertEquals(1448, denseMatrix0.rows());
      assertEquals(1448, denseMatrix0.columns());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(91, 110, 110);
      assertNotNull(denseMatrix0);
      assertEquals(110, denseMatrix0.columns());
      assertEquals(91, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2604);
      assertNotNull(denseMatrix0);
      assertEquals(2604, denseMatrix0.columns());
      assertEquals(2604, denseMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(3423, 3423);
      assertNotNull(sparseMatrix0);
      assertEquals(3423, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(2.9214139643587495E-4, sparseMatrix0.density(), 0.01);
      assertEquals(3423, sparseMatrix0.rows());
      assertEquals(3423.0, sparseMatrix0.max(), 0.01);
      assertEquals(3423, sparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, sparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      double[][] doubleArray0 = new double[2][1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(678);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(678, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(678, rowMajorSparseMatrix0.columns());
      assertEquals(678, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0014749262536873156, rowMajorSparseMatrix0.density(), 0.01);
      
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1000, 0.0);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.001, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1000, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1000, rowMajorSparseMatrix0.columns());
      assertEquals(1000, rowMajorSparseMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-830.482086297));
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals((-830.482086297), rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1, 95, 0.0, (Random) mockRandom0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(95, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.9, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(95, columnMajorSparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1759);
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((DenseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 1520);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(123, 112);
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(569, 569);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) null, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3394, 1, 0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.ensureApplicableTo(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 3394x1 does not equal to 0x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][1];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(678);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '339' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(5);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-830.482086297));
      DenseMatrix denseMatrix0 = DenseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom((-1830L));
      DenseMatrix denseMatrix0 = DenseMatrix.random(94, 2, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      assertEquals(94, matrix0.rows());
  }
}
