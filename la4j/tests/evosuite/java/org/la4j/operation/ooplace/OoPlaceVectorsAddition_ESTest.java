/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:18:11 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceVectorsAddition_ESTest extends OoPlaceVectorsAddition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.zero(4, 4);
      double[] doubleArray0 = new double[1];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.ensureApplicableTo(denseVector0, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 1 does not equal to 4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 591;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      BasicVector basicVector0 = (BasicVector)sparseVector0.subtract((double) 0);
      BasicVector basicVector1 = (BasicVector)ooPlaceVectorsAddition0.apply((DenseVector) basicVector0, (DenseVector) basicVector0);
      assertEquals(1, basicVector1.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorsAddition0.apply(sparseVector0, (SparseVector) compressedVector0);
      assertNotSame(sparseVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      DenseVector denseVector0 = DenseVector.unit(0);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.ensureApplicableTo((Vector) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.zero(1608);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.applySymmetric((DenseVector) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((DenseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(0);
      DenseVector denseVector1 = DenseVector.unit(32);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply(denseVector1, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      double[] doubleArray0 = new double[1];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = sparseVector0.subtract((double) 0);
      DenseVector denseVector0 = DenseVector.constant(591, 2337.917);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.ensureApplicableTo(denseVector0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 591 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      ooPlaceVectorsAddition0.ensureApplicableTo(denseVector0, denseVector0);
      assertEquals(0, denseVector0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      assertNotSame(denseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2000));
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
  }
}
