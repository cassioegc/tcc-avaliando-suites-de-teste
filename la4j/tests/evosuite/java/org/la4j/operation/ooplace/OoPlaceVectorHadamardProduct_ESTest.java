/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:21:17 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceVectorHadamardProduct_ESTest extends OoPlaceVectorHadamardProduct_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.zero(2783, 2783);
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.ensureApplicableTo(sparseVector0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 2783 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply(denseVector0, sparseVector0);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.unit(146);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply((SparseVector) compressedVector0, sparseVector0);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = ooPlaceVectorHadamardProduct0.applySymmetric((DenseVector) null, sparseVector0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      assertNotSame(denseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.ensureApplicableTo(sparseVector0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.constant(17, 17);
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.apply((DenseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      linkedList0.add(integer0);
      SparseVector sparseVector1 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceVectorHadamardProduct0.ensureApplicableTo(sparseVector0, sparseVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 0 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      ooPlaceVectorHadamardProduct0.ensureApplicableTo(sparseVector0, sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.zero(1154);
      SparseVector sparseVector0 = SparseVector.zero(1154);
      sparseVector0.set(48, 1154);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.zero(1154);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.zero(1154);
      sparseVector0.set(48, 1154);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      assertEquals(1, compressedVector0.cardinality());
  }
}
