/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:10:33 GMT 2021
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OoPlaceMatricesAddition_ESTest extends OoPlaceMatricesAddition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(51, 51, 1818.8368266744);
      assertNotNull(denseMatrix0);
      assertEquals(51, denseMatrix0.columns());
      assertEquals(51, denseMatrix0.rows());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(basic2DMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertEquals(51, denseMatrix0.columns());
      assertEquals(51, denseMatrix0.rows());
      assertEquals(51, basic2DMatrix0.columns());
      assertEquals(51, basic2DMatrix0.rows());
      
      Random.setNextRandom(3544);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.fromCSV("");
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      
      Random.setNextRandom(3544);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesAddition0.applySymmetric((DenseMatrix) basic2DMatrix0, (SparseMatrix) cCSMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix1);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertEquals(51, denseMatrix0.columns());
      assertEquals(51, denseMatrix0.rows());
      assertEquals(51, basic2DMatrix0.columns());
      assertEquals(51, basic2DMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(51, basic2DMatrix1.rows());
      assertEquals(51, basic2DMatrix1.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.identity(5);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertNotNull(cRSMatrix1);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(5, cRSMatrix1.cardinality());
      assertEquals(5, cRSMatrix1.columns());
      assertEquals(5, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.2, cRSMatrix1.density(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 514.35072;
      doubleArray0[2] = (double) 5;
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(48, 35, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(48, basic1DMatrix0.rows());
      assertEquals(35, basic1DMatrix0.columns());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 514.35072, 5.0}, doubleArray0, 0.01);
      
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply((DenseMatrix) basic2DMatrix1, (DenseMatrix) basic2DMatrix0);
      assertNotNull(basic2DMatrix2);
      assertFalse(basic2DMatrix2.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix1));
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertNotSame(basic2DMatrix2, denseMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(denseMatrix0, basic2DMatrix1);
      assertNotSame(denseMatrix0, basic2DMatrix2);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertEquals(51, basic2DMatrix2.columns());
      assertEquals(51, basic2DMatrix2.rows());
      assertEquals(51, denseMatrix0.columns());
      assertEquals(51, denseMatrix0.rows());
      assertEquals(51, basic2DMatrix0.columns());
      assertEquals(51, basic2DMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(51, basic2DMatrix1.rows());
      assertEquals(51, basic2DMatrix1.columns());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.ensureApplicableTo(basic1DMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 48x35 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(3610);
      int int0 = 10;
      Random.setNextRandom(10);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(854);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(854, columnMajorSparseMatrix0.rows());
      assertEquals(854, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(854, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.00117096018735363, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      
      ooPlaceMatricesAddition0.ensureApplicableTo(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(854, columnMajorSparseMatrix0.rows());
      assertEquals(854, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(854, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.00117096018735363, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      
      ooPlaceMatricesAddition0.ensureApplicableTo(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(854, columnMajorSparseMatrix0.rows());
      assertEquals(854, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(854, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.00117096018735363, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      
      int int1 = 706;
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.iterator.CursorToRowMajorMatrixIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 17;
      double double0 = 1818.8368266744;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(17, 17, 1818.8368266744);
      assertNotNull(denseMatrix0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, matrix0.rows());
      assertEquals(17, matrix0.columns());
      
      Random.setNextRandom(3544);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      Random.setNextRandom(3544);
      int int1 = 5;
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.identity(5);
      assertNotNull(cRSMatrix0);
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix1.cardinality());
      assertEquals(0.2, cRSMatrix1.density(), 0.01);
      assertEquals(5, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(5, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      
      int int2 = (-1);
      long long0 = (-1515L);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cCSMatrix0, (SparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.iterator.CursorToColumnMajorMatrixIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      Random.setNextRandom((-450));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)ooPlaceMatricesAddition0.apply((ColumnMajorSparseMatrix) cCSMatrix1, columnMajorSparseMatrix0);
      assertNotNull(cCSMatrix2);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix1));
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix2);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix2);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix2, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) null, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 342.006836;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 672.2997371523313;
      doubleArray1[3] = 1570.44223819269;
      doubleArray1[4] = 2066.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(5, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, doubleArray0.length);
      
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(961, 961, doubleArray1);
      assertNotNull(denseMatrix1);
      assertEquals(961, denseMatrix1.columns());
      assertEquals(961, denseMatrix1.rows());
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {342.006836, 0.0, 672.2997371523313, 1570.44223819269, 2066.0}, doubleArray1, 0.01);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix1);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(5, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(961, denseMatrix1.columns());
      assertEquals(961, denseMatrix1.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(5, matrix0.columns());
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {342.006836, 0.0, 672.2997371523313, 1570.44223819269, 2066.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.zero(87, 87);
      assertNotNull(denseMatrix0);
      assertEquals(87, denseMatrix0.columns());
      assertEquals(87, denseMatrix0.rows());
      
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 87;
      doubleArray1[1] = (double) 87;
      doubleArray1[2] = (double) 87;
      doubleArray1[3] = (double) 87;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 87;
      doubleArray2[1] = (double) 87;
      doubleArray2[2] = (double) 87;
      doubleArray2[3] = (double) 87;
      doubleArray2[4] = (double) 87;
      doubleArray2[5] = (double) 87;
      doubleArray2[6] = (double) 87;
      doubleArray2[7] = (double) 87;
      doubleArray2[8] = (double) 87;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 87;
      doubleArray3[2] = (double) 87;
      doubleArray3[3] = (double) 87;
      doubleArray3[4] = (double) 87;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 87;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (double) 87;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 1817.21;
      doubleArray4[7] = (double) 87;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 87;
      doubleArray5[1] = (double) 87;
      doubleArray5[2] = 1817.21;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) 87;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) 87;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (double) 87;
      doubleArray6[3] = (double) 87;
      doubleArray6[4] = (double) 87;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (double) 87;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 1817.21;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1817.21;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1817.21;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = (double) 87;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 1817.21;
      doubleArray8[3] = (double) 87;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray8[7] = 1817.21;
      doubleArray0[7] = doubleArray8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1817.21, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.75, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(24, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(4, columnMajorSparseMatrix0.columns());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(8, doubleArray0.length);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(87, denseMatrix0.columns());
      assertEquals(87, denseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1817.21, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.75, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(24, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(4, columnMajorSparseMatrix0.columns());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertEquals(87, matrix0.rows());
      assertEquals(87, matrix0.columns());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.apply((DenseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.ensureApplicableTo((Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2777);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(2777, rowMajorSparseMatrix0.rows());
      assertEquals(3.6010082823190496E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2777, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2777, rowMajorSparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 2455;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2455, 2455, 2455);
      assertNotNull(denseMatrix0);
      assertEquals(2455, denseMatrix0.columns());
      assertEquals(2455, denseMatrix0.rows());
      
      // Undeclared exception!
      ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2230.9201813455484;
      doubleArray1[1] = 5341.562968960446;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1566.2813763426307;
      doubleArray1[4] = (-172.1086563);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1566.2813763426307;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1566.2813763426307;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-172.1086563);
      doubleArray4[1] = (-172.1086563);
      doubleArray4[2] = 2230.9201813455484;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 5341.562968960446;
      doubleArray5[1] = 2230.9201813455484;
      doubleArray5[2] = 2230.9201813455484;
      doubleArray5[3] = (-172.1086563);
      doubleArray5[4] = 5341.562968960446;
      doubleArray5[5] = (-172.1086563);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 2230.9201813455484;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1566.2813763426307;
      doubleArray7[1] = 1566.2813763426307;
      doubleArray7[2] = (-648.0544961083382);
      doubleArray7[3] = (-172.1086563);
      doubleArray7[4] = (-172.1086563);
      doubleArray7[5] = 2230.9201813455484;
      doubleArray7[6] = 1566.2813763426307;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = (-172.1086563);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-2419.3947);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = 5341.562968960446;
      doubleArray9[1] = 1566.2813763426307;
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(5, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(7, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, matrix0.rows());
      assertEquals(7, matrix0.columns());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 1, 7);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      
      Matrix matrix1 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotNull(matrix1);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(7, matrix1.columns());
      assertEquals(7, matrix1.rows());
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix1);
      assertSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(7, rowMajorSparseMatrix1.rows());
      assertEquals(1, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix1, rowMajorSparseMatrix1);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(7, rowMajorSparseMatrix1.rows());
      assertEquals(1, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix1));
      assertSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(7, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotNull(basic2DMatrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix0.equals((Object)matrix1));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(basic2DMatrix0.equals((Object)matrix1));
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(7, basic2DMatrix0.columns());
      assertEquals(7, basic2DMatrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(basic2DMatrix1);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertTrue(denseMatrix0.equals((Object)basic2DMatrix0));
      assertTrue(denseMatrix0.equals((Object)matrix1));
      assertFalse(basic2DMatrix1.equals((Object)matrix1));
      assertTrue(basic2DMatrix1.equals((Object)matrix0));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix1);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(basic2DMatrix1, matrix1);
      assertNotSame(basic2DMatrix1, matrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, basic2DMatrix1.columns());
      assertEquals(7, basic2DMatrix1.rows());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(6, 0, doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 6.0, 0.0, 0.0, 6.0, 6.0, 0.0, 6.0, 0.0}, doubleArray0, 0.01);
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(6, matrix0.rows());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 6.0, 0.0, 0.0, 6.0, 6.0, 0.0, 6.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0.0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1.0));
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)columnMajorSparseMatrix0.add((-1.0));
      assertNotNull(basic2DMatrix0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.constant(0, 0, 0);
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)DenseMatrix.block(columnMajorSparseMatrix0, cCSMatrix0, columnMajorSparseMatrix0, basic2DMatrix1);
      assertNotNull(basic2DMatrix2);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) basic2DMatrix2, (SparseMatrix) columnMajorSparseMatrix0);
      assertNotNull(cCSMatrix1);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      ooPlaceMatricesAddition0.ensureApplicableTo(columnMajorSparseMatrix0, cCSMatrix1);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix1));
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      Basic2DMatrix basic2DMatrix3 = (Basic2DMatrix)ooPlaceMatricesAddition0.applySymmetric((DenseMatrix) basic2DMatrix2, (SparseMatrix) columnMajorSparseMatrix0);
      assertNotNull(basic2DMatrix3);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix1));
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix2));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix3.equals((Object)basic2DMatrix2));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix3);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertNotSame(basic2DMatrix2, basic2DMatrix3);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix3, basic2DMatrix2);
      assertNotSame(basic2DMatrix3, basic2DMatrix1);
      assertNotSame(basic2DMatrix3, basic2DMatrix0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix2.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, basic2DMatrix3.rows());
      assertEquals(0, basic2DMatrix3.columns());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      String string0 = denseMatrix0.toString();
      assertNotNull(string0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals("", string0);
      
      String string1 = "\\Fz1";
      MatrixOperation<Matrix> matrixOperation0 = ooPlaceMatricesAddition0.partiallyApply(denseMatrix0);
      assertNotNull(matrixOperation0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) null, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 3047;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3047, 834, 2158);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2158);
      // Undeclared exception!
      ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2738, 0, 0);
      RowMajorSparseMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      ooPlaceMatricesAddition0.partiallyApply(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1882);
      // Undeclared exception!
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[0][1];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      denseMatrix0.mkString(numberFormat0);
      DenseMatrix.zero(17, 1775);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.fromCSV("");
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix1, (SparseMatrix) columnMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1775);
      // Undeclared exception!
      ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 293.47337141107084);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random.setNextRandom(184);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (double) 0;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      ooPlaceMatricesAddition0.apply(denseMatrix0, columnMajorSparseMatrix0);
      rowMajorSparseMatrix0.iteratorOfColumn(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.ensureApplicableTo(columnMajorSparseMatrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 2x8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(17, 17, 1818.8368266744);
      ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Random.setNextRandom(3544);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      Random.setNextRandom(3544);
      int int0 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int1 = (-1);
      MockRandom mockRandom0 = new MockRandom((-1515L));
      // Undeclared exception!
      try { 
        SparseMatrix.random((-1), 17, 1818.8368266744, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      denseMatrix0.toCSV();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.setRow((-903), 4691.997056668);
      Matrix.constant(2776, 2776, 100.0);
      Matrix matrix1 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      matrix1.product();
      ooPlaceMatricesAddition0.ensureApplicableTo(matrix0, rowMajorSparseMatrix0);
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ooPlaceMatricesAddition0.ensureApplicableTo(denseMatrix0, matrix1);
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(87, 87);
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 87;
      doubleArray1[1] = (double) 87;
      doubleArray1[3] = (double) 87;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 87;
      doubleArray2[1] = (double) 87;
      doubleArray2[2] = (double) 87;
      doubleArray2[3] = (double) 87;
      doubleArray2[4] = (double) 87;
      doubleArray2[5] = (double) 87;
      doubleArray2[6] = (double) 87;
      doubleArray2[7] = (double) 87;
      doubleArray2[8] = (double) 87;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 87;
      doubleArray3[2] = (double) 87;
      doubleArray3[3] = (double) 87;
      doubleArray3[4] = (double) 87;
      doubleArray0[2] = doubleArray3;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 87;
      doubleArray4[1] = (double) 87;
      doubleArray4[2] = 1817.4957840246614;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (double) 87;
      doubleArray4[5] = 0.0;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 87;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 87;
      doubleArray5[3] = (double) 87;
      doubleArray5[4] = (double) 87;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (double) 87;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 1817.4957840246614;
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 1817.4957840246614;
      doubleArray6[2] = (double) 87;
      doubleArray6[3] = 1817.4957840246614;
      doubleArray0[6] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (double) 87;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1817.4957840246614;
      doubleArray7[3] = (double) 87;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 1817.4957840246614;
      doubleArray0[7] = doubleArray7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(87, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      Random.setNextRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 1);
      ooPlaceMatricesAddition0.partiallyApply(rowMajorSparseMatrix0);
      int[] intArray0 = new int[9];
      intArray0[0] = 356;
      intArray0[1] = 1739;
      intArray0[2] = 356;
      intArray0[3] = 356;
      intArray0[4] = 356;
      intArray0[5] = 356;
      intArray0[8] = 356;
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 0.0);
      ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = null;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }
}
