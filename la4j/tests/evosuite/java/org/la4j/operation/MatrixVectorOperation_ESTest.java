/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:37:41 GMT 2021
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatrixVectorOperation_ESTest extends MatrixVectorOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, sparseVector0);
      assertNotSame(sparseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(6, 6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      DenseVector denseVector0 = DenseVector.unit(6);
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      assertEquals(6, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(75, (-33));
      DenseVector denseVector0 = DenseVector.zero(426);
      BasicVector basicVector0 = (BasicVector)ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, denseVector0);
      assertEquals(75, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom((-409L));
      SparseVector sparseVector0 = SparseVector.random(67, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-1834.98));
      VectorOperation<Vector> vectorOperation0 = ooPlaceMatrixByVectorMultiplication0.partiallyApply(denseMatrix0);
      assertNotNull(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      VectorOperation<Vector> vectorOperation0 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((ColumnMajorSparseMatrix) null);
      assertNotNull(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = denseMatrix0.multiply((Vector) sparseVector0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[9];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      VectorOperation<Vector> vectorOperation0 = ooPlaceMatrixByVectorMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      assertNotNull(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      CompressedVector compressedVector0 = (CompressedVector)columnMajorSparseMatrix0.multiply((Vector) sparseVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }
}
