/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:35:09 GMT 2021
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommonMatrixMatrixOperation_ESTest extends CommonMatrixMatrixOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 32;
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(32, 32, mockRandom0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (-2305.47635);
      doubleArray1[2] = (double) 32;
      doubleArray1[3] = (double) 32;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceKroneckerProduct0.apply(denseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(int1, int1);
      int int2 = 0;
      double[] doubleArray2 = null;
      DenseMatrix denseMatrix2 = DenseMatrix.from1DArray(int2, int1, doubleArray2);
      ooPlaceKroneckerProduct0.apply(denseMatrix1, denseMatrix2);
      int int3 = (-1067);
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) int3;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) int0;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(int0, int3, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-1067
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((ColumnMajorSparseMatrix) null, columnMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      DenseMatrix denseMatrix0 = null;
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-266.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 159.466378944133;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8, 8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix1.toRowMajorSparseMatrix();
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 8;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = (double) 8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 8;
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray6[4] = (double) 8;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 8;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = (double) 8;
      doubleArray7[4] = Double.NEGATIVE_INFINITY;
      doubleArray7[5] = (double) 0;
      doubleArray7[6] = 98.51304645;
      doubleArray7[7] = (double) 0;
      doubleArray7[8] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = 98.51304645;
      doubleArray8[2] = (double) 0;
      doubleArray8[3] = (double) 8;
      doubleArray8[4] = (double) 0;
      doubleArray8[5] = Double.NEGATIVE_INFINITY;
      doubleArray8[6] = 98.51304645;
      doubleArray8[7] = (double) 0;
      doubleArray8[8] = (double) 0;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.randomSymmetric(1, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(2, 1, (double) 1, (Random) mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((ColumnMajorSparseMatrix) null, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 2662;
      int int1 = 4002;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2662;
      doubleArray0[1] = (double) 2662;
      doubleArray0[2] = (double) 4002;
      doubleArray0[3] = (double) 2662;
      doubleArray0[4] = (double) 4002;
      doubleArray0[5] = (double) 4002;
      doubleArray0[6] = (double) 2662;
      doubleArray0[7] = (double) 4002;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2662, 4674, doubleArray0);
      // Undeclared exception!
      ooPlaceKroneckerProduct0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 387;
      Matrix.identity(387);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(387, 387);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(387, 387);
      // Undeclared exception!
      ooPlaceKroneckerProduct0.apply(denseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      double[] doubleArray0 = new double[7];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      ooPlaceKroneckerProduct0.partiallyApply(columnMajorSparseMatrix1);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix2 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((RowMajorSparseMatrix) null, columnMajorSparseMatrix2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      ooPlaceKroneckerProduct0.applyCommon(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = columnMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix2 = ColumnMajorSparseMatrix.identity(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix2.toRowMajorSparseMatrix();
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      RowMajorSparseMatrix.from2DArray(doubleArray1);
      ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix1, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.applyCommon(columnMajorSparseMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1081.1484760620642;
      doubleArray1[1] = (-431.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-431.0);
      doubleArray2[1] = (-431.0);
      doubleArray2[2] = (-431.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-431.0);
      doubleArray3[1] = 1081.1484760620642;
      doubleArray3[2] = (-431.0);
      doubleArray3[3] = (-431.0);
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 48, doubleArray2);
      ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.applyCommon((Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 3736;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((RowMajorSparseMatrix) null, (RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 37;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 37);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.forEach(consumer0);
      int int1 = (-1);
      DenseMatrix denseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-858);
      doubleArray1[1] = (double) (-858);
      doubleArray1[2] = (double) (-858);
      doubleArray1[3] = (double) (-858);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-858);
      doubleArray2[1] = (double) (-858);
      doubleArray2[2] = (double) (-858);
      doubleArray2[3] = (double) (-858);
      doubleArray2[4] = (double) (-858);
      doubleArray2[5] = (double) (-858);
      doubleArray2[6] = (double) (-858);
      doubleArray2[7] = (double) (-858);
      doubleArray2[8] = (double) (-858);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) (-858);
      doubleArray3[1] = (double) (-858);
      doubleArray3[2] = (double) (-858);
      doubleArray3[3] = (double) (-858);
      doubleArray3[4] = (double) (-858);
      doubleArray3[5] = (double) (-858);
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        DenseMatrix.constant((-858), 1673, (-858));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(1, 1, mockRandom0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (-2305.47635);
      doubleArray1[2] = (double) 32;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceKroneckerProduct0.apply(denseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(0, 0);
      DenseMatrix denseMatrix2 = DenseMatrix.from1DArray(0, 1336, (double[]) null);
      ooPlaceKroneckerProduct0.apply(denseMatrix1, denseMatrix2);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-1067);
      doubleArray2[1] = (double) 32;
      doubleArray2[2] = (double) 32;
      doubleArray2[3] = (double) 32;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(32, (-1067), doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-1067
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0.0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((DenseMatrix) null, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = (-1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      double double0 = 1239.60881986;
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((DenseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(matrix0, matrix0, rowMajorSparseMatrix0, matrix0);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      int int0 = 943;
      SparseMatrix.diagonal(943, 525.662896);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[][] doubleArray0 = new double[0][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix1, denseMatrix0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1627.4);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1.0);
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, denseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.fromCSV("");
      SparseMatrix sparseMatrix0 = columnMajorSparseMatrix1.toSparseMatrix();
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(sparseMatrix0, columnMajorSparseMatrix1);
      assertNotSame(matrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, denseMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("org.la4j.operation.VectorVectorOperation$1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = (double) 1;
      doubleArray3[7] = (double) 1;
      doubleArray3[8] = (double) 1;
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceKroneckerProduct0.apply(denseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.diagonal((-128), (-128));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix0 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      int int0 = 753;
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector.unit(753);
      Random random0 = null;
      int int1 = 0;
      double double0 = 6778.60331522235;
      rowMajorSparseMatrix0.nonZeroIteratorOfRow(0);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      RowMajorSparseMatrix.zero(0, 0);
      // Undeclared exception!
      try { 
        DenseMatrix.zero((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(735, 0, (-3263.012740874));
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, denseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.block(matrix0, matrix0, matrix0, denseMatrix0);
      denseMatrix1.infinityNorm();
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply(denseMatrix1, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-266.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 159.466378944133;
      doubleArray1[6] = (-647.268796);
      doubleArray1[7] = 100.0;
      doubleArray1[8] = 1281.632;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((DenseMatrix) null, columnMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) null, 1742, 1742, 1742, 3332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1742, 1742
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2014);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2014, (-627.6224044));
      // Undeclared exception!
      ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.zero(3332, 3332);
      ooPlaceKroneckerProduct0.applyCommon(columnMajorSparseMatrix0, cCSMatrix0);
      ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix0, (DenseMatrix) basic2DMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) null, 1742, 1742, 1742, 3332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1742, 1742
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      NumberFormat.getNumberInstance();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[1][1];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      rowMajorSparseMatrix0.add(1.0);
      ooPlaceKroneckerProduct0.applyCommon(cRSMatrix0, cRSMatrix0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceKroneckerProduct0.apply((DenseMatrix) null, (ColumnMajorSparseMatrix) cCSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceKroneckerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1055);
      // Undeclared exception!
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(1, 1, mockRandom0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (-2305.47635);
      doubleArray1[2] = (double) 32;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceKroneckerProduct0.apply(denseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(0, 0);
      DenseMatrix denseMatrix2 = DenseMatrix.from1DArray(32, 1, (double[]) null);
      ooPlaceKroneckerProduct0.apply(denseMatrix1, denseMatrix2);
      double[] doubleArray2 = new double[4];
      doubleArray2[2] = (double) 32;
      doubleArray2[3] = (double) 32;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(32, (-1067), doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-1067
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-5829.9669);
      doubleArray1[1] = (-5829.9669);
      doubleArray1[2] = (-3089.7609);
      doubleArray1[3] = (-1570.4209);
      doubleArray1[4] = (-3089.7609);
      doubleArray1[6] = (-5823.38295115594);
      doubleArray1[7] = (-1569.56688);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2596.10497);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(2433);
      // Undeclared exception!
      DenseMatrix.random(1197, 2433, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      // Undeclared exception!
      try { 
        SparseMatrix.diagonal((-7), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix1.toRowMajorSparseMatrix();
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray2;
      double[] doubleArray4 = new double[0];
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = (double) 0;
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = (double) 0;
      doubleArray6[6] = 98.51304645;
      doubleArray0[6] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[1] = 98.51304645;
      doubleArray7[2] = (double) 0;
      doubleArray7[3] = (double) 0;
      doubleArray7[5] = (double) 0;
      doubleArray7[6] = 98.51304645;
      doubleArray7[8] = (double) 0;
      doubleArray0[7] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, denseMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(21, 1000, (-950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -950.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
