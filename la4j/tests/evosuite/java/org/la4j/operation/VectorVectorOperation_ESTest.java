/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:38:59 GMT 2021
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VectorVectorOperation_ESTest extends VectorVectorOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      VectorOperation<Vector> vectorOperation0 = ooPlaceVectorsAddition0.partiallyApply(denseVector0);
      assertNotNull(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(0, (-2271.90564));
      Vector vector0 = denseVector0.add((Vector) denseVector0);
      assertNotSame(denseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(0, mockRandom0);
      ooPlaceInnerProduct0.apply(sparseVector0, sparseVector0);
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      ooPlaceInnerProduct0.apply(denseVector0, denseVector0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector1 = denseVector0.toSparseVector();
      ooPlaceVectorHadamardProduct0.apply(sparseVector1, sparseVector1);
      DenseVector denseVector1 = denseVector0.toDenseVector();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector2 = SparseVector.fromMap(hashMap0, 1);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply(denseVector1, sparseVector2);
      ooPlaceVectorHadamardProduct0.apply(denseVector1, denseVector1);
      compressedVector0.iterator();
      sparseVector1.nonZeroIterator();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      VectorOperation<Matrix> vectorOperation0 = ooPlaceOuterProduct0.partiallyApply((SparseVector) null);
      assertNotNull(vectorOperation0);
  }
}
