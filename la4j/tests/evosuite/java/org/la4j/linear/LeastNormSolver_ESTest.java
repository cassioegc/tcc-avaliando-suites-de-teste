/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:25:17 GMT 2021
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.LeastNormSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeastNormSolver_ESTest extends LeastNormSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      leastNormSolver0.applicableTo(matrix0);
      sparseVector0.toRowMatrix();
      Matrix matrix1 = null;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        leastNormSolver0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.LeastNormSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray1);
      leastNormSolver0.applicableTo(rowMajorSparseMatrix0);
      Random.setNextRandom(988);
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      SparseVector.random(1, (double) 1, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        Vector.constant((-688), (-1.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3189;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(3189, 3189);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 1);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(columnMajorSparseMatrix0);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        leastNormSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3844.8794;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 678.39379277744;
      doubleArray0[4] = (-1.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      LeastNormSolver leastNormSolver0 = null;
      try {
        leastNormSolver0 = new LeastNormSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(988, 0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(denseMatrix0);
      boolean boolean0 = leastNormSolver0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      sparseMatrix0.min();
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(sparseMatrix0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1219));
      linkedList0.addFirst(integer0);
      Integer integer1 = new Integer((-1219));
      linkedList0.addFirst(integer1);
      leastNormSolver0.unknowns = (-1219);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      SparseVector.zero(0);
      linkedList0.removeFirst();
      sparseVector0.isZeroAt(0);
      // Undeclared exception!
      try { 
        leastNormSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 2.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(6);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(denseMatrix0);
      assertEquals(6, leastNormSolver0.unknowns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 3139;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3139);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-453.88316540992);
      doubleArray1[1] = 1753.570675206;
      doubleArray1[2] = (-2499.004822357032);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1753.570675206;
      doubleArray2[1] = 1753.570675206;
      doubleArray2[2] = (-2499.004822357032);
      doubleArray2[3] = (-2499.004822357032);
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      LeastNormSolver leastNormSolver0 = null;
      try {
        leastNormSolver0 = new LeastNormSolver(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(0);
      ooPlaceOuterProduct0.ensureApplicableTo(sparseVector0, sparseVector0);
      MockRandom mockRandom0 = new MockRandom(0);
      DenseVector denseVector0 = DenseVector.random(2334, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      Vector vector0 = sparseVector0.add(1053.6069065677);
      vector0.product();
      leastNormSolver0.solve(vector0);
      leastNormSolver0.applicableTo(matrix0);
      Vector vector1 = leastNormSolver0.solve(sparseVector0);
      vector1.toMatrixMarket();
      // Undeclared exception!
      try { 
        leastNormSolver0.solve(vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 2334.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = null;
      LeastNormSolver leastNormSolver0 = null;
      try {
        leastNormSolver0 = new LeastNormSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.LeastNormSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 6);
      LeastNormSolver leastNormSolver0 = null;
      try {
        leastNormSolver0 = new LeastNormSolver(sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      CompressedVector compressedVector0 = (CompressedVector)leastNormSolver0.solve(sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(0);
      ooPlaceOuterProduct0.ensureApplicableTo(sparseVector0, sparseVector0);
      MockRandom mockRandom0 = new MockRandom(0);
      DenseVector denseVector0 = DenseVector.random(2334, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      Vector vector0 = sparseVector0.add((double) 0);
      vector0.product();
      leastNormSolver0.solve(vector0);
      leastNormSolver0.applicableTo(matrix0);
      Vector vector1 = leastNormSolver0.solve(sparseVector0);
      vector1.toMatrixMarket();
      // Undeclared exception!
      try { 
        leastNormSolver0.solve(vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 2334.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1752.586002615;
      doubleArray0[6] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      LeastNormSolver leastNormSolver0 = null;
      try {
        leastNormSolver0 = new LeastNormSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      denseVector0.toDiagonalMatrix();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      // Undeclared exception!
      try { 
        leastNormSolver0.ensureRHSIsCorrect(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 0.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-372L));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(1, 1, (double) 1, (java.util.Random) mockRandom0);
      LeastNormSolver leastNormSolver0 = null;
      try {
        leastNormSolver0 = new LeastNormSolver(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1971);
      boolean boolean0 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate1).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate1);
      int int0 = 8;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(int0, vectorProcedure0);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.close();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
