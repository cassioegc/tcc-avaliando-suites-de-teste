/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:09:20 GMT 2021
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.SeidelSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SeidelSolver_ESTest extends SeidelSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, 5);
      SeidelSolver seidelSolver0 = new SeidelSolver(columnMajorSparseMatrix0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.constant(5, 100.0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      seidelSolver0.solve(vector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(28);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      SeidelSolver seidelSolver0 = new SeidelSolver(matrix0);
      matrix0.setAll(28);
      seidelSolver0.applicableTo(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(28);
      seidelSolver0.solve(sparseVector0);
      seidelSolver0.solve(sparseVector0);
      CompressedVector compressedVector0 = (CompressedVector)seidelSolver0.solve(sparseVector0);
      seidelSolver0.solve(compressedVector0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      seidelSolver0.solve(sparseVector0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      BasicVector basicVector0 = (BasicVector)DenseVector.unit(28);
      BasicVector basicVector1 = (BasicVector)ooPlaceVectorsAddition0.applySymmetric(basicVector0, compressedVector0);
      // Undeclared exception!
      seidelSolver0.solve(basicVector1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      SeidelSolver seidelSolver0 = new SeidelSolver(matrix0);
      seidelSolver0.a = matrix0;
      matrix0.setAll(1);
      seidelSolver0.applicableTo(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(1);
      seidelSolver0.solve(sparseVector0);
      Vector vector0 = seidelSolver0.solve(sparseVector0);
      Vector vector1 = seidelSolver0.solve(sparseVector0);
      seidelSolver0.solve(vector1);
      seidelSolver0.applicableTo(denseMatrix0);
      seidelSolver0.solve(vector0);
      Vector vector2 = Vector.unit(1);
      Random.setNextRandom((-883));
      seidelSolver0.solve(vector2);
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("org.la4j.linear.SeidelSolver");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(22);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      SeidelSolver seidelSolver0 = new SeidelSolver(matrix0);
      matrix0.setAll(22);
      seidelSolver0.applicableTo(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(22);
      seidelSolver0.solve(sparseVector0);
      seidelSolver0.solve(sparseVector0);
      Vector vector0 = seidelSolver0.solve(sparseVector0);
      seidelSolver0.solve(vector0);
      seidelSolver0.applicableTo(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      SeidelSolver seidelSolver0 = new SeidelSolver(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        seidelSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1710;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1710;
      doubleArray0[1] = (double) 1710;
      doubleArray0[2] = (double) 1710;
      doubleArray0[3] = (double) 1710;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1710, 1710, doubleArray0);
      SeidelSolver seidelSolver0 = null;
      try {
        seidelSolver0 = new SeidelSolver(denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      SeidelSolver seidelSolver0 = new SeidelSolver(sparseMatrix0);
      Vector vector0 = Vector.zero(0);
      seidelSolver0.solve(vector0);
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(37, 0);
      Matrix.identity(0);
      seidelSolver0.applicableTo(sparseMatrix1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.blankOfShape(37, (-1948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 37x-1948
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      SeidelSolver seidelSolver0 = new SeidelSolver(sparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      sparseMatrix0.toCSV((NumberFormat) null);
      seidelSolver0.equations = 0;
      Matrix matrix0 = sparseMatrix0.multiply((-3613.37726));
      Object object0 = new Object();
      matrix0.equals(object0);
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      matrix0.blank();
      seidelSolver0.solve(sparseVector0);
      seidelSolver0.applicableTo(sparseMatrix0);
      seidelSolver0.applicableTo(matrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      SeidelSolver seidelSolver0 = new SeidelSolver(sparseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(4, 1, doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(0, 4);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        seidelSolver0.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 4.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1188;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1188);
      SeidelSolver seidelSolver0 = new SeidelSolver(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix matrix0 = null;
      SeidelSolver seidelSolver0 = null;
      try {
        seidelSolver0 = new SeidelSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.SeidelSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2773;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2773;
      doubleArray0[6] = (-332.513);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 2773;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(2773, 0, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      SeidelSolver seidelSolver0 = null;
      try {
        seidelSolver0 = new SeidelSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      SeidelSolver seidelSolver0 = new SeidelSolver(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SeidelSolver seidelSolver0 = null;
      try {
        seidelSolver0 = new SeidelSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.SeidelSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(22);
      SeidelSolver seidelSolver0 = new SeidelSolver(denseMatrix0);
      seidelSolver0.a = (Matrix) denseMatrix0;
      Vector vector0 = Vector.unit(22);
      Random.setNextRandom((-883));
      Vector vector1 = seidelSolver0.solve(vector0);
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Random.setNextRandom((-1142));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
  }
}
