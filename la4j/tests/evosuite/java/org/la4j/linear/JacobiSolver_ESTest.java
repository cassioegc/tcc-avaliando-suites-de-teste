/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:05:46 GMT 2021
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.JacobiSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JacobiSolver_ESTest extends JacobiSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4195.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      jacobiSolver0.solve(sparseVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      jacobiSolver0.solve(sparseVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4195.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      jacobiSolver0.applicableTo(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      JacobiSolver jacobiSolver0 = new JacobiSolver(denseMatrix0);
      // Undeclared exception!
      try { 
        jacobiSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(4);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      double[] doubleArray0 = new double[4];
      jacobiSolver0.unknowns = (-2290);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        jacobiSolver0.solve(denseVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      JacobiSolver jacobiSolver0 = new JacobiSolver(sparseMatrix0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.offerLast(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        jacobiSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 1.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4195.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      // Undeclared exception!
      try { 
        jacobiSolver0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.JacobiSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4059, 4059);
      JacobiSolver jacobiSolver0 = new JacobiSolver(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.JacobiSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("  ");
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Matrix matrix0 = Matrix.from1DArray(2239, 2239, doubleArray0);
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(4);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Vector vector0 = jacobiSolver0.solve(denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotSame(vector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      JacobiSolver jacobiSolver0 = new JacobiSolver(denseMatrix0);
      boolean boolean0 = jacobiSolver0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }
}
