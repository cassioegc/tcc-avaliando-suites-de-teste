/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:24:19 GMT 2021
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.ForwardBackSubstitutionSolver;
import org.la4j.linear.GaussianSolver;
import org.la4j.linear.JacobiSolver;
import org.la4j.linear.LeastNormSolver;
import org.la4j.linear.LeastSquaresSolver;
import org.la4j.linear.SeidelSolver;
import org.la4j.linear.SquareRootSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSolver_ESTest extends AbstractSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(5, 5);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(sparseMatrix0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        squareRootSolver0.ensureRHSIsCorrect(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 0.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(columnMajorSparseMatrix0);
      squareRootSolver0.equations = 4533;
      int int0 = squareRootSolver0.unknowns();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      Vector vector0 = Vector.constant(0, (-2091.19));
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(denseMatrix0);
      squareRootSolver0.ensureRHSIsCorrect(vector0);
      assertEquals(0, squareRootSolver0.unknowns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2);
      SeidelSolver seidelSolver0 = new SeidelSolver(rowMajorSparseMatrix0);
      int int0 = seidelSolver0.unknowns();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2);
      SeidelSolver seidelSolver0 = new SeidelSolver(rowMajorSparseMatrix0);
      Matrix matrix0 = seidelSolver0.self();
      assertEquals(2, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      int int0 = jacobiSolver0.equations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 3214.44246);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(denseMatrix0);
      // Undeclared exception!
      try { 
        forwardBackSubstitutionSolver0.ensureRHSIsCorrect((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(375);
      Matrix matrix0 = denseVector0.toRowMatrix();
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      // Undeclared exception!
      try { 
        leastNormSolver0.ensureRHSIsCorrect(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 375.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(1, 0, mockRandom0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      int int0 = leastSquaresSolver0.equations();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix denseMatrix0 = DenseMatrix.random(1, 0, mockRandom0);
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(matrix0);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.fail(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(matrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)leastSquaresSolver0.self();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }
}
