/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:03:38 GMT 2021
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.SweepSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SweepSolver_ESTest extends SweepSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 41;
      Matrix matrix0 = Matrix.constant(41, 41, 0.0);
      matrix0.toString();
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(41, 41, 0.0);
      int int1 = 0;
      denseMatrix0.blankOfRows(41);
      SparseVector sparseVector0 = SparseVector.zero(0);
      denseMatrix0.setRow(0, (-1.0));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      // Undeclared exception!
      sweepSolver0.solve(vector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(20, 20, 0.0);
      matrix0.toString();
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(20);
      ooPlaceMatrixByVectorMultiplication0.partiallyApply(columnMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(20, 20, 0.0);
      int int0 = 0;
      denseMatrix0.blankOfRows(20);
      SparseVector sparseVector0 = SparseVector.zero(0);
      denseMatrix0.setRow(0, (-1.0));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      Vector vector1 = sweepSolver0.solve(vector0);
      sweepSolver0.applicableTo(denseMatrix0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sweepSolver0.solve(vector1);
      sweepSolver0.applicableTo(denseMatrix0);
      sweepSolver0.applicableTo(denseMatrix0);
      // Undeclared exception!
      try { 
        sweepSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 0.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(68, 68);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      // Undeclared exception!
      sweepSolver0.applicableTo(matrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 13;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(13, 13, doubleArray0);
      SweepSolver sweepSolver0 = null;
      try {
        sweepSolver0 = new SweepSolver(denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1, 1, 0.0);
      matrix0.toString();
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, 0.0);
      denseMatrix0.blankOfRows(1);
      SparseVector sparseVector0 = SparseVector.zero(0);
      denseMatrix0.setRow(0, (-1.0));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      Vector vector1 = sweepSolver0.solve(vector0);
      sweepSolver0.applicableTo(denseMatrix0);
      sweepSolver0.applicableTo(matrix0);
      sweepSolver0.solve(vector1);
      sweepSolver0.applicableTo(denseMatrix0);
      sweepSolver0.applicableTo(denseMatrix0);
      // Undeclared exception!
      try { 
        sweepSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 0.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      sweepSolver0.solve(denseVector0);
      MockRandom mockRandom0 = new MockRandom();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        Vector.random((-502), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 534;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(534, 534);
      SweepSolver sweepSolver0 = new SweepSolver(columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = null;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      columnMajorSparseMatrix0.mkString("H'", "m4.'");
      columnMajorSparseMatrix0.transformRow(16, vectorFunction0);
      ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) null, (SparseMatrix) columnMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) null, (SparseMatrix) columnMajorSparseMatrix1);
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      sweepSolver0.applicableTo(matrix0);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        sweepSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      sweepSolver0.applicableTo(matrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3044;
      DenseVector denseVector0 = DenseVector.zero(3044);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      SweepSolver sweepSolver0 = null;
      try {
        sweepSolver0 = new SweepSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix matrix0 = null;
      SweepSolver sweepSolver0 = null;
      try {
        sweepSolver0 = new SweepSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.SweepSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      Vector vector0 = Vector.zero(0);
      sweepSolver0.solve(vector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 1937, 0);
      SweepSolver sweepSolver0 = new SweepSolver(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(30, 30, 0.0);
      matrix0.toString();
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(30, 30, 0.0);
      denseMatrix0.blankOfRows(30);
      SparseVector sparseVector0 = SparseVector.zero(0);
      denseMatrix0.setRow(0, (-1.0));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      sweepSolver0.applicableTo(denseMatrix0);
      sweepSolver0.applicableTo(matrix0);
      sweepSolver0.solve(vector0);
      sweepSolver0.applicableTo(denseMatrix0);
      sweepSolver0.applicableTo(denseMatrix0);
      // Undeclared exception!
      try { 
        sweepSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 0.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }
}
