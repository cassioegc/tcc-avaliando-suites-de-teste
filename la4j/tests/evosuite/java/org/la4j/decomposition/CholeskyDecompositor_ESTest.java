/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:04:40 GMT 2021
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.CholeskyDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CholeskyDecompositor_ESTest extends CholeskyDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 6);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      choleskyDecompositor0.decompose();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      Matrix matrix0 = denseMatrix0.blankOfRows(3);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
      choleskyDecompositor0.matrix = matrix0;
      // Undeclared exception!
      try { 
        choleskyDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      Matrix matrix0 = Matrix.identity(1000);
      // Undeclared exception!
      choleskyDecompositor0.applicableTo(matrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecompositor0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.CholeskyDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3231, 3231, 3231);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.CholeskyDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(32, 32, doubleArray0);
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
      boolean boolean0 = choleskyDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 2559);
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
      boolean boolean0 = choleskyDecompositor0.applicableTo(columnMajorSparseMatrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      Matrix matrix0 = Matrix.randomSymmetric(3, mockRandom0);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
      boolean boolean0 = choleskyDecompositor0.applicableTo(matrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(12, 12);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix1 = DenseMatrix.random(12, 12, mockRandom0);
      boolean boolean0 = choleskyDecompositor0.applicableTo(denseMatrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      Matrix matrix0 = denseMatrix0.blankOfRows(3);
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }
}
