/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:57:59 GMT 2021
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.RawQRDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RawQRDecompositor_ESTest extends RawQRDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, 1.1102230246251565E-14);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(matrix0);
      rawQRDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3575);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(denseMatrix0);
      // Undeclared exception!
      rawQRDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = Matrix.from1DArray(5, 5, (double[]) null);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(matrix0);
      // Undeclared exception!
      try { 
        rawQRDecompositor0.decompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[2];
      doubleArray0[4] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(denseMatrix0);
      // Undeclared exception!
      try { 
        rawQRDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        rawQRDecompositor0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawQRDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RawQRDecompositor rawQRDecompositor0 = null;
      try {
        rawQRDecompositor0 = new RawQRDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawQRDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 1516);
      RawQRDecompositor rawQRDecompositor0 = null;
      try {
        rawQRDecompositor0 = new RawQRDecompositor(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(sparseMatrix0);
      boolean boolean0 = rawQRDecompositor0.applicableTo(sparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(6, 6, 1.0, (Random) mockRandom0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(rowMajorSparseMatrix0);
      Matrix matrix0 = Matrix.zero(6, 682);
      boolean boolean0 = rawQRDecompositor0.applicableTo(matrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(sparseMatrix0);
      rawQRDecompositor0.decompose();
      assertEquals(0.25, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 6);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = rawQRDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }
}
