/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:53:51 GMT 2021
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.RawLUDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RawLUDecompositor_ESTest extends RawLUDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(16, 16, 16);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(columnMajorSparseMatrix0);
      rawLUDecompositor0.matrix = null;
      // Undeclared exception!
      try { 
        rawLUDecompositor0.decompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawLUDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-69.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.0;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = 2544.147682;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
      rawLUDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      rawLUDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom((-17L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(4, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4, (-17L));
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
      rawLUDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(0, 0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(basic2DMatrix0);
      rawLUDecompositor0.decompose();
      rawLUDecompositor0.applicableTo(basic2DMatrix0);
      rawLUDecompositor0.applicableTo(basic2DMatrix0);
      rawLUDecompositor0.decompose();
      rawLUDecompositor0.applicableTo(basic2DMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      MockRandom mockRandom0 = new MockRandom(1823L);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.randomSymmetric(13, 0.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      rawLUDecompositor0.matrix = (Matrix) cCSMatrix1;
      rawLUDecompositor0.applicableTo(basic2DMatrix0);
      rawLUDecompositor0.decompose();
      rawLUDecompositor0.applicableTo(basic2DMatrix0);
      org.evosuite.runtime.Random.setNextRandom(0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix2 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      rawLUDecompositor0.applicableTo(cCSMatrix2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-69.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = 2544.147682;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
      rawLUDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      sparseMatrix0.isColumnMajor();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      sparseMatrix0.fold(matrixAccumulator0);
      sparseMatrix0.toColumnVector();
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(sparseMatrix0);
      rawLUDecompositor0.decompose();
      String string0 = "'y,g";
      // Undeclared exception!
      try { 
        rawLUDecompositor0.fail("'y,g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'y,g
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(32, 32);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 4211;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4211);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(columnMajorSparseMatrix0);
      // Undeclared exception!
      rawLUDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matrix matrix0 = Matrix.random(2, 0, (Random) null);
      RawLUDecompositor rawLUDecompositor0 = null;
      try {
        rawLUDecompositor0 = new RawLUDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-948.6094664);
      doubleArray1[1] = 3302.7049431324;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-948.6094664);
      doubleArray2[1] = (-2740.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2740.0);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      RawLUDecompositor rawLUDecompositor0 = null;
      try {
        rawLUDecompositor0 = new RawLUDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(4, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4, 0L);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
      Matrix[] matrixArray0 = rawLUDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = rawLUDecompositor0.decompose();
      Matrix[] matrixArray1 = rawLUDecompositor0.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(284, 284);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(columnMajorSparseMatrix0);
      boolean boolean0 = rawLUDecompositor0.applicableTo(columnMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 2656);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matrix matrix0 = null;
      RawLUDecompositor rawLUDecompositor0 = null;
      try {
        rawLUDecompositor0 = new RawLUDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawLUDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RawLUDecompositor rawLUDecompositor0 = null;
      try {
        rawLUDecompositor0 = new RawLUDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawLUDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(matrix0);
      rawLUDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      Matrix[] matrixArray0 = rawLUDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(16, 16, 16);
      RawLUDecompositor rawLUDecompositor0 = new RawLUDecompositor(columnMajorSparseMatrix0);
      rawLUDecompositor0.decompose();
      RawLUDecompositor rawLUDecompositor1 = new RawLUDecompositor(columnMajorSparseMatrix0);
      rawLUDecompositor1.decompose();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      RawLUDecompositor rawLUDecompositor2 = new RawLUDecompositor(matrix0);
      rawLUDecompositor2.applicableTo(columnMajorSparseMatrix0);
  }
}
