/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:30:58 GMT 2021
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.CholeskyDecompositor;
import org.la4j.decomposition.RawLUDecompositor;
import org.la4j.decomposition.RawQRDecompositor;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDecompositor_ESTest extends AbstractDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(sparseMatrix0);
      Matrix matrix0 = singularValueDecompositor0.self();
      assertEquals(0.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(matrix0);
      // Undeclared exception!
      try { 
        rawQRDecompositor0.fail("Ik-O`o]wg1KN)<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ik-O`o]wg1KN)<
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 16, doubleArray0);
      RawLUDecompositor rawLUDecompositor0 = null;
      try {
        rawLUDecompositor0 = new RawLUDecompositor(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(matrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)choleskyDecompositor0.self();
      assertEquals(0, cRSMatrix0.cardinality());
  }
}
