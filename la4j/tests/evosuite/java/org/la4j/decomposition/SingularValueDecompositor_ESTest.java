/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:29:35 GMT 2021
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(13, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        singularValueDecompositor0.fail("^~'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^~'
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DenseMatrix denseMatrix0 = DenseMatrix.identity(16);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      denseMatrix0.blank();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.applicableTo(denseMatrix0);
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((-1517));
      assertNotNull(integer1);
      assertEquals((-1517), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertNull(integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 48);
      assertNotNull(denseVector0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotNull(matrix0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      assertEquals(48, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      assertEquals(48, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      assertEquals(48, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(3, matrixArray0.length);
      
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray1);
      assertNotSame(matrixArray1, matrixArray0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      assertEquals(48, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertFalse(matrixArray1.equals((Object)matrixArray0));
      assertEquals(3, matrixArray1.length);
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      assertEquals(48, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      Matrix matrix1 = Matrix.fromCSV("");
      assertNotNull(matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      
      boolean boolean1 = singularValueDecompositor0.applicableTo(matrix1);
      assertTrue(boolean1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(48, denseVector0.length());
      assertEquals(48, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertFalse(matrix0.equals((Object)matrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1776);
      intArray0[1] = (-1517);
      intArray0[2] = 48;
      intArray0[3] = 1;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-1441.23974543);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      singularValueDecompositor0.matrix = matrix1;
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.matrix = matrix0;
      singularValueDecompositor0.applicableTo(matrix0);
      singularValueDecompositor0.applicableTo(matrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix matrix0 = null;
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor((Matrix) null);
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.SingularValueDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3388;
      double double0 = (-7806.5153529);
      Matrix matrix0 = Matrix.diagonal(3388, (-7806.5153529));
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        singularValueDecompositor0.fail("^~'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^~'
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 1087;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1087, 1087);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 7;
      int int1 = 0;
      Matrix matrix0 = Matrix.unit(7, 0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.applicableTo(matrix0);
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix.identity(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1766, (-1994.646479));
      rowMajorSparseMatrix0.add((-1994.646479));
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 28;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hyx:Eo.ga8Ngx");
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(28);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      
      boolean boolean1 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean1);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      assertFalse(boolean1 == boolean0);
      
      double double0 = matrix0.trace();
      assertEquals(13.200000000000001, double0, 0.01);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      
      singularValueDecompositor0.matrix = matrix0;
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      assertEquals(28, singularValueDecompositor0.matrix.rows());
      assertEquals(28, singularValueDecompositor0.matrix.columns());
      
      Random.setNextRandom(28);
      boolean boolean2 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean2);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 28;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hyx:Eo.ga8Ngx");
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(28);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      
      boolean boolean1 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean1);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(28);
      assertNotNull(integer0);
      assertEquals(28, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Random.setNextRandom(28);
      boolean boolean2 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean2);
      assertEquals(28, matrix0.rows());
      assertEquals(28, matrix0.columns());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1916, 0);
      assertNotNull(sparseMatrix0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(1916, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      assertNotNull(cCSMatrix0);
      assertSame(sparseMatrix0, cCSMatrix0);
      assertSame(cCSMatrix0, sparseMatrix0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(1916, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1916, cCSMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(cCSMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(1916, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1916, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        singularValueDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1441.23974543);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }
}
