/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:08:05 GMT 2021
 */

package org.la4j.inversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.inversion.NoPivotGaussInverter;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoPivotGaussInverter_ESTest extends NoPivotGaussInverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 4.9E-324);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8, 8);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(matrix0);
      // Undeclared exception!
      try { 
        noPivotGaussInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This matrix cannot be inverted with a non-pivoting Gauss elimination method.
         //
         verifyException("org.la4j.inversion.NoPivotGaussInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Matrix matrix0 = sparseVector0.toRowMatrix();
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(matrix0);
      // Undeclared exception!
      try { 
        noPivotGaussInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix size: rows != columns
         //
         verifyException("org.la4j.inversion.NoPivotGaussInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter((Matrix) null);
      Matrix matrix0 = noPivotGaussInverter0.self();
      assertNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(columnMajorSparseMatrix0);
      Matrix matrix0 = noPivotGaussInverter0.self();
      assertSame(columnMajorSparseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(matrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)noPivotGaussInverter0.inverse();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2570);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(columnMajorSparseMatrix0);
      // Undeclared exception!
      noPivotGaussInverter0.inverse();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter((Matrix) null);
      // Undeclared exception!
      try { 
        noPivotGaussInverter0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.inversion.NoPivotGaussInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(denseMatrix0);
      // Undeclared exception!
      try { 
        noPivotGaussInverter0.inverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        noPivotGaussInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This matrix cannot be inverted with a non-pivoting Gauss elimination method.
         //
         verifyException("org.la4j.inversion.NoPivotGaussInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(denseMatrix0);
      // Undeclared exception!
      try { 
        noPivotGaussInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix size: rows != columns
         //
         verifyException("org.la4j.inversion.NoPivotGaussInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(13, 13);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(rowMajorSparseMatrix0);
      Matrix matrix0 = noPivotGaussInverter0.inverse();
      assertEquals(0.07692307692307693, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(13, 13);
      NoPivotGaussInverter noPivotGaussInverter0 = new NoPivotGaussInverter(rowMajorSparseMatrix0);
      Matrix matrix0 = noPivotGaussInverter0.self();
      assertEquals(13, matrix0.rows());
  }
}
