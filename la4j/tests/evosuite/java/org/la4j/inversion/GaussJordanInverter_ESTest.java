/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:29:34 GMT 2021
 */

package org.la4j.inversion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.inversion.GaussJordanInverter;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussJordanInverter_ESTest extends GaussJordanInverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-277L));
      DenseVector denseVector0 = DenseVector.random(1583, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(matrix0);
      // Undeclared exception!
      try { 
        gaussJordanInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix size: rows != columns
         //
         verifyException("org.la4j.inversion.GaussJordanInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter((Matrix) null);
      Matrix matrix0 = gaussJordanInverter0.self();
      assertNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(0, 583, doubleArray0);
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(matrix0);
      Matrix matrix1 = gaussJordanInverter0.self();
      assertSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(matrix0);
      Matrix matrix1 = gaussJordanInverter0.self();
      assertEquals(1, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(sparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)gaussJordanInverter0.inverse();
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter((Matrix) null);
      // Undeclared exception!
      try { 
        gaussJordanInverter0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.inversion.GaussJordanInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1728, 1728, doubleArray0);
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(denseMatrix0);
      // Undeclared exception!
      try { 
        gaussJordanInverter0.inverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(matrix0);
      // Undeclared exception!
      try { 
        gaussJordanInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix size: rows != columns
         //
         verifyException("org.la4j.inversion.GaussJordanInverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(9, 9);
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(rowMajorSparseMatrix0);
      gaussJordanInverter0.inverse();
      // Undeclared exception!
      gaussJordanInverter0.inverse();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 1);
      GaussJordanInverter gaussJordanInverter0 = new GaussJordanInverter(sparseMatrix0);
      // Undeclared exception!
      try { 
        gaussJordanInverter0.inverse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This matrix is not invertible.
         //
         verifyException("org.la4j.inversion.GaussJordanInverter", e);
      }
  }
}
