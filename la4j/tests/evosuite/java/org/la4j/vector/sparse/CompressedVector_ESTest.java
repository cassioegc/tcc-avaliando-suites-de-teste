/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:33:56 GMT 2021
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SyncFailedException;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-465.1096);
      doubleArray0[1] = (-527.6006);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      doubleArray0[2] = 3018.8381766;
      doubleArray0[3] = 4671.65;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      compressedVector0.updateAt((-2145068845), vectorFunction0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blank();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(6, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      double double1 = compressedVector0.sum();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(0.0, double1, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      
      int int0 = (-1749);
      // Undeclared exception!
      try { 
        CompressedVector.random((-1749), (-888.3), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.zero(23);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(23, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = CompressedVector.zero(565);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(565, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      int int0 = 2147483646;
      // Undeclared exception!
      try { 
        CompressedVector.zero(2147483646, 2147483646);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-465.1096);
      doubleArray0[1] = (-527.6006);
      doubleArray0[2] = 3018.8381766;
      doubleArray0[3] = 4671.65;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      compressedVector0.swapElements((-1800), (-1800));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      compressedVector0.setAll(0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      compressedVector0.swapElements(0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      
      String string0 = compressedVector1.toString();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals("0.000", string0);
      
      boolean boolean0 = compressedVector1.nonZeroAt((-1231));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(boolean0);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(1, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertNotNull(vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.length());
      
      org.evosuite.runtime.Random.setNextRandom((-2921));
      CompressedVector compressedVector3 = CompressedVector.fromCSV("0.000");
      assertNotNull(compressedVector3);
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(1, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      
      // Undeclared exception!
      try { 
        compressedVector3.getOrElse(2, 1954.083039739583);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1264.61);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-126,461%", string0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorIterator vectorIterator1 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator1);
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(vectorIterator1, vectorIterator0);
      
      VectorIterator vectorIterator2 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator2);
      assertFalse(vectorIterator2.equals((Object)vectorIterator0));
      assertFalse(vectorIterator2.equals((Object)vectorIterator1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(vectorIterator2, vectorIterator0);
      assertNotSame(vectorIterator2, vectorIterator1);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1073.897887237);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237), 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      double double0 = compressedVector0.product();
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237), 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, double0, 0.01);
      
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237), 0.0}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(2, vector0.length());
      
      compressedVector0.setAll(2401.868074693381);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237), 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      
      compressedVector0.swapElements((-888), (-192));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237), 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(13);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237), 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertFalse(boolean0);
      
      double double1 = new Float((double) (-888));
      assertEquals((-888.0F), double1, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set(13, (-945.427647));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '13' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 187.1;
      doubleArray0[1] = (-2676.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1979.655668798939);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-875.43080306);
      doubleArray0[6] = 659.9633;
      doubleArray0[7] = (-2129.91127923333);
      doubleArray0[8] = 1568.6750938;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1979.655668798939);
      doubleArray1[1] = 1568.6750938;
      doubleArray1[2] = 1568.6750938;
      doubleArray1[3] = 187.1;
      doubleArray1[4] = (-888.3);
      doubleArray1[5] = (-1.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1979.655668798939), 1568.6750938, 1568.6750938, 187.1, (-888.3), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(6, sparseVector0.cardinality());
      assertEquals(6, sparseVector0.length());
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(doubleArray1, doubleArray0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply(0.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(9, compressedVector1.length());
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(8, compressedVector0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(8, compressedVector0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0, compressedVector3.length());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(8, compressedVector0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, sparseVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector4 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {187.1, (-2676.0), (-1.0), (-1979.655668798939), (-1.0), (-875.43080306), 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector4.equals((Object)sparseVector0));
      assertTrue(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0, compressedVector4.length());
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(8, compressedVector0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector4, sparseVector0);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-465.1096);
      doubleArray0[1] = (-527.6006);
      doubleArray0[2] = 3018.8381766;
      doubleArray0[3] = 4671.65;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4671.65, 0.0, 3018.8381766, (-527.6006), 2401.868074693381).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blank();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(6, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      double double0 = compressedVector0.sum();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(11966.623725986761, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      int int0 = (-1749);
      // Undeclared exception!
      try { 
        CompressedVector.random((-1749), (-888.3), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-465.1096);
      doubleArray0[1] = (-527.6006);
      doubleArray0[2] = 3018.8381766;
      doubleArray0[3] = 4671.65;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, (-1979.655668798939), 3018.8381766, (-465.1096), 1112.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blank();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(6, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      // Undeclared exception!
      try { 
        compressedVector0.sum();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-465.1096);
      doubleArray0[1] = (-527.6006);
      doubleArray0[2] = 3018.8381766;
      doubleArray0[3] = 4671.65;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blank();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 4671.65, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(6, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.sum();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1532.22;
      doubleArray0[1] = (-1443.88);
      double double0 = 4671.65;
      doubleArray0[2] = 4671.65;
      doubleArray0[3] = (-1204.808729);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 687.18;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      double double1 = compressedVector0.cosineSimilarity(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = compressedVector1.sum();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(4241.361271, double2, 0.01);
      
      double double3 = compressedVector0.getOrElse(0, (-1430.330932));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(1532.22, double3, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double4 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0.0, double4, 0.01);
      
      compressedVector0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)69;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)40, (byte) (-106), (byte)69}, byteArray0);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(32);
      VectorIterator vectorIterator1 = compressedVector1.iterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(vectorIterator1);
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      int int0 = 2724;
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse(2724, (-1204.808729));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2724' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1264.61);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(" %", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0 %", decimalFormat0.toPattern());
      assertEquals(" %", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals(" \u20AC", decimalFormat1.getPositiveSuffix());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("#,##0.00 \u00A4", decimalFormat1.toPattern());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("#\u00A0##0,00 \u00A4", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(" \u20AC", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(2, decimalFormat1.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertNotSame(decimalFormat1, decimalFormat0);
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(" %", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0 %", decimalFormat0.toPattern());
      assertEquals(" %", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertNotSame(decimalFormat0, decimalFormat1);
      assertEquals("0 %", string0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator1 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator1);
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(vectorIterator1, vectorIterator0);
      
      VectorIterator vectorIterator2 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator2);
      assertFalse(vectorIterator2.equals((Object)vectorIterator0));
      assertFalse(vectorIterator2.equals((Object)vectorIterator1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(vectorIterator2, vectorIterator0);
      assertNotSame(vectorIterator2, vectorIterator1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-4219));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertFalse(boolean0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(7);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)7, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-105.909014)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(15, vectorFunction0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(7, vectorFunction1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertEquals(25, byteArray1.length);
      assertNotNull(byteArray1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(byteArray1, byteArray0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blankOfLength(9);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(9, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      compressedVector0.set(4, 4);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 190.39614161843028;
      doubleArray0[1] = 190.39614161843028;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1979.655668798939);
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = 190.39614161843028;
      doubleArray0[6] = 659.9633;
      doubleArray0[7] = (-2129.91127923333);
      doubleArray0[8] = 1568.6750938;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1979.655668798939);
      doubleArray1[2] = 1568.6750938;
      doubleArray1[3] = 190.39614161843028;
      doubleArray1[4] = (-888.3);
      doubleArray1[5] = (-1.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1979.655668798939), 0.0, 1568.6750938, 190.39614161843028, (-888.3), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.8333333333333334, sparseVector0.density(), 0.01);
      assertEquals(6, sparseVector0.length());
      assertEquals(5, sparseVector0.cardinality());
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(doubleArray1, doubleArray0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply(0.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(9, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)sparseVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, sparseVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector3);
      
      CompressedVector compressedVector4 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertNotNull(compressedVector4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)sparseVector0));
      assertTrue(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertEquals(0, compressedVector4.cardinality());
      assertEquals(0, compressedVector4.length());
      assertEquals(Double.NaN, compressedVector4.density(), 0.01);
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, sparseVector0);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector3);
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {190.39614161843028, 190.39614161843028, (-1.0), (-1.0), 0.0, 190.39614161843028, 659.9633, (-2129.91127923333), 1568.6750938}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertEquals(0.8888888888888888, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      assertNotNull(compressedVector0);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-4219));
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(7);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      BasicVector basicVector0 = (BasicVector)Vector.unit(105);
      assertNotNull(basicVector0);
      assertEquals(105, basicVector0.length());
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)7, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)7).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(15, vectorFunction0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(7, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      int[] intArray0 = new int[6];
      intArray0[0] = 105;
      intArray0[1] = (-4219);
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = 106;
      intArray0[5] = 15;
      compressedVector0.updateAt(7, vectorFunction1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(7, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(7, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      org.evosuite.runtime.Random.setNextRandom(6);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1294);
      assertNotNull(integer0);
      assertEquals(1294, (int)integer0);
      
      Double double0 = new Double(1452.59612892512);
      assertNotNull(double0);
      assertEquals(1452.59612892512, (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Double double2 = new Double(1452.59612892512);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(1452.59612892512, (double)double2, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1769);
      assertNotNull(compressedVector0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5.652911249293386E-4, compressedVector0.density(), 0.01);
      assertEquals(1769, compressedVector0.length());
      
      compressedVector0.swapElements(1769, (-1331));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5.652911249293386E-4, compressedVector0.density(), 0.01);
      assertEquals(1769, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-1073.897887237);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(0.058823529411764705, compressedVector0.density(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not decode CompressedVector from the given byte array.");
      assertFalse(boolean0);
      
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertNotNull(vector0);
      assertEquals(17, vector0.length());
      
      compressedVector0.setAll(2401.868074693381);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2727, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 3656.079609951;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 3553.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 3656.079609951, Double.NEGATIVE_INFINITY, 3553.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 3656.079609951, Double.NEGATIVE_INFINITY, 3553.0}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertTrue(boolean0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(7, doubleArray0.length);
      assertEquals(73, byteArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 3656.079609951, Double.NEGATIVE_INFINITY, 3553.0}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(365, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '365' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 3656.079609951;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 3553.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 3656.079609951, Double.NEGATIVE_INFINITY, 3553.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(7, doubleArray0.length);
      assertEquals(73, byteArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 3656.079609951, Double.NEGATIVE_INFINITY, 3553.0}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(73, byteArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 3656.079609951, Double.NEGATIVE_INFINITY, 3553.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.5714285714285714, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(365, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '365' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 11;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)11).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(11, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 7;
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      int int1 = (-4219);
      boolean boolean0 = compressedVector0.nonZeroAt((-4219));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(boolean0);
      
      int int2 = 105;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(7);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(7, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copyOfLength(343);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(7, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(343, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      int int3 = 15;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1724.0954443697).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(15, vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(7, compressedVector0.length());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      boolean boolean1 = compressedVector0.nonZeroAt(7);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(boolean1 == boolean0);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean1);
      
      CompressedVector compressedVector3 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector3);
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertEquals(0, compressedVector3.length());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      
      // Undeclared exception!
      try { 
        Vector.fromCSV("4LzD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1073.897887237);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      double double0 = compressedVector0.product();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals((-1073.897887237), double0, 0.01);
      
      compressedVector0.setAll(2401.868074693381);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-3));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2146589931, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2146589931;
      doubleArray0[1] = (double) 3;
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(2146589931, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      doubleArray0[2] = (double) 2146589931;
      doubleArray0[4] = (double) 3;
      Vector vector0 = Vector.constant(1684, 3);
      assertNotNull(vector0);
      assertEquals(1684, vector0.length());
      
      doubleArray0[5] = 2.146589931E9;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589931E9, 3.0, 2.146589931E9, 0.0, 3.0, 2.146589931E9}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      
      SparseVector sparseVector1 = SparseVector.zero(16, 3);
      assertNotNull(sparseVector1);
      assertFalse(sparseVector1.equals((Object)compressedVector0));
      assertFalse(sparseVector1.equals((Object)compressedVector1));
      assertFalse(sparseVector1.equals((Object)sparseVector0));
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(16, sparseVector1.length());
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(sparseVector1, compressedVector1);
      assertNotSame(sparseVector1, sparseVector0);
      
      double double0 = compressedVector1.getOrElse(3, 1.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589931E9, 3.0, 2.146589931E9, 0.0, 3.0, 2.146589931E9}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector1));
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector1);
      assertEquals(1.0, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = CompressedVector.zero(3);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)sparseVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(3, compressedVector2.length());
      assertNotSame(compressedVector2, sparseVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, sparseVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2883
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) 3;
      doubleArray0[4] = (double) 3;
      Vector vector0 = Vector.constant(1684, 3);
      assertNotNull(vector0);
      assertEquals(1684, vector0.length());
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      
      SparseVector sparseVector0 = SparseVector.zero(16, 3);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(16, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cCSMatrix0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(3.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      
      double double0 = compressedVector0.getOrElse(3, 16);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(16.0, double0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(3);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(3, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2883
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(431);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(431, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2582);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(431, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2582, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-79);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)110, (byte) (-1), (byte)124, (byte)6, (byte) (-79)}, byteArray0);
      assertFalse(boolean0);
      
      double double0 = (-1.0);
      double double1 = compressedVector0.getOrElse(10, (-1.0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(431, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals((-1.0), double1, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(431, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-1169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1169
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(895);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(895);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(895, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(895, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.blankOfLength(1);
      assertNotNull(compressedVector3);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(1, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      
      BasicVector basicVector0 = (BasicVector)compressedVector0.subtract((double) 895);
      assertNotNull(basicVector0);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(895, basicVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      
      CompressedVector compressedVector4 = (CompressedVector)SparseVector.zero(895, 895);
      assertNotNull(compressedVector4);
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      assertTrue(compressedVector4.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector4.density(), 0.01);
      assertEquals(895, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector2);
      
      compressedVector0.swapElements(895, 895);
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector4));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.set(1, 2334.86568750407);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(0.0011173184357541898, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      compressedVector0.each(vectorProcedure0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(0.0011173184357541898, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector4);
      
      CompressedVector compressedVector5 = (CompressedVector)compressedVector0.copyOfLength(283);
      assertNotNull(compressedVector5);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector4));
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(0.0011173184357541898, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector5.cardinality());
      assertEquals(0.0035335689045936395, compressedVector5.density(), 0.01);
      assertEquals(283, compressedVector5.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector4);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector1);
      
      org.evosuite.runtime.Random.setNextRandom(895);
      CompressedVector compressedVector6 = (CompressedVector)compressedVector0.copyOfLength(2147483646);
      assertNotNull(compressedVector6);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector5));
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector6.equals((Object)compressedVector4));
      assertFalse(compressedVector6.equals((Object)compressedVector2));
      assertFalse(compressedVector6.equals((Object)compressedVector0));
      assertFalse(compressedVector6.equals((Object)compressedVector3));
      assertFalse(compressedVector6.equals((Object)compressedVector1));
      assertFalse(compressedVector6.equals((Object)compressedVector5));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(895, compressedVector0.length());
      assertEquals(0.0011173184357541898, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector6.cardinality());
      assertEquals(2147483646, compressedVector6.length());
      assertEquals(4.656612877414201E-10, compressedVector6.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector6);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector6, compressedVector4);
      assertNotSame(compressedVector6, compressedVector2);
      assertNotSame(compressedVector6, compressedVector0);
      assertNotSame(compressedVector6, compressedVector3);
      assertNotSame(compressedVector6, compressedVector1);
      assertNotSame(compressedVector6, compressedVector5);
      
      org.evosuite.runtime.Random.setNextRandom(2147483646);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-2309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2309
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2146589932, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589932, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2146589932;
      doubleArray0[1] = (double) 3;
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589932, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2146589932, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      doubleArray0[2] = (double) 2146589932;
      doubleArray0[3] = (double) 2146589932;
      Vector vector0 = Vector.constant(1684, 3);
      assertNotNull(vector0);
      assertEquals(1684, vector0.length());
      
      doubleArray0[5] = (-1295.0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589932E9, 3.0, 2.146589932E9, 2.146589932E9, 0.0, (-1295.0)}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertEquals(6, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      
      SparseVector sparseVector1 = SparseVector.zero(16, 3);
      assertNotNull(sparseVector1);
      assertFalse(sparseVector1.equals((Object)compressedVector0));
      assertFalse(sparseVector1.equals((Object)compressedVector1));
      assertFalse(sparseVector1.equals((Object)sparseVector0));
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(16, sparseVector1.length());
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(sparseVector1, compressedVector1);
      assertNotSame(sparseVector1, sparseVector0);
      
      double double0 = compressedVector1.getOrElse(3, 1.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589932E9, 3.0, 2.146589932E9, 2.146589932E9, 0.0, (-1295.0)}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector1));
      assertEquals(6, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, sparseVector1);
      assertEquals(2.146589932E9, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589932, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector1);
      
      CompressedVector compressedVector2 = CompressedVector.zero(3);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(3, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, sparseVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, sparseVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2858
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 786;
      doubleArray0[1] = (double) 786;
      doubleArray0[2] = (double) 786;
      doubleArray0[3] = (double) 786;
      doubleArray0[4] = (double) 786;
      doubleArray0[5] = (double) 786;
      int[] intArray0 = new int[8];
      intArray0[0] = 786;
      intArray0[1] = 786;
      intArray0[2] = 786;
      intArray0[3] = 786;
      intArray0[4] = 786;
      intArray0[5] = 786;
      intArray0[6] = 786;
      intArray0[7] = 786;
      CompressedVector compressedVector0 = new CompressedVector(786, 786, doubleArray0, intArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new double[] {786.0, 786.0, 786.0, 786.0, 786.0, 786.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {786, 786, 786, 786, 786, 786, 786, 786}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(786, compressedVector0.cardinality());
      assertEquals(786, compressedVector0.length());
      
      double double0 = compressedVector0.sum();
      assertEquals(6, doubleArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new double[] {786.0, 786.0, 786.0, 786.0, 786.0, 786.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {786, 786, 786, 786, 786, 786, 786, 786}, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(786, compressedVector0.cardinality());
      assertEquals(786, compressedVector0.length());
      assertEquals(0.0, double0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(786);
      assertNotNull(compressedVector1);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(786, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {786.0, 786.0, 786.0, 786.0, 786.0, 786.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(6, compressedVector2.length());
      assertEquals(6, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector1.cosineSimilarity(compressedVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector vector0 = Vector.fromCSV("");
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      CompressedVector compressedVector0 = CompressedVector.zero(4610);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4610, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)18, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4610, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)18, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(compressedVector1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4610, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4610, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2981);
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = 755.0;
      doubleArray0[3] = (double) (-2981);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2981);
      intArray0[1] = (-2981);
      intArray0[2] = (-2981);
      intArray0[3] = 32;
      intArray0[4] = (-2981);
      CompressedVector compressedVector0 = new CompressedVector(32, (-2981), doubleArray0, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {(-2981.0), 32.0, 755.0, (-2981.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-2981), (-2981), (-2981), 32, (-2981)}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals((-93.15625), compressedVector0.density(), 0.01);
      assertEquals((-2981), compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2981.0), 32.0, 755.0, (-2981.0)}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(4, sparseVector0.length());
      assertEquals(4, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      
      double double0 = compressedVector0.sum();
      assertEquals(4, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {(-2981.0), 32.0, 755.0, (-2981.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-2981), (-2981), (-2981), 32, (-2981)}, intArray0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals((-93.15625), compressedVector0.density(), 0.01);
      assertEquals((-2981), compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(0.0, double0, 0.01);
      
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {(-2981.0), 32.0, 755.0, (-2981.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-2981), (-2981), (-2981), 32, (-2981)}, intArray0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals((-93.15625), compressedVector0.density(), 0.01);
      assertEquals((-2981), compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-2146681450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2146681450
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = CompressedVector.zero(2146589931, 3);
      assertNotNull(compressedVector0);
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2146589931;
      doubleArray0[1] = (double) 3;
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2146589931, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      doubleArray0[2] = (double) 2146589931;
      doubleArray0[3] = (double) 2146589931;
      doubleArray0[4] = (double) 3;
      int int1 = 1684;
      Vector vector0 = Vector.constant(1684, 3);
      assertNotNull(vector0);
      assertEquals(1684, vector0.length());
      
      doubleArray0[5] = (-1295.0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589931E9, 3.0, 2.146589931E9, 2.146589931E9, 3.0, (-1295.0)}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      
      int int2 = 16;
      SparseVector sparseVector1 = SparseVector.zero(16, 3);
      assertNotNull(sparseVector1);
      assertFalse(sparseVector1.equals((Object)sparseVector0));
      assertFalse(sparseVector1.equals((Object)compressedVector1));
      assertFalse(sparseVector1.equals((Object)compressedVector0));
      assertEquals(16, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertNotSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector1);
      assertNotSame(sparseVector1, compressedVector0);
      
      double double0 = compressedVector1.getOrElse(3, 1.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589931E9, 3.0, 2.146589931E9, 2.146589931E9, 3.0, (-1295.0)}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)sparseVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, sparseVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertEquals(2.146589931E9, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector1);
      assertSame(compressedVector0, sparseVector0);
      
      CompressedVector compressedVector2 = CompressedVector.zero(3);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)sparseVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertEquals(3, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, sparseVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, sparseVector0);
      
      int int3 = (-2883);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2883
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1073.897887237);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(1, vector0.length());
      
      compressedVector0.setAll(2401.868074693381);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(2727, (-1924));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(2727, (double) 2727, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2981);
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = 755.0;
      doubleArray0[3] = (double) (-2981);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2981);
      intArray0[1] = (-2981);
      intArray0[2] = (-2981);
      intArray0[3] = 32;
      intArray0[4] = (-2981);
      CompressedVector compressedVector0 = new CompressedVector(32, (-2981), doubleArray0, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {(-2981.0), 32.0, 755.0, (-2981.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-2981), (-2981), (-2981), 32, (-2981)}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals((-2981), compressedVector0.cardinality());
      assertEquals((-93.15625), compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {(-2981.0), 32.0, 755.0, (-2981.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-2981), (-2981), (-2981), 32, (-2981)}, intArray0);
      assertEquals((-2981), compressedVector0.cardinality());
      assertEquals((-93.15625), compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = CompressedVector.zero(3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(3, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = new CompressedVector(1350, 3);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1350, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 534.4, 2.0, 534.4, 2.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector2.update(vectorFunction0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1350, compressedVector2.length());
      assertEquals(1350, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      CompressedVector compressedVector3 = (CompressedVector)SparseVector.zero(3, 3);
      assertNotNull(compressedVector3);
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(3, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector2.each(vectorProcedure0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertEquals(1350, compressedVector2.length());
      assertEquals(1350, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector3);
      
      CompressedVector compressedVector4 = CompressedVector.zero(3);
      assertNotNull(compressedVector4);
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertTrue(compressedVector4.equals((Object)compressedVector0));
      assertTrue(compressedVector4.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector4.density(), 0.01);
      assertEquals(3, compressedVector4.length());
      assertEquals(0, compressedVector4.cardinality());
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-6829), (-6829));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-6829' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(100);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(100, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 100);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(100, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      double double0 = compressedVector0.manhattanNorm();
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0.0, double0, 0.01);
      
      VectorFactory<Vector> vectorFactory1 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory1).apply(anyInt());
      Vector vector1 = compressedVector2.to(vectorFactory1);
      assertNull(vector1);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(100, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(byteArray1, byteArray0);
      
      compressedVector2.setAll((-1.0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(100, compressedVector2.length());
      assertEquals(100, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      CompressedVector compressedVector3 = CompressedVector.fromBinary(byteArray1);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector3.length());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byte byte1 = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)6, (byte) (-116), (byte) (-47), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)16);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)6, (byte) (-116), (byte) (-47), (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      int int0 = (-2938);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      int int0 = Byte.compare((byte)19, (byte) (-44));
      assertEquals(63, int0);
      
      long long0 = Byte.toUnsignedLong((byte)1);
      assertEquals(1L, long0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains((byte) (-44)));
      assertTrue(boolean0);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains((byte) (-44)));
      assertTrue(linkedList1.contains(byte0));
      assertFalse(linkedList1.contains((byte) (-44)));
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList1);
      assertNotNull(compressedVector0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains((byte) (-44)));
      assertTrue(linkedList1.contains(byte0));
      assertFalse(linkedList1.contains((byte) (-44)));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(2610L, (-837.4), (double) 63);
      assertNotNull(doubleStream0);
      
      boolean boolean1 = compressedVector0.isZeroAt(3);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(byte0));
      assertFalse(linkedList0.contains((byte) (-44)));
      assertTrue(linkedList1.contains(byte0));
      assertFalse(linkedList1.contains((byte) (-44)));
      assertTrue(boolean1);
      
      CompressedVector compressedVector1 = CompressedVector.random((int) (byte)1, (double) 1L, (Random) mockRandom0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = CompressedVector.zero(32, (int) (byte)1);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(32, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      int int1 = Byte.compare((byte)0, (byte)4);
      assertFalse(int1 == int0);
      assertEquals((-4), int1);
      
      boolean boolean2 = linkedList0.add(byte1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains((byte)4));
      assertFalse(linkedList0.contains((byte)19));
      assertTrue(boolean2);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertNotNull(compressedVector3);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertEquals(2, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertTrue(linkedList0.contains((byte)4));
      assertFalse(linkedList0.contains((byte)19));
      assertTrue(linkedList1.contains((byte)4));
      assertFalse(linkedList1.contains((byte)19));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 32;
      CompressedVector compressedVector4 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 32.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector4);
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertEquals(0.6, compressedVector4.density(), 0.01);
      assertEquals(5, compressedVector4.length());
      assertEquals(3, compressedVector4.cardinality());
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector1);
      
      CompressedVector compressedVector5 = CompressedVector.zero(3);
      assertNotNull(compressedVector5);
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector2));
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertFalse(compressedVector5.equals((Object)compressedVector4));
      assertEquals(0, compressedVector5.cardinality());
      assertEquals(0.0, compressedVector5.density(), 0.01);
      assertEquals(3, compressedVector5.length());
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2639);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2639, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      int int0 = 0;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.slice(0, 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      int int1 = 0;
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string0 = Integer.toUnsignedString(0);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      // Undeclared exception!
      try { 
        compressedVector0.select((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1073.897887237);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertNotNull(vector0);
      assertEquals(1, vector0.length());
      
      compressedVector0.setAll(2401.868074693381);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.897887237)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2727, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(8, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(0, 2217.211);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(2251, 0.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2251, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2251, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-1256), (-1256));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1256' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 2029;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2029;
      doubleArray0[1] = (double) 2029;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2029;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2029;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 2029;
      doubleArray0[8] = (double) 2029;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-1650);
      intArray0[2] = 2029;
      intArray0[3] = 2029;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 2029;
      intArray0[7] = 0;
      CompressedVector compressedVector0 = new CompressedVector(1, 2029, doubleArray0, intArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new double[] {2029.0, 2029.0, 1.0, 2029.0, 1.0, 2029.0, 1.0, 2029.0, 2029.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, (-1650), 2029, 2029, 1, 1, 2029, 0}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(2029, compressedVector0.cardinality());
      assertEquals(2029.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = linkedList0.offer(long0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(0L));
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertTrue(linkedList0.contains(0L));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-113);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long((-2195L));
      assertNotNull(long0);
      assertEquals((-2195L), (long)long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((-2195L)));
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(linkedList0.contains((-2195L)));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("\"Dv(uQNpL6w.C#2U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.unit(690);
      assertNotNull(vector0);
      assertEquals(690, vector0.length());
      
      double double0 = compressedVector0.max();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(13);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(13, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector0.setAll(690);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 13);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(13, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 933.8338;
      doubleArray0[1] = 4813.716749592654;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2540.784653;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {933.8338, 4813.716749592654, 100.0, 0.0, 2540.784653}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {933.8338, 4813.716749592654, 100.0, 0.0, 2540.784653}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4813.716749592654, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.16, cRSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {933.8338, 4813.716749592654, 100.0, 0.0, 2540.784653}, doubleArray0, 0.01);
      assertNotNull(cCSMatrix0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.8, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(4813.716749592654, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      int int1 = (-128);
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -128.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1235);
      assertNotNull(compressedVector0);
      assertEquals(1235, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(1235, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(37);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1235, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(37, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(37);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        CompressedVector.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      assertNotNull(sparseVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      
      int int0 = 0;
      CompressedVector compressedVector1 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 0);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)sparseVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector2, compressedVector0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = CompressedVector.zero(2, 0);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(2, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector2.each(vectorProcedure0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(2, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      compressedVector2.setAll((-1.0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(2, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(linkedList0.contains(0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-770);
      doubleArray0[2] = (double) 1349;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1625);
      intArray0[1] = 1349;
      int int0 = 3159;
      intArray0[2] = 3159;
      intArray0[3] = (-770);
      intArray0[4] = (-770);
      CompressedVector compressedVector0 = new CompressedVector(1349, (-770), doubleArray0, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {0.0, (-770.0), 1349.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-1625), 1349, 3159, (-770), (-770)}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals((-0.5707931801334322), compressedVector0.density(), 0.01);
      assertEquals((-770), compressedVector0.cardinality());
      assertEquals(1349, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1349, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      int int0 = 2087;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(2087);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2087, (int)integer0);
      
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -456
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 37;
      CompressedVector compressedVector0 = new CompressedVector(37);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(37);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(37, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.sliceLeft(37);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertEquals(37, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(37, compressedVector2.length());
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(410, 949);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 949.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<Integer> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int0 = (-366);
      Integer integer0 = new Integer((-366));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-366), (int)integer0);
      
      Integer integer1 = new Integer((-366));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-366), (int)integer1);
      
      int int1 = 13;
      long long0 = Integer.toUnsignedLong(13);
      assertEquals(13L, long0);
      
      Integer integer2 = hashMap0.putIfAbsent(integer0, integer1);
      assertNull(integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(0, (int)integer3);
      
      Integer integer4 = hashMap0.put(integer3, integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      int int2 = (-5757);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-5757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-2058));
      assertNotNull(integer0);
      assertEquals((-2058), (int)integer0);
      
      Double double0 = new Double((-2058));
      assertNotNull(double0);
      assertEquals((-2058.0), (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-2532);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2532
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 5;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-1), (-1), doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector2 = CompressedVector.zero(1350, 3);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(1350, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector2.update(vectorFunction0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(1350, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      
      SparseVector sparseVector0 = SparseVector.zero(3, 3);
      assertNotNull(sparseVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertFalse(sparseVector0.equals((Object)compressedVector2));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(3, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(sparseVector0, compressedVector2);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-6829), (-6829));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-6829' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1;
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertNotNull(decimalFormat0);
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertTrue(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("#,##0", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertNotSame(decimalFormat1, decimalFormat0);
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertNotSame(decimalFormat0, decimalFormat1);
      assertEquals("0", string0);
      
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        compressedVector0.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1264.61);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(" %", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0 %", decimalFormat0.toPattern());
      assertEquals(" %", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#\u00A0##0 %", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(" %", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0 %", decimalFormat0.toPattern());
      assertEquals(" %", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-126\u00A0461 %", string0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      
      VectorIterator vectorIterator1 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator1);
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotSame(vectorIterator1, vectorIterator0);
      
      VectorIterator vectorIterator2 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator2);
      assertFalse(vectorIterator2.equals((Object)vectorIterator1));
      assertFalse(vectorIterator2.equals((Object)vectorIterator0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotSame(vectorIterator2, vectorIterator1);
      assertNotSame(vectorIterator2, vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = hashMap0.put((Integer) null, (Integer) null);
      assertNull(integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 472);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      Vector vector0 = compressedVector0.add((double) 0);
      assertNotNull(vector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, vector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.multiply((double) 0);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(0.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-3276), 945.4059370287926);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-3276' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = (-3131);
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = hashMap0.put(integer0, byte0);
      assertNull(byte1);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(2, (int)integer1);
      
      byte byte2 = (byte) (-120);
      Byte byte3 = new Byte((byte) (-120));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-120), (byte)byte3);
      
      long long0 = Byte.toUnsignedLong((byte)0);
      assertEquals(0L, long0);
      
      Byte byte4 = hashMap0.put(integer1, byte3);
      assertNull(byte4);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-3131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Short) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(",)&V';GIl#8#K(q+^R:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("cPP+krX0gp7(34");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      Integer integer0 = Integer.getInteger(".b[#$'mEgRNL^ar");
      assertNull(integer0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int1 = 1;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertNotSame(sparseVector0, compressedVector0);
      
      Vector vector0 = compressedVector0.subtract(4261.8446628619);
      assertNotNull(vector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, vector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertTrue(denseVector0.equals((Object)vector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, denseVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(denseVector0, vector0);
      
      int int2 = 3;
      boolean boolean0 = compressedVector0.nonZeroAt(3);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(boolean0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        CompressedVector.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(1760);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1760, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 4026;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(4026, 4026, doubleArray0, intArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4026, compressedVector0.cardinality());
      assertEquals(4026, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-3013);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-3013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3013
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 304;
      doubleArray0[1] = (double) 304;
      doubleArray0[2] = (double) 304;
      doubleArray0[3] = (double) 304;
      doubleArray0[4] = (double) 304;
      doubleArray0[5] = (double) 304;
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(304, 304, doubleArray0, intArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new double[] {304.0, 304.0, 304.0, 304.0, 304.0, 304.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(304, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(304, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(6, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new double[] {304.0, 304.0, 304.0, 304.0, 304.0, 304.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vectorIterator0);
      assertEquals(304, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(304, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(5, 304.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32, 32);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1663, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      Short short0 = new Short((short) (-2010));
      assertNotNull(short0);
      assertEquals((short) (-2010), (short)short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-437), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4674, 4674);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4674, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4674, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-934);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-934), (-934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -934
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", 0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = hashMap0.put(integer0, float0);
      assertNull(float1);
      assertTrue(integer0.equals((Object)integer1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer2 = new Integer(492);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(492, (int)integer2);
      
      Integer integer3 = Integer.getInteger("Cardinality should be positive: ", integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(492, (int)integer3);
      
      int int0 = Integer.sum((-423), 1642);
      assertEquals(1219, int0);
      
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = hashMap0.put(integer2, float2);
      assertNull(float3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1321);
      intArray0[2] = 0;
      CompressedVector compressedVector0 = new CompressedVector(32, 0, doubleArray0, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new double[] {32.0, 32.0, 32.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, (-1321), 0}, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      
      compressedVector0.swapElements((-1321), 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new double[] {32.0, 32.0, 32.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, (-1321), 0}, intArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-527.6006);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-527.6006)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-1800), (-1800));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-527.6006)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-527.6006));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-527.6006)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1129);
      assertNotNull(compressedVector0);
      assertEquals(1129, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.sum();
      assertEquals(1129, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1129;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1129;
      doubleArray0[3] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1129.0, 0.0, 1129.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(4, sparseVector0.length());
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(0.5, sparseVector0.density(), 0.01);
      assertNotSame(sparseVector0, compressedVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Vector vector0 = Vector.zero(13);
      assertNotNull(vector0);
      assertEquals(13, vector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 13);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(13, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertNotNull(cRSMatrix0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(1129, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1129, cRSMatrix0.columns());
      assertEquals(1129, cRSMatrix0.rows());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(double0));
      
      BasicVector basicVector0 = (BasicVector)Vector.fromCollection(linkedList0);
      assertNotNull(basicVector0);
      assertFalse(basicVector0.equals((Object)vector0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector0.length());
      assertNotSame(basicVector0, vector0);
      assertFalse(linkedList0.contains(double0));
      
      BasicVector basicVector1 = (BasicVector)compressedVector0.subtract((double) 1129);
      assertNotNull(basicVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertFalse(basicVector1.equals((Object)vector0));
      assertEquals(1129, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1129, basicVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, vector0);
      
      compressedVector0.swapElements(1129, 1129);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(1129, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      
      int int0 = 32;
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blankOfLength(32);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(1129, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(32, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertFalse(linkedList0.contains(0));
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-2444), (double) (-2444), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1995);
      assertNotNull(sparseVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1995, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      CompressedVector compressedVector0 = new CompressedVector(1995, 1995);
      assertNotNull(compressedVector0);
      assertEquals(1995, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        CompressedVector.random(1995, (double) 1995, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(248);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 248);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(248, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(248, compressedVector0.length());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-23));
      assertNotNull(byte0);
      assertEquals((byte) (-23), (byte)byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-23)));
      assertTrue(boolean0);
      
      Stream<Byte> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-23)));
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(linkedList0.contains((byte) (-23)));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1532.22;
      doubleArray0[1] = (-1443.88);
      doubleArray0[2] = 4671.65;
      doubleArray0[3] = (-1204.808729);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 687.18;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      
      double double0 = compressedVector0.cosineSimilarity(compressedVector1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = compressedVector1.sum();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(4241.361271, double1, 0.01);
      
      double double2 = compressedVector0.getOrElse(0, (-1430.330932));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(1532.22, double2, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-115.112091)).when(vectorAccumulator0).accumulate();
      double double3 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals((-115.112091), double3, 0.01);
      
      compressedVector0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)80;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)40, (byte) (-106), (byte)80}, byteArray0);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(32);
      VectorIterator vectorIterator1 = compressedVector1.iterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1532.22, (-1443.88), 4671.65, (-1204.808729), (-1.0), 687.18}, doubleArray0, 0.01);
      assertNotNull(vectorIterator1);
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Vector vector0 = Vector.fromCSV("");
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      CompressedVector compressedVector0 = CompressedVector.zero(4610, 4610);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4610, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)18, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4610, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)18, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4610, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(4610, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2532
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.zero(23);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(23, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (-232.164661);
      doubleArray0[6] = (double) 23;
      doubleArray0[7] = (double) 23;
      doubleArray0[8] = (double) 23;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {23.0, 23.0, 23.0, 0.0, 23.0, (-232.164661), 23.0, 23.0, 23.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(9, compressedVector2.length());
      assertEquals(0.8888888888888888, compressedVector2.density(), 0.01);
      assertEquals(8, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      CompressedVector compressedVector3 = CompressedVector.zero(2147483646, 1);
      assertNotNull(compressedVector3);
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertEquals(2147483646, compressedVector3.length());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      
      CompressedVector compressedVector4 = (CompressedVector)compressedVector2.shuffle();
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {23.0, 23.0, 23.0, 0.0, 23.0, (-232.164661), 23.0, 23.0, 23.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector4);
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertTrue(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(9, compressedVector4.length());
      assertEquals(0.8888888888888888, compressedVector4.density(), 0.01);
      assertEquals(8, compressedVector4.cardinality());
      assertEquals(9, compressedVector2.length());
      assertEquals(0.8888888888888888, compressedVector2.density(), 0.01);
      assertEquals(8, compressedVector2.cardinality());
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector4);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse(23, 23.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '23' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-465.1096);
      doubleArray0[1] = (-527.6006);
      doubleArray0[2] = 3018.8381766;
      doubleArray0[4] = 4671.65;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1334.141756074, 1334.141756074, 0.0, 2.146589931E9, 276.1041137762758).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(1871);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.6666666666666666, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.blank();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      double double0 = compressedVector0.sum();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(2.1465931514917397E9, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-465.1096), (-527.6006), 3018.8381766, 0.0, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      
      int int0 = (-1749);
      // Undeclared exception!
      try { 
        CompressedVector.random((-1749), (-888.3), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(2707, 4548);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4548.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      byte byte0 = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)29;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 1100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2146589931, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2146589931, compressedVector0.length());
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 2146589931;
      doubleArray0[1] = (double) 3;
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2146589931, compressedVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(2146589931, sparseVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      doubleArray0[2] = (double) 2146589931;
      doubleArray0[3] = (double) 2146589931;
      doubleArray0[4] = (double) 3;
      Vector vector0 = Vector.constant(1684, 3);
      assertNotNull(vector0);
      assertEquals(1684, vector0.length());
      
      doubleArray0[5] = (-1295.0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589931E9, 3.0, 2.146589931E9, 2.146589931E9, 3.0, (-1295.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(10, compressedVector1.length());
      assertEquals(0.6, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      
      SparseVector sparseVector1 = SparseVector.zero(16, 3);
      assertNotNull(sparseVector1);
      assertFalse(sparseVector1.equals((Object)compressedVector0));
      assertFalse(sparseVector1.equals((Object)sparseVector0));
      assertFalse(sparseVector1.equals((Object)compressedVector1));
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(16, sparseVector1.length());
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector1);
      
      double double0 = compressedVector1.getOrElse(3, 1.0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {2.146589931E9, 3.0, 2.146589931E9, 2.146589931E9, 3.0, (-1295.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)sparseVector1));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(10, compressedVector1.length());
      assertEquals(0.6, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.cardinality());
      assertNotSame(compressedVector1, sparseVector1);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(2.146589931E9, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2146589931, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector1);
      
      CompressedVector compressedVector2 = CompressedVector.zero(3);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)sparseVector0));
      assertFalse(compressedVector2.equals((Object)sparseVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(3, compressedVector2.length());
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector2, sparseVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2883
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1294);
      assertNotNull(integer0);
      assertEquals(1294, (int)integer0);
      
      Double double0 = new Double(1452.59612892512);
      assertNotNull(double0);
      assertEquals(1452.59612892512, (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Double double2 = new Double(1452.59612892512);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(1452.59612892512, (double)double2, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1769);
      assertNotNull(compressedVector0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(5.652911249293386E-4, compressedVector0.density(), 0.01);
      assertEquals(1769, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1769, (-1318));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(5.652911249293386E-4, compressedVector0.density(), 0.01);
      assertEquals(1769, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1294;
      doubleArray0[1] = (double) 1769;
      doubleArray0[2] = (double) 1294;
      doubleArray0[3] = 2401.8680747;
      doubleArray0[4] = (double) 1294;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1294.0, 1769.0, 1294.0, 2401.8680747, 1294.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1294.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-261), vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.0011305822498586771, compressedVector0.density(), 0.01);
      assertEquals(1769, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1264.61);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator1 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator1);
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(vectorIterator1, vectorIterator0);
      
      VectorIterator vectorIterator2 = compressedVector0.nonZeroIterator();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(vectorIterator2);
      assertFalse(vectorIterator2.equals((Object)vectorIterator1));
      assertFalse(vectorIterator2.equals((Object)vectorIterator0));
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(vectorIterator2, vectorIterator1);
      assertNotSame(vectorIterator2, vectorIterator0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.61)}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = new CompressedVector(2727);
      compressedVector0.setAll((-1799.252048926));
      mockRandom0.setSeed(0L);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      mockRandom0.doubles(0L);
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        mockRandom0.doubles(380.9403203, (-1491.77234504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      mockRandom0.nextFloat();
      mockRandom0.doubles(0L);
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      compressedVector0.nonZeroAt((-4219));
      compressedVector0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-105.909014)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(15, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(190.39614161843028).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      int[] intArray0 = new int[6];
      intArray0[0] = 105;
      intArray0[1] = (-4219);
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = 106;
      compressedVector0.updateAt(7, vectorFunction1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        CompressedVector.zero((-213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -213
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (-1073.897887237);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      Vector.fromArray(doubleArray0);
      compressedVector0.setAll(2401.868074693381);
      compressedVector0.swapElements(2727, (-192));
      compressedVector0.nonZeroAt(13);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1704, (-1799.252048926));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1704' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 3656.079609951;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 3553.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(365, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '365' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
