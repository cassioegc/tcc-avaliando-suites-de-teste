/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:12:55 GMT 2021
 */

package org.la4j.vector.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Random;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicVector_ESTest extends BasicVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      double double1 = Double.max(0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(0.0));
      assertTrue(linkedList0.contains(2.0));
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BasicVector basicVector0 = BasicVector.fromCollection(linkedList0);
      assertNotNull(basicVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, basicVector0.length());
      assertFalse(linkedList0.contains(0.0));
      assertTrue(linkedList0.contains(2.0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BasicVector basicVector1 = BasicVector.random(273, mockRandom0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(273, basicVector1.length());
      
      Vector vector0 = basicVector1.blankOfLength(273);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotSame(vector0, basicVector0);
      assertNotNull(vector0);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertFalse(vector0.equals((Object)basicVector1));
      assertFalse(vector0.equals((Object)basicVector0));
      assertEquals(273, basicVector1.length());
      assertEquals(273, vector0.length());
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 273;
      doubleArray0[1] = (double) 273;
      BasicVector basicVector2 = BasicVector.fromArray(doubleArray0);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, basicVector1);
      assertNotSame(basicVector2, vector0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(basicVector2);
      assertFalse(basicVector2.equals((Object)basicVector0));
      assertFalse(basicVector2.equals((Object)basicVector1));
      assertFalse(basicVector2.equals((Object)vector0));
      assertEquals(2, basicVector2.length());
      assertArrayEquals(new double[] {273.0, 273.0}, doubleArray0, 0.01);
      
      basicVector1.set(0, 273.0);
      assertNotSame(basicVector1, basicVector2);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertFalse(basicVector1.equals((Object)basicVector2));
      assertFalse(basicVector1.equals((Object)vector0));
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(273, basicVector1.length());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode BasicVector from the given byte array.
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BasicVector basicVector0 = null;
      try {
        basicVector0 = new BasicVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.fromCSV("");
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      
      double double0 = basicVector0.sum();
      assertEquals(0, basicVector0.length());
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = basicVector0.toBinary();
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(0, basicVector0.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BasicVector basicVector1 = new BasicVector();
      assertNotNull(basicVector1);
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertEquals(0, basicVector1.length());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Vector vector0 = basicVector0.subtract((Vector) basicVector1);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(vector0, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotNull(vector0);
      assertTrue(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(vector0.equals((Object)basicVector1));
      assertTrue(vector0.equals((Object)basicVector0));
      assertEquals(0, basicVector0.length());
      assertEquals(0, basicVector1.length());
      assertEquals(0, vector0.length());
      
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      BasicVector basicVector2 = BasicVector.fromArray(doubleArray0);
      assertNotSame(basicVector2, basicVector1);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, vector0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(basicVector2);
      assertFalse(basicVector2.equals((Object)basicVector1));
      assertFalse(basicVector2.equals((Object)basicVector0));
      assertFalse(basicVector2.equals((Object)vector0));
      assertEquals(9, basicVector2.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BasicVector basicVector3 = BasicVector.constant(4331, 4331);
      assertNotSame(basicVector3, basicVector2);
      assertNotSame(basicVector3, basicVector0);
      assertNotSame(basicVector3, vector0);
      assertNotSame(basicVector3, basicVector1);
      assertNotNull(basicVector3);
      assertFalse(basicVector3.equals((Object)basicVector2));
      assertFalse(basicVector3.equals((Object)basicVector0));
      assertFalse(basicVector3.equals((Object)vector0));
      assertFalse(basicVector3.equals((Object)basicVector1));
      assertEquals(4331, basicVector3.length());
      
      VectorFactory<BasicVector> vectorFactory0 = (VectorFactory<BasicVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        basicVector2.to(vectorFactory0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.zero(3560);
      assertNotNull(basicVector0);
      assertEquals(3560, basicVector0.length());
      
      VectorFactory<BasicVector> vectorFactory0 = (VectorFactory<BasicVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basicVector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      basicVector0.to(vectorFactory0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.zero(5);
      assertNotNull(basicVector0);
      assertEquals(5, basicVector0.length());
      
      VectorFactory<BasicVector> vectorFactory0 = (VectorFactory<BasicVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basicVector0).when(vectorFactory0).apply(anyInt());
      BasicVector basicVector1 = basicVector0.to(vectorFactory0);
      assertSame(basicVector0, basicVector1);
      assertSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertEquals(5, basicVector0.length());
      assertEquals(5, basicVector1.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2669;
      // Undeclared exception!
      try { 
        BasicVector.random(2669, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      BasicVector basicVector0 = new BasicVector(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(basicVector0);
      assertEquals(1, basicVector0.length());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      String string0 = basicVector0.toString();
      assertEquals(1, doubleArray0.length);
      assertNotNull(string0);
      assertEquals(1, basicVector0.length());
      assertEquals("-\u221E", string0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      BasicVector basicVector1 = BasicVector.unit(0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(0, basicVector1.length());
      
      // Undeclared exception!
      try { 
        basicVector0.blankOfLength((-668));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Float float0 = new Float(2972.0);
      assertNotNull(float0);
      assertEquals(2972.0F, (float)float0, 0.01F);
      
      float float1 = Float.sum((-375.756F), (-375.756F));
      assertEquals((-751.512F), float1, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = hashMap0.getOrDefault(float0, integer0);
      assertNotNull(integer1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, (int)integer1);
      
      BasicVector basicVector0 = BasicVector.fromMap(hashMap0, 1303);
      assertNotNull(basicVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1303, basicVector0.length());
      
      double[] doubleArray0 = basicVector0.toArray();
      assertEquals(1303, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1303, basicVector0.length());
      
      BasicVector basicVector1 = BasicVector.constant(1303, 0.0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertEquals(1303, basicVector1.length());
      
      basicVector0.swapElements(0, 5);
      assertNotSame(basicVector0, basicVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1303, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 370.47422017531;
      doubleArray0[1] = (-713.9);
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3317.8138324669);
      doubleArray0[5] = 338.5750386779;
      doubleArray0[6] = (-705.16737948);
      BasicVector basicVector0 = BasicVector.fromArray(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(basicVector0);
      assertEquals(7, basicVector0.length());
      assertArrayEquals(new double[] {370.47422017531, (-713.9), 100.0, 0.0, (-3317.8138324669), 338.5750386779, (-705.16737948)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = basicVector0.toBinary();
      assertEquals(7, doubleArray0.length);
      assertEquals(61, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(7, basicVector0.length());
      assertArrayEquals(new double[] {370.47422017531, (-713.9), 100.0, 0.0, (-3317.8138324669), 338.5750386779, (-705.16737948)}, doubleArray0, 0.01);
      
      Vector vector0 = basicVector0.blankOfLength(0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(vector0, basicVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)basicVector0));
      assertEquals(7, basicVector0.length());
      assertEquals(0, vector0.length());
      assertArrayEquals(new double[] {370.47422017531, (-713.9), 100.0, 0.0, (-3317.8138324669), 338.5750386779, (-705.16737948)}, doubleArray0, 0.01);
      
      BasicVector basicVector1 = BasicVector.fromBinary(byteArray0);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertEquals(7, doubleArray0.length);
      assertEquals(61, byteArray0.length);
      assertNotNull(basicVector1);
      assertFalse(basicVector0.equals((Object)vector0));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertFalse(basicVector1.equals((Object)vector0));
      assertEquals(7, basicVector0.length());
      assertEquals(7, basicVector1.length());
      assertArrayEquals(new double[] {370.47422017531, (-713.9), 100.0, 0.0, (-3317.8138324669), 338.5750386779, (-705.16737948)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-2288);
      // Undeclared exception!
      try { 
        BasicVector.unit((-2288));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = Integer.getInteger("[U89<6Ov6W=fm[,KH");
      assertNull(integer0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        BasicVector.fromCollection(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1965);
      // Undeclared exception!
      try { 
        BasicVector.zero((-1965));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-2728);
      long long0 = 2346L;
      MockRandom mockRandom0 = new MockRandom(2346L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        BasicVector.random((-2728), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 32;
      BasicVector basicVector0 = new BasicVector(32);
      assertNotNull(basicVector0);
      assertEquals(32, basicVector0.length());
      
      // Undeclared exception!
      try { 
        BasicVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode BasicVector from the given byte array.
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BasicVector basicVector0 = BasicVector.fromArray(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      VectorFactory<BasicVector> vectorFactory0 = (VectorFactory<BasicVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      BasicVector basicVector1 = basicVector0.to(vectorFactory0);
      assertEquals(0, doubleArray0.length);
      assertNull(basicVector1);
      assertEquals(0, basicVector0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      BasicVector basicVector0 = BasicVector.fromArray(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(basicVector0);
      assertEquals(3, basicVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Vector vector0 = basicVector0.subtract(1.0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(vector0, basicVector0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)basicVector0));
      assertEquals(3, basicVector0.length());
      assertEquals(3, vector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Vector vector1 = basicVector0.blankOfLength(0);
      assertNotSame(basicVector0, vector1);
      assertNotSame(basicVector0, vector0);
      assertNotSame(vector1, basicVector0);
      assertNotSame(vector1, vector0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(vector1);
      assertFalse(basicVector0.equals((Object)vector0));
      assertFalse(vector1.equals((Object)basicVector0));
      assertFalse(vector1.equals((Object)vector0));
      assertEquals(3, basicVector0.length());
      assertEquals(0, vector1.length());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = hashMap0.replace((Integer) null, (Double) 0.0, (Double) 0.0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
      
      BasicVector basicVector1 = BasicVector.fromMap(hashMap0, 0);
      assertNotSame(basicVector1, vector1);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, vector0);
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)vector1));
      assertFalse(basicVector1.equals((Object)vector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, basicVector1.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-2000);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        BasicVector.constant((-2000), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-30);
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode BasicVector from the given byte array.
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      BasicVector basicVector0 = BasicVector.random(2197, mockRandom0);
      assertNotNull(basicVector0);
      assertEquals(2197, basicVector0.length());
      
      double double0 = basicVector0.get(0);
      assertEquals(2197, basicVector0.length());
      assertEquals(0.0, double0, 0.01);
      
      BasicVector basicVector1 = BasicVector.random(0, mockRandom0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(0, basicVector1.length());
      
      // Undeclared exception!
      try { 
        basicVector0.get((-249));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector();
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      
      DenseVector denseVector0 = basicVector0.toDenseVector();
      assertSame(basicVector0, denseVector0);
      assertSame(denseVector0, basicVector0);
      assertNotNull(denseVector0);
      assertEquals(0, basicVector0.length());
      assertEquals(0, denseVector0.length());
      
      Vector vector0 = basicVector0.blankOfLength(2090);
      assertSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(vector0, basicVector0);
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)denseVector0));
      assertFalse(vector0.equals((Object)basicVector0));
      assertEquals(0, basicVector0.length());
      assertEquals(2090, vector0.length());
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BasicVector basicVector1 = BasicVector.fromMap(hashMap0, 2090);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, denseVector0);
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertFalse(basicVector1.equals((Object)denseVector0));
      assertTrue(basicVector1.equals((Object)vector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2090, basicVector1.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      BasicVector basicVector0 = BasicVector.zero(0);
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      assertNotSame(denseVector0, basicVector0);
      assertNotNull(denseVector0);
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseVector0.length());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(basicVector0);
      assertNotSame(basicVector0, denseVector0);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertEquals(0, basicVector0.length());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertFalse(boolean0);
      
      BasicVector basicVector1 = BasicVector.fromCollection(linkedList0);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector1.length());
      assertFalse(linkedList0.contains(0));
      
      Vector vector0 = basicVector1.subtract((Vector) denseVector0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, basicVector1);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(vector0, basicVector0);
      assertNotSame(vector0, basicVector1);
      assertNotNull(vector0);
      assertTrue(denseVector0.equals((Object)basicVector1));
      assertTrue(denseVector0.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertTrue(vector0.equals((Object)basicVector1));
      assertTrue(vector0.equals((Object)basicVector0));
      assertTrue(vector0.equals((Object)denseVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, denseVector0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector1.length());
      assertEquals(0, vector0.length());
      assertFalse(linkedList0.contains(0));
      
      String string0 = basicVector1.toMatrixMarket();
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(string0);
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)vector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector1.length());
      assertFalse(linkedList0.contains(0));
      assertEquals("%%MatrixMarket vector array real\n0\n", string0);
      
      double double0 = basicVector1.cosineSimilarity(basicVector0);
      assertNotSame(basicVector0, denseVector0);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector0, vector0);
      assertNotSame(basicVector1, vector0);
      assertNotSame(basicVector1, denseVector0);
      assertNotSame(basicVector1, basicVector0);
      assertTrue(basicVector0.equals((Object)basicVector1));
      assertTrue(basicVector0.equals((Object)vector0));
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertTrue(basicVector1.equals((Object)vector0));
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertEquals(0, basicVector0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector1.length());
      assertFalse(linkedList0.contains(0));
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        BasicVector.fromCSV("Can not decode BasicVector from the given byte array.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-112);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-2812));
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2812), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)10, (byte) (-112)}, byteArray0);
      
      // Undeclared exception!
      try { 
        BasicVector.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.fromCSV("");
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      
      // Undeclared exception!
      try { 
        basicVector0.set(67, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector();
      assertNotNull(basicVector0);
      assertEquals(0, basicVector0.length());
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = hashMap0.put((Integer) null, (Integer) null);
      assertNull(integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        BasicVector.fromMap(hashMap0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector(2937);
      assertNotNull(basicVector0);
      assertEquals(2937, basicVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(2937);
      assertNotNull(mockRandom0);
      
      Vector vector0 = Vector.random(2937, mockRandom0);
      assertNotSame(vector0, basicVector0);
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)basicVector0));
      assertEquals(2937, vector0.length());
      
      int int0 = 0;
      DenseVector denseVector0 = DenseVector.unit(0);
      assertNotSame(denseVector0, basicVector0);
      assertNotSame(denseVector0, vector0);
      assertNotNull(denseVector0);
      assertFalse(denseVector0.equals((Object)basicVector0));
      assertFalse(denseVector0.equals((Object)vector0));
      assertEquals(0, denseVector0.length());
      
      // Undeclared exception!
      try { 
        basicVector0.get(2937);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      short short0 = (short) (-1899);
      int int0 = Integer.compareUnsigned((short) (-1899), (short) (-1899));
      assertEquals(0, int0);
      
      int int1 = Integer.divideUnsigned(681, (-3965));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Integer.remainderUnsigned(0, (short) (-1899));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      Short short1 = new Short((short) (-1899));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1899), (short)short1);
      
      long long0 = Short.toUnsignedLong((short) (-1899));
      assertEquals(63637L, long0);
      
      long long1 = Short.toUnsignedLong((short) (-1899));
      assertTrue(long1 == long0);
      assertEquals(63637L, long1);
      
      long long2 = Short.toUnsignedLong((short)1193);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(1193L, long2);
      
      Short short2 = hashMap0.put(integer0, short1);
      assertNull(short2);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(short1.equals((Object)short0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      BasicVector basicVector0 = BasicVector.fromMap(hashMap0, 2244);
      assertNotNull(basicVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2244, basicVector0.length());
      
      BasicVector basicVector1 = BasicVector.fromCSV("");
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(0, basicVector1.length());
      
      byte[] byteArray0 = basicVector1.toBinary();
      assertNotSame(basicVector1, basicVector0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(0, basicVector1.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        basicVector0.swapElements(2244, (-1801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2244
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3966;
      BasicVector basicVector0 = BasicVector.zero(3966);
      assertNotNull(basicVector0);
      assertEquals(3966, basicVector0.length());
      
      // Undeclared exception!
      basicVector0.toSparseVector();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BasicVector basicVector0 = BasicVector.fromMap(hashMap0, 0);
      assertNotNull(basicVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, basicVector0.length());
      
      boolean boolean0 = basicVector0.non((VectorPredicate) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, basicVector0.length());
      assertFalse(boolean0);
      
      BasicVector basicVector1 = BasicVector.unit(0);
      assertNotSame(basicVector1, basicVector0);
      assertNotNull(basicVector1);
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertEquals(0, basicVector1.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicVector.fromCSV("org.la4j.vector.dense.BasicVector");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1003;
      BasicVector basicVector0 = BasicVector.unit(1003);
      basicVector0.norm();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1003;
      doubleArray0[1] = (double) 1003;
      doubleArray0[2] = (double) 1003;
      doubleArray0[3] = (double) 1003;
      doubleArray0[4] = (-1335.7998575288);
      BasicVector.fromArray(doubleArray0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1003);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        BasicVector.fromMap(hashMap0, 1003);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.constant(2821, 0.0);
      basicVector0.swapElements(995, 995);
      assertEquals(2821, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector();
      BasicVector.zero(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BasicVector basicVector1 = BasicVector.fromArray(doubleArray0);
      assertEquals(3, basicVector1.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(411);
      BasicVector basicVector0 = BasicVector.random(411, mockRandom0);
      assertEquals(411, basicVector0.length());
      
      BasicVector basicVector1 = BasicVector.unit(273);
      double[] doubleArray0 = basicVector1.toArray();
      assertEquals(273, doubleArray0.length);
      
      BasicVector basicVector2 = BasicVector.fromCSV("");
      assertEquals(0, basicVector2.length());
      
      BasicVector basicVector3 = BasicVector.constant(411, 273);
      assertEquals(411, basicVector3.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.constant(900, 2030.5);
      byte[] byteArray0 = basicVector0.toBinary();
      assertEquals(7205, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(2237.77411882266);
      Double.isFinite(2237.77411882266);
      linkedList0.add(double0);
      BasicVector.fromCollection(linkedList0);
      BasicVector basicVector0 = BasicVector.constant(0, 2237.77411882266);
      assertEquals(0, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector(4280);
      String string0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(4280);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4280);
      try { 
        BasicVector.fromMatrixMarket(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BasicVector basicVector0 = null;
      try {
        basicVector0 = new BasicVector((-2285));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.constant(1, 1);
      // Undeclared exception!
      try { 
        basicVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector();
      basicVector0.multiply(270.05);
      Vector vector0 = basicVector0.copyOfLength(835);
      assertEquals(835, vector0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BasicVector basicVector0 = BasicVector.fromArray(doubleArray0);
      double[] doubleArray1 = basicVector0.toArray();
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BasicVector basicVector0 = BasicVector.random(0, mockRandom0);
      Vector vector0 = basicVector0.copyOfLength(0);
      assertTrue(vector0.equals((Object)basicVector0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasicVector basicVector0 = BasicVector.unit(173);
      assertEquals(173, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicVector.unit((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Float float0 = new Float((float) 0);
      Integer.compareUnsigned(0, 0);
      Float.sum(0, 0.0F);
      hashMap0.put(integer0, float0);
      BasicVector.fromMap(hashMap0, 1957);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      BasicVector basicVector0 = BasicVector.fromMap(hashMap1, 1957);
      hashMap1.keySet();
      basicVector0.equals((Object) "GIN:R,z5C^");
      BasicVector basicVector1 = BasicVector.zero(1695);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)8);
      linkedList0.add(byte0);
      BasicVector.fromCollection(linkedList0);
      basicVector1.toBinary();
      // Undeclared exception!
      try { 
        BasicVector.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-110);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        BasicVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode BasicVector from the given byte array.
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector(0);
      basicVector0.toBinary();
      basicVector0.toSparseVector();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-147.35030495240588));
      linkedList0.add(double0);
      Double double1 = new Double((-147.35030495240588));
      Double double2 = new Double((-147.35030495240588));
      linkedList0.add(double2);
      linkedList0.add(double1);
      Double double3 = new Double(0);
      Double.max(0, (-147.35030495240588));
      linkedList0.add(double3);
      Vector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        basicVector0.set((-489), Double.POSITIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -489
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basicVector0.each(vectorProcedure0);
      double[] doubleArray0 = basicVector0.toArray();
      Vector vector0 = basicVector0.multiply((-1782.50843593));
      assertEquals(0, vector0.length());
      
      basicVector0.hadamardProduct(vector0);
      BasicVector basicVector1 = BasicVector.fromArray(doubleArray0);
      basicVector1.manhattanNorm();
      basicVector0.swapElements(1346, 1346);
      Vector vector1 = basicVector1.copyOfLength(1346);
      assertEquals(1346, vector1.length());
      
      byte[] byteArray0 = basicVector0.toBinary();
      BasicVector basicVector2 = BasicVector.fromBinary(byteArray0);
      assertTrue(basicVector2.equals((Object)basicVector1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BasicVector basicVector0 = new BasicVector();
      // Undeclared exception!
      try { 
        basicVector0.get((-2488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1240.433073931;
      BasicVector basicVector0 = new BasicVector(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        basicVector0.swapElements(0, 2921);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2921
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      BasicVector basicVector0 = BasicVector.fromCSV("");
      BasicVector basicVector1 = BasicVector.zero(0);
      assertTrue(basicVector1.equals((Object)basicVector0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 1946);
      BasicVector basicVector0 = BasicVector.random(1946, mockRandom0);
      mockRandom0.nextInt(661);
      // Undeclared exception!
      try { 
        basicVector0.copyOfLength((-1799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1799
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Vector.unit((byte)1);
      boolean boolean0 = true;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("X");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
