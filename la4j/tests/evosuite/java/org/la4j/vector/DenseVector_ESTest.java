/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:19:15 GMT 2021
 */

package org.la4j.vector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DenseVector_ESTest extends DenseVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2525.7976528825);
      doubleArray0[1] = 1.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(vectorPredicate0).test(anyInt() , anyDouble());
      denseVector0.toCSV();
      denseVector0.is(vectorPredicate0);
      denseVector0.add(1.0);
      denseVector0.toColumnMatrix();
      denseVector0.toDiagonalMatrix();
      DenseVector denseVector1 = DenseVector.fromCSV("-2525.798, 1.000");
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      VectorOperation<Double> vectorOperation0 = ooPlaceInnerProduct0.partiallyApply(denseVector1);
      denseVector0.apply(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      linkedList0.add(float0);
      linkedList0.clone();
      DenseVector.fromCollection(linkedList0);
      MockRandom mockRandom0 = new MockRandom(4774);
      // Undeclared exception!
      try { 
        SparseVector.random(4774, (-2879.61041761375), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        DenseVector.fromMatrixMarket(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector.fromArray(doubleArray0);
      int int0 = 106;
      DenseVector denseVector0 = DenseVector.zero(106);
      denseVector0.toArray();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseVector.random(2, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = (-2834);
      // Undeclared exception!
      try { 
        DenseVector.fromMap(hashMap0, (-2834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2834
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 10;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 10);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseVector0.forEach(consumer0);
      // Undeclared exception!
      try { 
        DenseVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.toArray();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector.random(0, mockRandom0);
      VectorMatrixOperation<DenseVector> vectorMatrixOperation0 = (VectorMatrixOperation<DenseVector>) mock(VectorMatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric((-144), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -144x-144
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      BasicVector basicVector0 = (BasicVector)DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector0.length());
      assertNotSame(basicVector0, denseVector0);
      assertTrue(basicVector0.equals((Object)denseVector0));
      assertNotNull(basicVector0);
      
      BasicVector basicVector1 = (BasicVector)DenseVector.unit(0);
      assertEquals(0, basicVector1.length());
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, denseVector0);
      assertTrue(basicVector1.equals((Object)denseVector0));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertNotNull(basicVector1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BasicVector basicVector2 = (BasicVector)DenseVector.random(0, mockRandom0);
      assertEquals(0, basicVector2.length());
      assertNotSame(basicVector2, basicVector1);
      assertNotSame(basicVector2, denseVector0);
      assertNotSame(basicVector2, basicVector0);
      assertTrue(basicVector2.equals((Object)basicVector0));
      assertTrue(basicVector2.equals((Object)denseVector0));
      assertTrue(basicVector2.equals((Object)basicVector1));
      assertNotNull(basicVector2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-68), (byte)10);
      assertEquals(7, byteArray0.length);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-47), (byte)10, (byte) (-68), (byte)20, (byte)1, (byte)16}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1881);
      // Undeclared exception!
      try { 
        DenseVector.constant((-1881), (-1881));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(17, 17);
      assertEquals(17, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(17, denseVector0.length());
      assertEquals(17, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 17);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(17, denseVector0.length());
      assertNotNull(denseVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 3487);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(3487, denseVector0.length());
      assertNotNull(denseVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 396);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        DenseVector.random((-781), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }
  
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>(0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.getInteger("CNv");
      assertNull(integer0);
      
      byte byte0 = (byte)85;
      Byte byte1 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = hashMap0.put((Integer) null, byte1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(byte1.equals((Object)byte0));
      assertNull(byte2);
      
      // Undeclared exception!
      try { 
        DenseVector.fromMap(hashMap0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-1398);
      // Undeclared exception!
      try { 
        DenseVector.unit((-1398));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      String string0 = denseVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals(0, denseVector0.length());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("%%MatrixMarket vector array real\n0\n", string0);
      assertNotNull(string0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        DenseVector.random((-3006), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-3476);
      // Undeclared exception!
      try { 
        DenseVector.zero((-3476));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseVector.fromCSV(":}POHd?Z79,*<xdU!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 241;
      DenseVector denseVector0 = DenseVector.unit(241);
      assertEquals(241, denseVector0.length());
      assertNotNull(denseVector0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        denseVector0.apply((VectorVectorOperation<Object>) null, (Vector) sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = hashMap0.remove((Object) long0, (Object) long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
      
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap1, 10);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(10, denseVector0.length());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(denseVector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(860, (-1967.0));
      assertEquals(860, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(860, denseVector0.length());
      assertEquals(860, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = denseVector0.max();
      assertEquals(860, denseVector0.length());
      assertEquals((-1967.0), double0, 0.01);
      
      DenseVector denseVector1 = DenseVector.fromCSV("");
      assertEquals(0, denseVector1.length());
      assertNotSame(denseVector1, denseVector0);
      assertFalse(denseVector1.equals((Object)denseVector0));
      assertNotNull(denseVector1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("");
      denseVector0.subtract(0.0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = (-384);
      matrix0.swapColumns(1, (-384));
      long long0 = 1664L;
      MockRandom mockRandom0 = new MockRandom(1664L);
      long long1 = 1L;
      mockRandom0.ints(1L);
      mockRandom0.doubles();
      mockRandom0.ints(1664L);
      DenseVector.random(0, mockRandom0);
      DenseVector denseVector1 = DenseVector.unit(2021);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      denseVector1.toMatrixMarket(numberFormat0);
      denseVector0.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(0, (-1690.0));
      denseVector0.blank();
      DenseVector denseVector1 = denseVector0.toDenseVector();
      Matrix matrix0 = denseVector1.toDiagonalMatrix();
      VectorMatrixOperation<DenseVector> vectorMatrixOperation0 = null;
      // Undeclared exception!
      try { 
        denseVector0.apply((VectorMatrixOperation<DenseVector>) null, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1732L);
      mockRandom0.doubles((double) 0, 874.9);
      mockRandom0.doubles();
      mockRandom0.nextFloat();
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      mockRandom0.doubles();
      denseVector0.copy();
      denseVector0.norm();
      denseVector0.subtract(1.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 874.9;
      doubleArray0[1] = 874.9;
      doubleArray0[2] = (double) 1732L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1732L;
      DenseVector denseVector1 = DenseVector.fromArray(doubleArray0);
      denseVector1.toArray();
      File file0 = MockFile.createTempFile("gLlcE", "gLlcE");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(mockFileInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.toDiagonalMatrix();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      long long0 = (-1651L);
      sequenceInputStream0.skip(long0);
      DenseVector denseVector1 = DenseVector.fromCollection(linkedList0);
      assertTrue(denseVector1.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(2457);
      denseVector0.toRowMatrix();
      DenseVector denseVector1 = DenseVector.constant(0, 0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(2457);
      Byte byte0 = new Byte((byte)37);
      hashMap0.put(integer0, byte0);
      DenseVector denseVector2 = DenseVector.fromMap(hashMap0, 2996);
      denseVector1.toColumnMatrix();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-1045.1207307011862));
      linkedList0.add(double0);
      DenseVector denseVector3 = DenseVector.fromCollection(linkedList0);
      assertNotSame(denseVector3, denseVector2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DenseVector.constant(1350, (-64.39646778));
      DenseVector denseVector0 = DenseVector.constant(1350, 1350);
      assertEquals(1350, denseVector0.length());
  }
}
