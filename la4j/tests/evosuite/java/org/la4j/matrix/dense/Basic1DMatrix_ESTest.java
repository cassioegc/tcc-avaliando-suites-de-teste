/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:42:48 GMT 2021
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.math.RoundingMode;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 30;
      MockRandom mockRandom0 = new MockRandom(2840L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(2840L);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(30, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(30, basic1DMatrix0.columns());
      assertEquals(30, basic1DMatrix0.rows());
      
      int int1 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      basic1DMatrix0.swapRows(5, 0);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertEquals(30, basic1DMatrix0.columns());
      assertEquals(30, basic1DMatrix0.rows());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(3507, (-1334));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3507
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(9, 9);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, basic1DMatrix1.columns());
      
      double double0 = basic1DMatrix1.manhattanNorm();
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(81.0, double0, 0.01);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, basic1DMatrix1.columns());
      
      Matrix matrix0 = basic1DMatrix1.copyOfRows(9);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInColumn(0, vectorProcedure0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix1.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)2;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix0);
      assertEquals(9, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.identity(9);
      assertNotNull(basic1DMatrix3);
      assertFalse(basic1DMatrix3.equals((Object)matrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix3, matrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertEquals(9, basic1DMatrix3.rows());
      assertEquals(9, basic1DMatrix3.columns());
      
      Basic1DMatrix basic1DMatrix4 = new Basic1DMatrix(9, 0);
      assertNotNull(basic1DMatrix4);
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix4.equals((Object)matrix0));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix3));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix4.equals((Object)basic1DMatrix2));
      assertEquals(0, basic1DMatrix4.columns());
      assertEquals(9, basic1DMatrix4.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix3, basic1DMatrix0, basic1DMatrix0, basic1DMatrix4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.shuffle();
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      SparseMatrix sparseMatrix0 = basic1DMatrix0.toSparseMatrix();
      assertNotNull(sparseMatrix0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      
      Vector vector0 = basic1DMatrix0.getRow(8);
      assertNotNull(vector0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)32;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix1.equals((Object)matrix0));
      assertEquals(21, byteArray0.length);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(3852064, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      LinearSystemSolver linearSystemSolver0 = basic1DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertNotNull(linearSystemSolver0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, linearSystemSolver0.equations());
      assertEquals(0, linearSystemSolver0.unknowns());
      
      basic1DMatrix0.swapRows(728, 728);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(728, 421);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(8, 16);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(16, matrix0.columns());
      assertEquals(8, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix(9, 9);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = basic1DMatrix1.diagonalProduct();
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
      
      Matrix matrix0 = basic1DMatrix0.multiply((double) 9);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      LinearSystemSolver linearSystemSolver0 = basic1DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertNotNull(linearSystemSolver0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, linearSystemSolver0.equations());
      assertEquals(0, linearSystemSolver0.unknowns());
      
      basic1DMatrix0.swapRows(0, 0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      String string0 = basic1DMatrix0.toCSV();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns(0, 421);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      basic1DMatrix0.swapRows(0, (-775));
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(9, 9);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
      
      Matrix matrix0 = basic1DMatrix1.blankOfShape(9, 9);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(9, basic1DMatrix2.columns());
      
      Matrix matrix1 = basic1DMatrix0.removeFirstRow();
      assertNotNull(matrix1);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic1DMatrix1));
      assertFalse(matrix1.equals((Object)basic1DMatrix2));
      assertFalse(matrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix1);
      assertNotSame(matrix1, basic1DMatrix2);
      assertNotSame(matrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(8, matrix1.rows());
      assertEquals(9, matrix1.columns());
      
      Matrix matrix2 = basic1DMatrix2.multiply((double) 9);
      assertNotNull(matrix2);
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(matrix2.equals((Object)basic1DMatrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)basic1DMatrix2));
      assertFalse(matrix2.equals((Object)basic1DMatrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotSame(basic1DMatrix2, matrix2);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(matrix2, basic1DMatrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, basic1DMatrix2);
      assertNotSame(matrix2, basic1DMatrix0);
      assertNotSame(matrix2, matrix1);
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(9, basic1DMatrix2.columns());
      assertEquals(9, matrix2.columns());
      assertEquals(9, matrix2.rows());
      
      double double0 = matrix2.infinityNorm();
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix2));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(matrix2.equals((Object)basic1DMatrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      assertFalse(matrix2.equals((Object)basic1DMatrix2));
      assertFalse(matrix2.equals((Object)basic1DMatrix0));
      assertFalse(matrix2.equals((Object)matrix1));
      assertEquals(8.1, double0, 0.01);
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotSame(basic1DMatrix2, matrix2);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(matrix2, basic1DMatrix1);
      assertNotSame(matrix2, matrix0);
      assertNotSame(matrix2, basic1DMatrix2);
      assertNotSame(matrix2, basic1DMatrix0);
      assertNotSame(matrix2, matrix1);
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(9, basic1DMatrix2.columns());
      assertEquals(9, matrix2.columns());
      assertEquals(9, matrix2.rows());
      
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.identity(4);
      assertNotNull(basic1DMatrix3);
      assertFalse(basic1DMatrix3.equals((Object)matrix1));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)matrix2));
      assertFalse(basic1DMatrix3.equals((Object)matrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix3, matrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, matrix2);
      assertNotSame(basic1DMatrix3, matrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertEquals(4, basic1DMatrix3.columns());
      assertEquals(4, basic1DMatrix3.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix1, basic1DMatrix0, basic1DMatrix0, matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-922091504
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(9, 9);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix2 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertEquals(0, basic1DMatrix2.columns());
      assertEquals(0, basic1DMatrix2.rows());
      
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.unit(9, 9);
      assertNotNull(basic1DMatrix3);
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix3.equals((Object)basic1DMatrix2));
      assertTrue(basic1DMatrix3.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix3, basic1DMatrix1);
      assertNotSame(basic1DMatrix3, basic1DMatrix0);
      assertNotSame(basic1DMatrix3, basic1DMatrix2);
      assertEquals(9, basic1DMatrix3.rows());
      assertEquals(9, basic1DMatrix3.columns());
      
      Matrix matrix0 = basic1DMatrix2.multiply((double) 9);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix3));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix2));
      assertFalse(matrix0.equals((Object)basic1DMatrix3));
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix3);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix3);
      assertNotSame(matrix0, basic1DMatrix2);
      assertEquals(0, basic1DMatrix2.columns());
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix3, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, basic1DMatrix1.columns());
      
      Matrix matrix0 = basic1DMatrix1.multiply((double) 9);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(9, basic1DMatrix1.rows());
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric(886, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1, 1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-16), (byte)7, (byte)2, (byte) (-33), (byte)13, (byte) (-1), (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(1, 9985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.blankOfShape(1444, 0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(1444, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(8);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      
      double double0 = basic1DMatrix0.manhattanNorm();
      assertEquals(8.0, double0, 0.01);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(9, 16);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(16, basic1DMatrix0.columns());
      
      byte[] byteArray0 = new byte[8];
      Matrix matrix0 = basic1DMatrix0.removeFirstColumn();
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(16, basic1DMatrix0.columns());
      assertEquals(9, matrix0.rows());
      assertEquals(15, matrix0.columns());
      
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)37;
      Matrix matrix1 = basic1DMatrix0.copyOfRows((byte)64);
      assertNotNull(matrix1);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(matrix1, basic1DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(16, basic1DMatrix0.columns());
      assertEquals(16, matrix1.columns());
      assertEquals(64, matrix1.rows());
      
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray1);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix0.equals((Object)matrix1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1161, byteArray1.length);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(16, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(2349, 2349, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2349, basic1DMatrix0.columns());
      assertEquals(2349, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows((-523), 2349);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1228527
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.close();
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(9, 9, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M`]p7chzj8bln%");
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(4);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(19, 4, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, basic1DMatrix0.columns());
      assertEquals(19, basic1DMatrix0.rows());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-14);
      // Undeclared exception!
      try { 
        Basic1DMatrix.diagonal((-14), (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -14x-14
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero((-14), 17);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 48;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(48, 48);
      assertNotNull(basic1DMatrix0);
      assertEquals(48, basic1DMatrix0.columns());
      assertEquals(48, basic1DMatrix0.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      basic1DMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.add(0.0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      Matrix matrix1 = basic1DMatrix0.copy();
      assertNotNull(matrix1);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic1DMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 7;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(7, 9, (-2329.08985));
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(7, basic1DMatrix0.rows());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-20);
      byte byte0 = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-37);
      byte byte1 = (byte)73;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte) (-18);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-20), (byte)13, (byte)66, (byte) (-43), (byte)0, (byte) (-37), (byte)73, (byte) (-18)}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(7, (-1410), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("[n49[:WiMziX`*1h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = basic1DMatrix1.fold(matrixAccumulator0);
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      int int0 = 652;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.identity(652);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertEquals(652, basic1DMatrix2.columns());
      assertEquals(652, basic1DMatrix2.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix2.insert((Matrix) basic1DMatrix1, 652, 652, 652, (-29), 652, 652);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 652, -29
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom(2591L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random((-643), (-1), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -643x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = 372;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(0, 372, (-221.01441635));
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      
      Vector vector0 = basic1DMatrix0.toColumnVector();
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = basic1DMatrix0.foldColumns(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertEquals(372, doubleArray0.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      
      double[][] doubleArray1 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      
      int int2 = 0;
      basic1DMatrix0.swapColumns(0, 0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      
      double double0 = basic1DMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      
      double double1 = basic1DMatrix0.manhattanNorm();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(372, 0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(372, basic1DMatrix1.rows());
      
      Matrix matrix0 = basic1DMatrix1.subtract((double) 0);
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(372, basic1DMatrix1.rows());
      assertEquals(372, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      boolean boolean0 = basic1DMatrix1.equals((Matrix) basic1DMatrix0, 0.0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix1.equals((Object)matrix0));
      assertFalse(boolean0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(372, basic1DMatrix1.rows());
      
      boolean boolean1 = basic1DMatrix1.equals((Matrix) basic1DMatrix0, (double) 0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(basic1DMatrix1.equals((Object)matrix0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(372, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(372, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix1.blankOfColumns((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 126;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L);
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(126, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(126, basic1DMatrix0.columns());
      assertEquals(126, basic1DMatrix0.rows());
      
      // Undeclared exception!
      basic1DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapRows(0, 0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns(0, 0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(652, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 3;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(3, 3);
      assertNotNull(basic1DMatrix0);
      assertEquals(3, basic1DMatrix0.rows());
      assertEquals(3, basic1DMatrix0.columns());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      String string0 = basic1DMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket matrix array real general\n3 3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n", string0);
      assertEquals(3, basic1DMatrix0.rows());
      assertEquals(3, basic1DMatrix0.columns());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-23);
      basic1DMatrix0.setAll(0.0);
      assertEquals(3, basic1DMatrix0.rows());
      assertEquals(3, basic1DMatrix0.columns());
      
      byteArray0[4] = (byte)0;
      double double0 = basic1DMatrix0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, basic1DMatrix0.rows());
      assertEquals(3, basic1DMatrix0.columns());
      
      byteArray0[5] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-1), (byte)65, (byte) (-23), (byte)0, (byte) (-94)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-329);
      MockRandom mockRandom0 = new MockRandom((-3401L));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      // Undeclared exception!
      Basic1DMatrix.random((-329), (-329), mockRandom0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 1.0);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      
      int int1 = 1000;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.transformRow(9, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(9, 9);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertEquals(9, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      
      Matrix matrix0 = basic1DMatrix0.removeFirstRow();
      assertNotNull(matrix0);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix2));
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix2));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix2);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(8, matrix0.rows());
      assertEquals(9, matrix0.columns());
      
      Matrix matrix1 = basic1DMatrix2.multiply((double) 9);
      assertNotNull(matrix1);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic1DMatrix1));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic1DMatrix2));
      assertFalse(matrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, matrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, matrix0);
      assertNotSame(matrix1, basic1DMatrix1);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix2);
      assertNotSame(matrix1, basic1DMatrix0);
      assertEquals(9, basic1DMatrix2.columns());
      assertEquals(9, basic1DMatrix2.rows());
      assertEquals(9, matrix1.rows());
      assertEquals(9, matrix1.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, basic1DMatrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 448;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      Basic1DMatrix.random(448, 448, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(4537, (-67));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1;
      int int1 = 1;
      MockRandom mockRandom0 = new MockRandom((-958L));
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1, 1, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        mockRandom0.ints(1, (-1969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(0, (-4411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-4411
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(2840L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(2840L);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.blankOfShape(0, 0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      int int1 = 2;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(0);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)matrix0));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix1, matrix0);
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      basic1DMatrix0.swapRows(5, 2);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      basic1DMatrix0.swapColumns(3507, 0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-201L));
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(4, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(0, (-4259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17036
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(0, 0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic1DMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Vector vector0 = basic1DMatrix0.getRow(0);
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, vector0.length());
      
      int int1 = 1172;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.forEach(consumer0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfRows((-8298));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -8298x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      double double0 = basic1DMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = 8;
      Vector vector0 = basic1DMatrix0.getRow(8);
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, vector0.length());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(8, 8);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(8, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = basic1DMatrix1.non(matrixPredicate0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertTrue(boolean0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(8, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      
      int int1 = 17;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.identity(17);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertEquals(17, basic1DMatrix2.rows());
      assertEquals(17, basic1DMatrix2.columns());
      
      int int2 = 2135;
      // Undeclared exception!
      try { 
        basic1DMatrix2.get(8, 2135);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2135' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1768;
      int int1 = (-599);
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(1768, (-599), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1768x-599
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 48;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 48, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {48.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(48, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.toBinary();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(0, 3740);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Vector vector0 = basic1DMatrix0.getRow(3740);
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark((-291));
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        Basic1DMatrix.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 17);
      assertNotNull(bufferedInputStream0);
      
      try { 
        Basic1DMatrix.fromMatrixMarket(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = 831;
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape(2218, (-1948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.identity((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(9, 16);
      assertNotNull(basic1DMatrix0);
      assertEquals(16, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = (-2481);
      // Undeclared exception!
      try { 
        basic1DMatrix0.set((-2481), (-2481), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2481' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(8, 8);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(8, 0);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(8, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = 301;
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 301, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(301, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(301, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(602, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2275;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random((-1255), 2275, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(378, (-99), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.blankOfShape(0, 0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(16, 16, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {16.0, 16.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertEquals(16, basic1DMatrix0.rows());
      assertEquals(16, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(9, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 5);
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(5, matrix0.columns());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int1 = 8;
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit(563, (-1514));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2584.956839567573;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2584.956839567573, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int1 = (-2365);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape((-3744), (-2365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3744x-2365
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      int int1 = 0;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, basic1DMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-828);
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix((-828), (-828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -828x-828
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 0);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3975.4546383;
      doubleArray2[2] = (-1159.6);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3975.4546383;
      doubleArray3[1] = 3975.4546383;
      doubleArray3[2] = 3975.4546383;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 3975.4546383;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1159.6);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1159.6);
      doubleArray5[1] = 3975.4546383;
      doubleArray5[2] = (-1159.6);
      doubleArray5[3] = 3975.4546383;
      doubleArray5[4] = 3975.4546383;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (-1159.6);
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-1159.6);
      doubleArray7[1] = (-1159.6);
      doubleArray7[2] = 3975.4546383;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 3975.4546383;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 3975.4546383;
      doubleArray8[3] = (-1159.6);
      doubleArray8[4] = 0.0;
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = 3975.4546383;
      doubleArray0[7] = doubleArray8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      double[][] doubleArray9 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray9);
      assertFalse(doubleArray9.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray9.length);
      assertNotSame(doubleArray0, doubleArray9);
      assertNotSame(doubleArray9, doubleArray0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-1579);
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant(3107, (-1579), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1537.79723922995;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = (-2224.209823);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      assertNotNull(basic1DMatrix0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, (Matrix) null, basic1DMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV(":G(x63!]JiWeg> c ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.removeLastRow();
      assertNotNull(matrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, matrix0.columns());
      assertEquals(7, matrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertEquals(8, doubleArray0.length);
      assertNotSame(basic1DMatrix0, matrix0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      
      int int1 = (-682);
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(36, int2);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-35);
      byte byte0 = (byte) (-49);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)32;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)0, (byte)0, (byte)38}, byteArray0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant((-682), 8, 247.084382341423);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(9, sparseMatrix0.rows());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, sparseMatrix0.density(), 0.01);
      assertEquals(9, sparseMatrix0.columns());
      assertEquals(9, sparseMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(8, 0, (-3344.4377924879136));
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.setAll(150.0);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(2500, 8);
      assertNotNull(basic1DMatrix1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(2500, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      
      basic1DMatrix1.setAll(0.0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(2500, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1514.6836642;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-427.4281);
      doubleArray2[1] = 1514.6836642;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 150.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 150.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 8;
      doubleArray3[1] = 1514.6836642;
      doubleArray3[2] = (-4917.588142255644);
      doubleArray3[3] = (double) 2500;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 8;
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-3344.4377924879136);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-3344.4377924879136);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 1514.6836642;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 2500;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-256.594200926);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (double) 8;
      doubleArray7[1] = (-3344.4377924879136);
      doubleArray0[6] = doubleArray7;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix2);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(7, doubleArray0.length);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertEquals(7, basic1DMatrix2.rows());
      assertEquals(1, basic1DMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-3520.1946109833);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3520.1946109833);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3520.1946109833);
      doubleArray2[5] = 2713.67678282488;
      doubleArray0[1] = doubleArray2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(5, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.getRow(431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 48;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(48, 48);
      assertNotNull(basic1DMatrix0);
      assertEquals(48, basic1DMatrix0.rows());
      assertEquals(48, basic1DMatrix0.columns());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-1220);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray((-1), (-1220), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1220
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(10, 10);
      assertNotNull(basic1DMatrix0);
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(809, byteArray0.length);
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero((-629), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -629x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1434.31;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 3395.426505264693;
      doubleArray2[3] = (-501.8068132727);
      doubleArray0[1] = doubleArray2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(147);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert((Matrix) basic1DMatrix1, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 9 rows and 9 cols at 0, 0 in a 2x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      basic1DMatrix0.toCSV();
      Matrix matrix0 = basic1DMatrix0.rotate();
      basic1DMatrix0.multiply(matrix0);
      basic1DMatrix0.toDenseMatrix();
      basic1DMatrix0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(10, 10, doubleArray0);
      assertEquals(10, basic1DMatrix0.columns());
      assertEquals(10, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.constant((-1345), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1345x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)104;
      byte byte1 = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-69);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(71, (-1007.0));
      // Undeclared exception!
      try { 
        basic1DMatrix0.getRow(71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1000, 1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(8, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)61;
      byte byte2 = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-103);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(921, 921);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 6;
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix.random(33, 6, mockRandom0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("org.la4j.Matrices$22");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.la4j.Matrices$22\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 30;
      MockRandom mockRandom0 = new MockRandom(2840L);
      mockRandom0.doubles(2840L);
      mockRandom0.nextFloat();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(30, mockRandom0);
      int int1 = 0;
      basic1DMatrix0.blankOfShape(30, 0);
      int int2 = (-668);
      Basic1DMatrix.identity(0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(5, (-668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20040
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3975.4546383;
      doubleArray2[2] = (-1159.6);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 3975.4546383;
      doubleArray3[1] = 3975.4546383;
      doubleArray3[2] = 3975.4546383;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 3975.4546383;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1159.6);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1159.6);
      doubleArray5[1] = 3975.4546383;
      doubleArray5[2] = (-1159.6);
      doubleArray5[3] = 3975.4546383;
      doubleArray4[2] = 3975.4546383;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (-1159.6);
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-1159.6);
      doubleArray7[1] = (-1159.6);
      doubleArray7[2] = 3975.4546383;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 3975.4546383;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 3975.4546383;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray3[0] = 3975.4546383;
      doubleArray8[6] = 3975.4546383;
      doubleArray0[7] = doubleArray8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      
      double[][] doubleArray9 = basic1DMatrix0.toArray();
      assertEquals(8, doubleArray9.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      basic1DMatrix0.withSolver(linearAlgebra_SolverFactory0);
      basic1DMatrix0.swapRows(0, 0);
      basic1DMatrix0.toCSV();
      basic1DMatrix0.swapColumns(0, 421);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      basic1DMatrix0.swapRows(0, (-775));
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(9, 9);
      basic1DMatrix1.copyOfRows(9);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.removeFirstRow();
      Matrix matrix1 = basic1DMatrix2.multiply((double) 9);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix0, basic1DMatrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(9, 9);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(9, 9);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      Matrix matrix0 = basic1DMatrix2.multiply((double) 9);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.shuffle();
      basic1DMatrix0.toSparseMatrix();
      int int0 = 8;
      basic1DMatrix0.getRow(8);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
