/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:22:28 GMT 2021
 */

package org.la4j.matrix;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DenseMatrix_ESTest extends DenseMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random random0 = null;
      // Undeclared exception!
      try { 
        DenseMatrix.random(2700, 1596, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.toMatrixMarket((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 20;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(20);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        DenseMatrix.block(matrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '21' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2040, 1);
      denseMatrix0.rotate();
      int int0 = 0;
      denseMatrix0.getRow(0);
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      int int1 = 0;
      denseMatrix1.power(0);
      denseMatrix0.norm();
      denseMatrix1.getRow(1);
      // Undeclared exception!
      try { 
        denseMatrix1.getRow(2040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2040
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(32, 32, doubleArray0);
      int int0 = 560;
      // Undeclared exception!
      try { 
        denseMatrix0.getColumn(560);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '560' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1453;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1453, 0, doubleArray0);
      DenseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2426;
      DenseMatrix.zero(2426, 2426);
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2167;
      // Undeclared exception!
      try { 
        DenseMatrix.randomSymmetric(2167, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 659.29511417;
      doubleArray1[1] = 100.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-362.0);
      doubleArray1[4] = 3940.308251;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1198.3);
      doubleArray2[1] = 100.0;
      doubleArray2[2] = 3940.308251;
      doubleArray2[3] = 3940.308251;
      doubleArray2[4] = (-362.0);
      doubleArray2[5] = 100.0;
      doubleArray2[6] = (-362.0);
      doubleArray2[7] = 3940.308251;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 100.0;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.apply((MatrixOperation<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-2302);
      // Undeclared exception!
      try { 
        DenseMatrix.constant((-2302), (-2302), (-2302));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, 1);
      Matrix matrix0 = denseMatrix0.blank();
      DenseMatrix.unit(1, 1);
      DenseMatrix.constant(1, 1, 1);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = (double) 1;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = denseMatrix1.toSparseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      sparseMatrix0.fold(matrixAccumulator0);
      // Undeclared exception!
      try { 
        DenseMatrix.block(denseMatrix0, sparseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1159;
      doubleArray0[1] = (double) 1159;
      doubleArray0[2] = (double) 1159;
      doubleArray0[3] = (double) 1159;
      doubleArray0[4] = (double) 1159;
      doubleArray0[5] = (double) 1159;
      doubleArray0[6] = (double) 1159;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1159, 1159, doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        denseMatrix0.toMatrixMarket(numberFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 37;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(37);
      denseMatrix0.min();
      int int1 = 9;
      // Undeclared exception!
      try { 
        DenseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      DenseMatrix denseMatrix1 = DenseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      DenseVector denseVector0 = DenseVector.fromCSV("");
      denseMatrix1.setColumn(0, (Vector) denseVector0);
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 288.6645461775084;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = 288.6645461775084;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 288.6645461775084;
      doubleArray6[8] = 288.6645461775084;
      doubleArray0[5] = doubleArray6;
      DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.toColumnMajorSparseMatrix();
      denseMatrix0.toMatrixMarket((NumberFormat) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(32, 10);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(32);
      DenseMatrix denseMatrix2 = DenseMatrix.constant(933, 10, 0.0);
      denseMatrix2.insert((Matrix) denseMatrix0);
      denseMatrix1.toArray();
      int int1 = (-975);
      long long0 = 1L;
      // Undeclared exception!
      denseMatrix1.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2004);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      try { 
        DenseMatrix.fromMatrixMarket(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(0, (-1), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.apply((MatrixVectorOperation<String>) null, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      double double0 = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, 0.0);
      int int1 = (-2166);
      DenseVector denseVector0 = DenseVector.unit(0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-2556.375052207);
      doubleArray2[1] = 2273.033532424802;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 3111.3741310968667;
      doubleArray3[3] = 2273.033532424802;
      doubleArray3[4] = 2273.033532424802;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      denseMatrix0.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.constant((-954), 0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1864);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(1000, (-1864));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.randomSymmetric(32, mockRandom0);
      mockRandom0.nextFloat();
      DenseMatrix.random(32, 0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 863.8843742719707;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (-1330.114);
      doubleArray1[6] = 532.13;
      doubleArray1[7] = 1.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 79.9908932517638;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1489.983429;
      doubleArray1[4] = (-3127.0);
      doubleArray1[5] = (-205.3922);
      doubleArray1[6] = 57.7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2493.28528665096;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1489.983429;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "\" D&jT?#Hh%(#$im";
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("\" D&jT?#Hh%(#$im");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DenseMatrix.unit(0, 0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("-+v7.r>6od+WxA3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-2954);
      // Undeclared exception!
      try { 
        DenseMatrix.diagonal((-2954), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      DenseMatrix.zero(0, 0);
      int int1 = 48;
      int int2 = (-948);
      // Undeclared exception!
      try { 
        DenseMatrix.zero(48, (-948));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DenseMatrix.from1DArray(0, 0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(967, 967, (double[]) null);
      // Undeclared exception!
      try { 
        denseMatrix0.getRow(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      denseMatrix0.toCSV((NumberFormat) null);
      denseMatrix1.columnMajorIterator();
      // Undeclared exception!
      try { 
        NumberFormat.getCurrencyInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1534;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1534);
      Vector vector0 = denseMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(1534, vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1534
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      int int0 = 10;
      denseMatrix0.setAll((-1223));
      MockRandom mockRandom0 = new MockRandom((-1874L));
      // Undeclared exception!
      try { 
        DenseMatrix.random((-1223), 10, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 981;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(981);
      denseMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1346);
      // Undeclared exception!
      try { 
        DenseMatrix.identity((-1346));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.zero(0, (-2376));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 917;
      MockRandom mockRandom0 = new MockRandom((-1222L));
      // Undeclared exception!
      DenseMatrix.randomSymmetric(917, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        DenseMatrix.randomSymmetric((-470), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.randomSymmetric(0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 643;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(643, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-1939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1939.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 4113;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4113, 4113);
      double double0 = 461.4731985;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix matrix0 = Matrix.identity(4113);
      // Undeclared exception!
      DenseMatrix.block(denseMatrix0, denseMatrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 4113;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4113, 4113);
      double double0 = 461.4731985;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix matrix0 = Matrix.identity(4113);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 2721;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2721;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2721;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2721, 0, doubleArray0);
      Matrix.zero(0, 0);
      Locale locale0 = new Locale("", "org.la4j.operation.ooplace.OoPlaceMatricesAddition", "org.la4j.operation.ooplace.OoPlaceMatricesAddition");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setParseIntegerOnly(true);
      denseMatrix0.toMatrixMarket(numberFormat0);
      DenseMatrix.diagonal(0, 0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      int int1 = (-894);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(0, (-894));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2974;
      // Undeclared exception!
      DenseMatrix.unit(2974, 2974);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.getColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      denseMatrix0.columnMajorIterator();
      denseMatrix0.getColumn(0);
      DenseMatrix.constant(0, 0, 1.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-2376);
      // Undeclared exception!
      try { 
        DenseMatrix.zero(0, (-2376));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DenseMatrix.random(0, 1596, (Random) null);
      // Undeclared exception!
      DenseMatrix.identity(1596);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
