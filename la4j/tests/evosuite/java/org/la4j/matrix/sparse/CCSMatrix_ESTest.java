/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:23:40 GMT 2021
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Iterator;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.divide((-1521.4239));
      matrix0.setAll(16);
      columnMajorSparseMatrix0.determinant();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(Double.NEGATIVE_INFINITY);
      cCSMatrix0.getRow(1076);
      matrix0.getRow((-845));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1184, 1184);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cCSMatrix0.getOrElse(0, 0, 2029.6207);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, (-1381.8937311));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(2803, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2803
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(709, 709);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0300972605412748E7).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(709, vectorAccumulator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 709;
      intArray0[1] = 709;
      intArray0[2] = 709;
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0300972605412748E7;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = 1.0300972605412748E7;
      doubleArray1[3] = (-4565.8508140311205);
      doubleArray1[4] = 1.0300972605412748E7;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (double) 709;
      doubleArray1[7] = (double) 709;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 709;
      doubleArray2[1] = (double) 13;
      doubleArray2[2] = (double) 709;
      doubleArray2[3] = 1.0300972605412748E7;
      doubleArray2[4] = 1.0300972605412748E7;
      doubleArray2[5] = (double) 709;
      doubleArray2[6] = (double) 709;
      doubleArray2[7] = (double) 709;
      doubleArray2[8] = (double) 13;
      doubleArray0[1] = doubleArray2;
      CCSMatrix.from2DArray(doubleArray0);
      intArray0[3] = 13;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(322, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = 2560.760464892351;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray1[1] = (-1476.8596013847);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2560.760464892351;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3209.512829918701;
      doubleArray1[8] = (-1381.8937311);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2560.760464892351).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(6, vectorFunction0);
      matrix0.kroneckerProduct(cCSMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(6, 6, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-24);
      byte byte0 = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 1612;
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(1612);
          double[] doubleArray0 = new double[4];
          doubleArray0[0] = (double) 1612;
          doubleArray0[1] = (double) 1612;
          doubleArray0[2] = (double) 1612;
          doubleArray0[3] = (double) 1612;
          String[] stringArray0 = new String[1];
          String string0 = "";
          EvoSuiteFile evoSuiteFile0 = null;
          byte[] byteArray0 = new byte[4];
          // Undeclared exception!
          cCSMatrix0.removeRow(13);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      mockRandom0.longs(1L, (-1L), 2252L);
      Matrix matrix0 = cCSMatrix1.transformRow(13, vectorFunction0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(0, 0);
      cCSMatrix0.diagonalProduct();
      matrix0.blankOfShape(0, 0);
      cCSMatrix2.getRow((-1098));
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 13;
      intArray0[6] = (-1098);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldRow(13, vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 48;
      int int1 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 369.0;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 48;
      doubleArray0[6] = (double) 48;
      doubleArray0[7] = (double) 48;
      CCSMatrix cCSMatrix0 = new CCSMatrix(48, 48, 0, doubleArray0, (int[]) null, (int[]) null);
      cCSMatrix0.toColumnMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transform(matrixFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.divide((-1521.4239));
      matrix0.setAll(16);
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(Double.NEGATIVE_INFINITY);
      cCSMatrix0.getRow(1076);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1408.847110329);
      doubleArray2[1] = 1451.9376209004;
      doubleArray2[2] = (-606.430409232055);
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(9, 1.0, (Random) mockRandom0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1114;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1114);
      int int1 = (-3925);
      cCSMatrix0.rowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(3315L);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(815.4260312074645, 815.4260312074645, (double)(-3925), (double)1114).when(vectorAccumulator0).accumulate();
      cCSMatrix0.maxInColumn(32);
      // Undeclared exception!
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 48;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 369.0;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 48;
      doubleArray0[6] = (double) 48;
      doubleArray0[7] = (double) 48;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 48);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.iteratorOfColumn(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      int int1 = 888;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 888);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, (double) 888, (Random) mockRandom0);
      int int2 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      mockRandom0.longs(1L, (-1L), 2252L);
      Matrix matrix0 = cCSMatrix1.transformRow(13, vectorFunction0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(888, 0);
      int int3 = 0;
      cCSMatrix0.diagonalProduct();
      matrix0.blankOfShape(888, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix2.updateAt(0, 888, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      Locale locale0 = Locale.FRENCH;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 3161;
      doubleArray0[2] = (-494.7543475);
      doubleArray0[3] = (double) 3161;
      int[] intArray0 = new int[8];
      intArray0[0] = 3161;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 3161;
      intArray0[4] = 911;
      intArray0[5] = 911;
      intArray0[6] = 7;
      intArray0[7] = 911;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3161, 911, 7, doubleArray0, intArray0, intArray0);
      cCSMatrix0.getRow(113);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(13, 2);
      cCSMatrix1.copyOfShape(8, 2);
      NumberFormat.getInstance(locale0);
      try { 
        numberFormat0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2560.760464892351;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray1[1] = (-1476.8596013847);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2560.760464892351;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1476.8596013847);
      doubleArray1[7] = 3209.512829918701;
      doubleArray1[8] = (-1381.8937311);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(6, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(6, 6, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 48, 0.5, (Random) mockRandom0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Matrix.constant(2, 3, (-1260.9383852));
      Matrix.constant(48, 0, 297.8077552813985);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (double) 0, (Random) mockRandom1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1114;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1114);
      int int1 = (-3925);
      cCSMatrix0.rowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(3315L);
      cCSMatrix0.getRow(1407);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1114, 1136.0, (double)(-3925), 567.958492960113).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.update((MatrixFunction) null);
      mockRandom0.nextDouble();
      cCSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).eachInColumn(0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(Double.NEGATIVE_INFINITY);
      CCSMatrix.random(6, 3, (double) 0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(369, 369);
      cCSMatrix0.nonZeroAt(369, 7);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 107;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(107);
      cCSMatrix0.min();
      int int1 = 1504;
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.nonZeroIteratorOfRow(1571);
      cCSMatrix1.blankOfRows(107);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      try { 
        numberFormat0.parse("](N1!=NU/h*");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable number: \"](N1!=NU/h*\"
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixFactory<Matrix> matrixFactory1 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5);
      org.evosuite.runtime.Random.setNextRandom(32);
      cCSMatrix0.blankOfShape(5, 2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, (-843));
      cCSMatrix0.max();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Matrix.constant(2, 3, (-1260.9383852));
      Matrix.constant(48, 0, 297.8077552813985);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(48);
      cCSMatrix0.toBinary();
      CCSMatrix.fromCSV("      ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(632, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 13;
      double[] doubleArray0 = new double[1];
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)117;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal((byte)117, (-2919.407));
      // Undeclared exception!
      columnMajorSparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(16, mockRandom0);
      inPlaceCopyMatrixToMatrix0.partiallyApply((ColumnMajorSparseMatrix) cCSMatrix0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cCSMatrix0);
      cCSMatrix0.kroneckerProduct(matrix0);
      ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      matrix0.getRow((-940));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 13;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 13;
      doubleArray0[8] = (double) 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      org.evosuite.runtime.Random.setNextRandom(13);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2560.760464892351;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray1[1] = (-1476.8596013847);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2560.760464892351;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3209.512829918701;
      doubleArray1[8] = (-1381.8937311);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(6, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(6, 6, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = 888;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(888);
      MatrixProcedure matrixProcedure0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(2086.45765);
      cCSMatrix0.toBinary();
      Matrix.constant(2, 3, (-1260.9383852));
      Matrix.constant(48, 0, 297.8077552813985);
      cCSMatrix0.infinityNorm();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1989;
      int int1 = 1079;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1989, 1079);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1827;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1827);
      int int1 = 828;
      cCSMatrix0.minInColumn(828);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      cCSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      columnMajorSparseMatrix0.setRow(0, (-1.0));
      Matrix.constant(16, 16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-351), 0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -351x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 13;
      doubleArray0[8] = (double) 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      org.evosuite.runtime.Random.setNextRandom(13);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1114;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1114);
      int int1 = (-3925);
      cCSMatrix0.rowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(3315L);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3063;
      doubleArray0[4] = (double) 3063;
      doubleArray0[5] = (double) 3063;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 3063;
      // Undeclared exception!
      CCSMatrix.from1DArray(1, 3063, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CCSMatrix.diagonal(4, (-843));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 3319;
      int int1 = 1577;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      double double0 = 0.0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 8, 1);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      NumberFormat.getInstance(locale0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CCSMatrix.from1DArray(0, 889, doubleArray0);
      org.evosuite.runtime.Random.setNextRandom((-930));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1453, 1453, 48);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cCSMatrix0.setColumn(37, (double) 48);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Matrix.constant(2, 3, (-1260.9383852));
      Matrix.constant(48, 0, 297.8077552813985);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1162, 1162, 3052);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.transpose();
      cCSMatrix0.diagonalProduct();
      cCSMatrix0.min();
      cCSMatrix0.minInColumn(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(2661, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2661
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)27;
      byteArray0[1] = (byte)27;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = (-1291);
      cCSMatrix0.toRowVector();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(rowMajorSparseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.multiply((double) (byte)0);
      cCSMatrix0.sum();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      NumberFormat.getPercentInstance();
      cCSMatrix0.toCSV(numberFormat0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((-1291), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1291
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[0];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2361);
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 1912;
      doubleArray0[3] = (double) 9;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(9, 9, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(30, 30, 30);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(1316);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1316
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = (-1924);
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfShape((-1924), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1924x6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 413, 0);
      cCSMatrix0.equals((Object) "org.la4j.matrix.sparse.CCSMatrix$4");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(32, vectorProcedure0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 32;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 4;
      int int1 = 22;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 22, 4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.toBinary();
      int int2 = (-909);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(4, (-909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-909
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      int int1 = 888;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 888);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.longs((long) 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, (double) 888, (Random) mockRandom0);
      int int2 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      mockRandom0.longs(1L, (-1L), 2252L);
      cCSMatrix1.transformRow(13, vectorFunction0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(888, 0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix2.minInRow((-1962));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1962' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 1989;
      int int1 = 1079;
      CCSMatrix.zero(1989, 1079);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(450);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(450, cCSMatrix0.rows());
      assertEquals(0.0022222222222222222, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(450, cCSMatrix0.columns());
      assertEquals(450, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cCSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertEquals(1, doubleArray0.length);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(1530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1530
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-1373);
      int int1 = (-600);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-1373), (-600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1373x-600
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      int int1 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInRow(0, vectorAccumulator0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(vectorIterator0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      int int2 = (-534);
      int int3 = 0;
      // Undeclared exception!
      try { 
        CCSMatrix.zero(0, (-534), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-534
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1327, 1327);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1327, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1327, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1327, 37, 1327);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1327' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, intArray0.length);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int int0 = (-1752);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn((-1752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1752
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(iterator0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.rotate();
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape((-249), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -249x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-421);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-421));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      try { 
        CCSMatrix.fromMatrixMarket(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8, 8);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 2122;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2122, 2122, 2122);
      assertEquals(2122, cCSMatrix0.rows());
      assertEquals(2122, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 32;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 32;
      CCSMatrix cCSMatrix0 = new CCSMatrix(32, 32, 32, doubleArray0, intArray0, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {32, 32, 32, 32, 32, 32, 32}, intArray0);
      assertEquals(0.03125, cCSMatrix0.density(), 0.01);
      assertEquals(32, cCSMatrix0.cardinality());
      assertEquals(32, cCSMatrix0.columns());
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, intArray0.length);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cCSMatrix0.nonZeroRowMajorIterator();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {32, 32, 32, 32, 32, 32, 32}, intArray0);
      assertEquals(0.03125, cCSMatrix0.density(), 0.01);
      assertEquals(32, cCSMatrix0.cardinality());
      assertEquals(32, cCSMatrix0.columns());
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, intArray0.length);
      
      int int1 = 0;
      double double0 = cCSMatrix0.maxInColumn(0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {32, 32, 32, 32, 32, 32, 32}, intArray0);
      assertEquals(0.03125, cCSMatrix0.density(), 0.01);
      assertEquals(32, cCSMatrix0.cardinality());
      assertEquals(32, cCSMatrix0.columns());
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, intArray0.length);
      
      int int2 = 3517;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(3517);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3517
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(2106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2106
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1410;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1410;
      doubleArray0[1] = (double) 1410;
      doubleArray0[2] = (double) 1410;
      doubleArray0[3] = (double) 1410;
      doubleArray0[4] = (double) 1410;
      doubleArray0[5] = (double) 1410;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1410, 1410, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1410
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 473;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(473, 0, 473);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-630), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 5;
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 5);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1181;
      doubleArray0[1] = (double) 1181;
      doubleArray0[2] = (double) 1181;
      doubleArray0[3] = (double) 1181;
      doubleArray0[4] = (double) 1181;
      doubleArray0[5] = (double) 1181;
      doubleArray0[6] = (double) 1181;
      doubleArray0[7] = (double) 1181;
      doubleArray0[8] = (double) 1181;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1181, 1181, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1181
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 1962;
      intArray0[2] = 1962;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 1962, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, intArray0.length);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(0, 1962);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2379;
      int[] intArray0 = new int[4];
      intArray0[0] = 2379;
      intArray0[1] = 2528;
      intArray0[2] = 2379;
      intArray0[3] = 2379;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2528, 434, 2379, doubleArray0, intArray0, intArray0);
      assertArrayEquals(new double[] {2379.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2379, 2528, 2379, 2379}, intArray0);
      assertEquals(2379, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(434, cCSMatrix0.columns());
      assertEquals(2528, cCSMatrix0.rows());
      assertEquals(0.002168341305489121, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, intArray0.length);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(2383);
      assertArrayEquals(new double[] {2379.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2379, 2528, 2379, 2379}, intArray0);
      assertEquals(2379, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(434, cCSMatrix0.columns());
      assertEquals(2528, cCSMatrix0.rows());
      assertEquals(0.002168341305489121, cCSMatrix0.density(), 0.01);
      assertEquals(434, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(0, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2379
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-630L));
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      cCSMatrix0.setAll(0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      SparseVector sparseVector0 = SparseVector.random(1534, 0.0, (Random) mockRandom0);
      assertEquals(1534, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, denseVector0.length());
      assertEquals(1534, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1534, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cCSMatrix1, 9, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 9 rows and 6 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1862.6124249134);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1344.49945;
      doubleArray1[3] = 4449.720424642;
      doubleArray1[4] = (-1089.084924667);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2447.790882478;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1089.084924667);
      doubleArray2[1] = 4449.720424642;
      doubleArray2[2] = 4449.720424642;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1862.6124249134);
      doubleArray2[6] = 4449.720424642;
      doubleArray2[7] = 4449.720424642;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1862.6124249134);
      doubleArray3[2] = (-4752.056028081768);
      doubleArray3[3] = 2447.790882478;
      doubleArray3[4] = 4449.720424642;
      doubleArray3[5] = (-1089.084924667);
      doubleArray3[6] = (-2760.79);
      doubleArray3[7] = 4449.720424642;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1089.084924667);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-2760.79);
      doubleArray4[3] = (-1089.084924667);
      doubleArray4[4] = (-1862.6124249134);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1862.6124249134);
      doubleArray5[1] = 2447.790882478;
      doubleArray5[2] = (-1862.6124249134);
      doubleArray5[3] = (-4752.056028081768);
      doubleArray5[4] = (-1089.084924667);
      doubleArray5[5] = 2447.790882478;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 881.24;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-1089.084924667);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1344.49945;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 2447.790882478;
      doubleArray7[4] = (-2760.79);
      doubleArray7[5] = 881.24;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = (-2760.79);
      doubleArray7[8] = (-1862.6124249134);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (-1862.6124249134);
      doubleArray8[1] = (-4752.056028081768);
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 2755;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2755, 2755);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2755, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2755, cCSMatrix0.columns());
      assertEquals(2755, cCSMatrix0.cardinality());
      assertEquals(2755.0, cCSMatrix0.max(), 0.01);
      assertEquals(3.629764065335753E-4, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 8);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      VectorIterator vectorIterator0 = cCSMatrix0.iteratorOfColumn(4);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(vectorIterator0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4068, 0, matrixFunction0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(1590);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(0, 0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(8.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeLastColumn();
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(8.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.125, cCSMatrix1.density(), 0.01);
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(7, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(7, cCSMatrix1.cardinality());
      assertEquals(8.0, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      int int1 = 32;
      int int2 = 939;
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInRow(939);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '939' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3281, 3281);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(3281, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3281, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(415, 415);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(415, cCSMatrix1.rows());
      assertEquals(415, cCSMatrix1.columns());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      VectorIterator vectorIterator0 = cCSMatrix0.iteratorOfColumn(0);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(3281, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3281, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(vectorIterator0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(3281);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(3281, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3281, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3281, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      // Undeclared exception!
      cCSMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-661.8628440123);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(5824, 0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-661.8628440123), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(5824, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(7, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(5824, 0.0, (Random) mockRandom0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5824, cCSMatrix0.rows());
      assertEquals(5824, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 5824 does not equal to 5824.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      Vector vector0 = sparseVector0.add((double) 0);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      Vector vector1 = cCSMatrix0.multiply(vector0);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, vector0.length());
      assertEquals(0, vector1.length());
      assertNotNull(vector1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1538);
      int int1 = (-3902);
      double double0 = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1538), (-3902), (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-843);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-843), (-843), (double) (-843), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(9, 0.0, (Random) mockRandom0);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertEquals(9, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(9, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(13, 13);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertFalse(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(13, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(13, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.nonZeroColumnMajorIterator();
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int0 = 3319;
      int int1 = 1577;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cCSMatrix0.non(matrixPredicate0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(3319, 1577, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3319' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "";
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int0 = cCSMatrix0.rank();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, int0);
      
      MockFile mockFile0 = new MockFile("", "Gt,$C<B|gJuh+8WxS");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2560.760464892351;
      doubleArray1[1] = (-1476.8596013847);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3209.512829918701;
      doubleArray1[8] = (-1381.8937311);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(0.7777777777777778, cCSMatrix0.density(), 0.01);
      assertEquals(3209.512829918701, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertEquals(1, doubleArray0.length);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(0.7777777777777778, cCSMatrix0.density(), 0.01);
      assertEquals(3209.512829918701, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 37;
      int int1 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 37;
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 37;
      doubleArray0[5] = (double) 37;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(37, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 820.064338355469;
      doubleArray1[2] = (-1315.35487172634);
      doubleArray1[3] = (-644.801149681);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(820.064338355469, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals((-1315.35487172634), cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 336;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(336, 336, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1624, 1624);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1624, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1624, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(1624, 85);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1624, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1624, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1624, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(85, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse((-102), (-102), (-102));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-102' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(17, 17, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(3438);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3438
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfColumns(2971);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2971, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      MatrixInverter matrixInverter0 = cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(matrixInverter0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(byteArray0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(17, byteArray0.length);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(1559, vectorFunction0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 110;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(110);
      assertEquals(110, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(110, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(110, cCSMatrix0.cardinality());
      assertEquals(0.00909090909090909, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(110, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(48, 48);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(48, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(48, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2895);
      assertEquals(2895, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2895, cCSMatrix0.columns());
      assertEquals(3.454231433506045E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2895, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.minInColumn(1566);
      assertEquals(2895, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2895, cCSMatrix0.columns());
      assertEquals(3.454231433506045E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2895, cCSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = (-2756);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix((-2756), (-2756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2756x-2756
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("org.la4j.matrix.sparse.CCSMatrix$2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-880);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-880));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-355);
      intArray0[2] = 1477;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1052, 1477, 1477, doubleArray0, intArray0, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, (-355), 1477}, intArray0);
      assertEquals(1052, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9.505703422053232E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1477, cCSMatrix0.columns());
      assertEquals(1477, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, intArray0.length);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, (-355), 1477}, intArray0);
      assertEquals(1052, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9.505703422053232E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1477, cCSMatrix0.columns());
      assertEquals(1477, cCSMatrix0.cardinality());
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, intArray0.length);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2108, Double.POSITIVE_INFINITY);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(2108, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(4.743833017077799E-4, cCSMatrix1.density(), 0.01);
      assertEquals(2108, cCSMatrix1.rows());
      assertEquals(2108, cCSMatrix1.columns());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      double double0 = cCSMatrix1.minInColumn(0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(2108, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(4.743833017077799E-4, cCSMatrix1.density(), 0.01);
      assertEquals(2108, cCSMatrix1.rows());
      assertEquals(2108, cCSMatrix1.columns());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, (-245.35720947));
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(3349);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3349
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("Can not decode CCSMatrix from the given byte array.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-3064), 262.40970238, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3064x-3064
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) (-4266);
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 48;
      doubleArray0[5] = (-8.088667);
      doubleArray0[6] = (double) (-4266);
      doubleArray0[7] = (double) (-4266);
      doubleArray0[8] = (double) 17;
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = (-4266);
      intArray0[2] = 48;
      intArray0[3] = (-4266);
      intArray0[4] = 17;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix((-4266), 48, 17, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4266x48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      int int1 = 1482;
      // Undeclared exception!
      try { 
        CCSMatrix.zero(0, 0, 1482);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, 1304.1410774234, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 2356;
      int int1 = (-2315);
      MockRandom mockRandom0 = new MockRandom((-2315));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(2356, (-2315), 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = (-2266);
      MockRandom mockRandom0 = new MockRandom((-2266));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-2266), 2.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2266x-2266
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 8, 1);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2975, 2975, 2975);
      assertEquals(2975, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(2975, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(3234, 3234, (double) 3234, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)101);
      assertArrayEquals(new byte[] {(byte)101, (byte)42, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(709, 709);
      assertEquals(709, cCSMatrix0.rows());
      assertEquals(0.0014104372355430183, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(709, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(709, cCSMatrix0.cardinality());
      assertEquals(709.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)709).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInRow(709, vectorAccumulator0);
      assertEquals(709, cCSMatrix0.rows());
      assertEquals(0.0014104372355430183, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(709, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(709, cCSMatrix0.cardinality());
      assertEquals(709.0, cCSMatrix0.max(), 0.01);
      assertEquals(709.0, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 709;
      intArray0[1] = 709;
      intArray0[2] = 709;
      intArray0[3] = 19;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '709' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 1114;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1114);
      assertEquals(1114, cCSMatrix0.rows());
      assertEquals(8.976660682226212E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1114, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1114, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int int1 = (-3925);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cCSMatrix0.rowMajorIterator();
      assertEquals(1114, cCSMatrix0.rows());
      assertEquals(8.976660682226212E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1114, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1114, cCSMatrix0.cardinality());
      assertNotNull(rowMajorMatrixIterator0);
      
      MockRandom mockRandom0 = new MockRandom(3315L);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(1407);
      assertEquals(1114, cCSMatrix0.rows());
      assertEquals(8.976660682226212E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1114, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1114, cCSMatrix0.cardinality());
      assertEquals(1114, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1114, 1136.0, (double)(-3925), 567.958492960113).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      assertEquals(12, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.08333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(12, cCSMatrix0.rows());
      assertEquals(12, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(11, 4);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(12, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.08333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(12, cCSMatrix0.rows());
      assertEquals(12, cCSMatrix0.columns());
      assertEquals(4, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(4, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.09090909090909091, cCSMatrix1.density(), 0.01);
      assertEquals(11, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      doubleArray1[0] = (double) 1943L;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray0);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertEquals(1, cCSMatrix2.rows());
      assertEquals(1.0, cCSMatrix2.density(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(1, cCSMatrix2.columns());
      assertEquals(1943.0, cCSMatrix2.max(), 0.01);
      assertEquals(1, cCSMatrix2.cardinality());
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertEquals(1, doubleArray0.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 4);
      assertNotNull(doubleStream0);
      
      CCSMatrix cCSMatrix3 = CCSMatrix.diagonal(4, (-843));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix3.equals((Object)cCSMatrix2));
      assertEquals(0.0, cCSMatrix3.max(), 0.01);
      assertEquals(4, cCSMatrix3.cardinality());
      assertEquals((-843.0), cCSMatrix3.min(), 0.01);
      assertEquals(4, cCSMatrix3.columns());
      assertFalse(cCSMatrix3.isRowMajor());
      assertEquals(4, cCSMatrix3.rows());
      assertEquals(0.25, cCSMatrix3.density(), 0.01);
      assertNotNull(cCSMatrix3);
      assertNotSame(cCSMatrix3, cCSMatrix1);
      assertNotSame(cCSMatrix3, cCSMatrix0);
      assertNotSame(cCSMatrix3, cCSMatrix2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-843);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-843), 2042, 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -843x2042
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 48;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 369.0;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 48;
      doubleArray0[6] = (double) 48;
      doubleArray0[7] = (double) 48;
      CCSMatrix cCSMatrix0 = new CCSMatrix(48, 48, 0, doubleArray0, (int[]) null, (int[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 369.0, 48.0, 0.0, 48.0, 48.0, 48.0}, doubleArray0, 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(48, cCSMatrix0.columns());
      assertEquals(48, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      columnMajorSparseMatrix0.divide((-1521.4239));
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, columnMajorSparseMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[0] = 16;
      intArray0[1] = 0;
      intArray0[5] = 16;
      intArray0[6] = 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 0, 0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(16, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      ((CCSMatrix) columnMajorSparseMatrix0).iteratorOfColumn(16);
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(2.0);
      assertEquals(2.0, columnMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      MockRandom mockRandom0 = new MockRandom(4984L);
      mockRandom0.longs((long) 0);
      mockRandom0.nextGaussian();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, (double) 888, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      mockRandom0.longs(4984L, (-1L), (long) 0);
      cCSMatrix1.transformRow(13, vectorFunction0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(888, 0);
      // Undeclared exception!
      try { 
        cCSMatrix2.minInRow((-1962));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1962' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-1428);
      // Undeclared exception!
      try { 
        Matrix.identity((-1428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2560.760464892351;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray1[1] = (-1476.8596013847);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2560.760464892351;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3209.512829918701;
      doubleArray1[8] = (-1381.8937311);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(6, vectorFunction0);
      matrix0.sum();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(6, 6, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }
}
