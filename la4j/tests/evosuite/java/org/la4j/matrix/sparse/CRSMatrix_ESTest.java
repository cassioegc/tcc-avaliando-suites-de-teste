/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:16:12 GMT 2021
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Enumeration;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 36.0, (-1.0), (-528.9477247161748), (double)16).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-528.9477247161748), (double)16, 36.0, (-1215.269991), 0.25).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      doubleArray0[4] = (double) 16;
      cRSMatrix0.copyOfShape(3, 3);
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 36.0, (-1.0), (-528.9477247161748), (double)16).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3186.5382594, 3149.9, (-4224.1800762587), Double.NEGATIVE_INFINITY, (-1904.3495)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      cRSMatrix0.set(0, 0, 4.9E-324);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      int[] intArray0 = new int[5];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix.random(1, 61, 0.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        CRSMatrix.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 14;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(14);
      cRSMatrix0.toBinary();
      int int1 = 32;
      cRSMatrix0.removeLastRow();
      int int2 = 1570;
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1570, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1570
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      int[] intArray0 = new int[7];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix cRSMatrix1 = CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(247, (-1845.4003546625));
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix2, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 36.0, (-1.0), (-528.9477247161748), (double)16).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (double)16, (-1.0), 36.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 36.0, (-1.0), (-528.9477247161748), (double)16).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int1 = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1268.191474569), 4.0, (-52.0), 1.157920892373162E77, (-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("j(ZLVj0\r=~QbN;</");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 592;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(592);
      cRSMatrix0.getColumn((-1268));
      int int1 = 0;
      CRSMatrix.randomSymmetric(0, 4891.99365385, (Random) null);
      SparseMatrix.identity(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("GX4mC1ZHq9;3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = 11;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 11;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 11, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(11, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 11 rows and 0 cols at 0, 0 in a 0x11 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[8];
          doubleArray0[0] = (double) 61;
          doubleArray0[1] = (double) 61;
          doubleArray0[1] = (double) 61;
          doubleArray0[3] = (-2787.84413);
          doubleArray0[4] = (double) 61;
          doubleArray0[5] = (double) 61;
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          doubleArray0[6] = (double) 61;
          doubleArray0[7] = (double) 61;
          int[] intArray0 = new int[5];
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
          intArray0[0] = 61;
          intArray0[1] = 61;
          doubleArray0[0] = (double) 61;
          intArray0[3] = 61;
          intArray0[4] = 61;
          CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
          cRSMatrix0.setAll((-3278.408730547));
          cRSMatrix0.min();
          MockRandom mockRandom0 = new MockRandom((-2261L));
          CRSMatrix cRSMatrix1 = CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
          cRSMatrix0.toBinary();
          cRSMatrix0.rowMajorIterator();
          // Undeclared exception!
          try { 
            CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Sides of blocks are incompatible!
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 174;
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = (double) 174;
      doubleArray0[3] = (double) 174;
      doubleArray0[4] = (double) 174;
      doubleArray0[5] = (-2029.4654198495116);
      int[] intArray0 = new int[4];
      intArray0[0] = 174;
      intArray0[1] = 174;
      intArray0[2] = (-624);
      intArray0[3] = 174;
      CRSMatrix cRSMatrix0 = new CRSMatrix(174, 174, 174, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-618), 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -618x48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(670.0, 670.0, 2453.001, 473.61650967742077, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      doubleArray0[3] = 303.6;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 174;
      CRSMatrix.identity(174);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(174, 174, 174);
      int int1 = 51;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(51, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(174);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 150;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2.");
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(150, 150);
      int int1 = 9;
      cRSMatrix0.copyOfShape(9, 150);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Sides of blocks are incompatible!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(174);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix.zero(174, 174);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(174);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '175' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1049.138433971682, (double)5, (double)5, (double)5, 1049.138433971682).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H~5 QVcK1H");
      int int0 = 2068;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2068;
      doubleArray0[3] = (double) 2068;
      doubleArray0[3] = 303.6;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 2068;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(2068, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = (double) 61;
      int[] intArray0 = new int[16];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(61);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = (double) 61;
      int[] intArray0 = new int[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix cRSMatrix1 = CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = (double) 61;
      int[] intArray0 = new int[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix cRSMatrix1 = CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 948;
      CRSMatrix cRSMatrix0 = new CRSMatrix(948, 948, 948);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix.identity(948);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(174);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      cRSMatrix0.setAll(3186.5382594);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = (double) 61;
      int[] intArray0 = new int[8];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[2] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = (double) 61;
      int[] intArray0 = new int[5];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      CRSMatrix.from1DArray(17, 0, doubleArray0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(0, 17, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1042.40997358;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      CRSMatrix.from1DArray(2, 2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      double double0 = 22948.861113829;
      double double1 = 2125.42;
      double double2 = (-2853.724);
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(3576.0, 3576.0, (double)16, 3576.0, 3576.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 280.5329777099263;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(969, 969, 969);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.blankOfShape(969, 969);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(969);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 970
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      doubleArray0[7] = (double) 61;
      int[] intArray0 = new int[5];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      int int0 = 13;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom((-2261L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.toRowVector();
      CRSMatrix.from1DArray(0, 0, doubleArray0);
      cRSMatrix0.blankOfShape(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 39, 1.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1405.213418652693);
      doubleArray1[2] = 873.4142069317;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[0] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      doubleArray0[4] = (double) 16;
      cRSMatrix0.getColumn(697);
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 58;
      doubleArray0[1] = (double) 58;
      doubleArray0[1] = (double) 58;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 58;
      doubleArray0[5] = (double) 58;
      doubleArray0[6] = (double) 58;
      doubleArray0[7] = (double) 58;
      int[] intArray0 = new int[5];
      intArray0[0] = 58;
      doubleArray0[0] = (double) 58;
      doubleArray0[0] = (double) 58;
      intArray0[3] = 58;
      intArray0[4] = 58;
      CRSMatrix cRSMatrix0 = new CRSMatrix(58, 58, 58, doubleArray0, (int[]) null, (int[]) null);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      CRSMatrix cRSMatrix1 = CRSMatrix.random(13, 58, 0.0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, (double)16, (double)16, (double)16, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      cRSMatrix0.iteratorOfRow(3);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2316, 0.9);
      cRSMatrix0.add(410.8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(1454, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 174;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(174);
      // Undeclared exception!
      cRSMatrix0.mkString("", "");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 0, doubleArray0, intArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(0, vectorFunction0);
      cRSMatrix0.getColumn(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-101);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 0, doubleArray0, intArray0, intArray0);
      CRSMatrix.identity(477);
      cRSMatrix0.maxInRow(1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cRSMatrix0.toBinary();
      int int1 = 32;
      cRSMatrix0.setAll(32);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.copyOfShape(0, 0);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-1), 0, 3051);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-699);
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(52);
      RowMajorSparseMatrix.identity(0);
      cRSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal column number, must be 0..51
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-281.01079627462);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=}@mNA&k%%m~_a");
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rowMajorIterator();
      Matrix matrix0 = cRSMatrix0.divide(Double.NEGATIVE_INFINITY);
      cRSMatrix0.copyOfShape(4614, 3895);
      cRSMatrix0.rowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      double[][] doubleArray3 = new double[5][7];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      CRSMatrix.from2DArray(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-281.01079627462);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=}@mNA&k%%m~_a");
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.divide(Double.NEGATIVE_INFINITY);
      cRSMatrix0.copyOfShape(4614, 3895);
      cRSMatrix0.rowMajorIterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 31;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(31, 31, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      intArray0[1] = 31;
      cRSMatrix0.removeFirstColumn();
      mockRandom0.doubles((long) 31);
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[1][6];
      double[] doubleArray2 = new double[5];
      doubleArray2[3] = (-927.0);
      doubleArray1[0] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.manhattanNorm();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll((-3221.738137689));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 426.374;
      doubleArray1[2] = 3055.6;
      doubleArray1[3] = (-1208.89559672772);
      doubleArray1[4] = 100.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2227.3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1208.89559672772);
      doubleArray2[1] = 3055.6;
      doubleArray2[2] = 3055.6;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 426.374;
      doubleArray2[6] = 3055.6;
      doubleArray2[7] = 3055.6;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cRSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 2, 0, 2, (-1617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2x-1617
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 346;
      CRSMatrix cRSMatrix0 = new CRSMatrix(346, 346, 346);
      double double0 = new Integer(2570);
      org.evosuite.runtime.Random.setNextRandom((-2146555645));
      cRSMatrix0.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(346, vectorAccumulator0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(2570, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2570
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2316.14855, (-101.795244), 2316.14855, 100.0, 0.7).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int1 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      double double0 = 303.6;
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-323));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -323
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blankOfRows(7);
      cRSMatrix0.minInColumn(2079);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cRSMatrix1.nonZeroIteratorOfColumn((-605));
      // Undeclared exception!
      try { 
        cRSMatrix1.getRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(353, 353);
      cRSMatrix0.subtract((double) 1);
      cRSMatrix0.set(1, 147, 147);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 854;
      CRSMatrix cRSMatrix0 = new CRSMatrix(854, 1614);
      cRSMatrix0.minInRow(851);
      int[] intArray0 = new int[7];
      intArray0[0] = 854;
      intArray0[1] = 1366;
      intArray0[2] = 1614;
      intArray0[3] = 1614;
      intArray0[4] = 851;
      intArray0[5] = 854;
      intArray0[6] = 851;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1032.34622772747);
      doubleArray0[1] = (double) 7;
      int[] intArray0 = new int[9];
      intArray0[5] = 1616;
      intArray0[1] = 7;
      intArray0[2] = 1616;
      intArray0[3] = 1616;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1616, 1616);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-159));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -159
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      matrix0.mkString(numberFormat0, "eg#t.[&**G?", "This matrix can't grow up.");
      cRSMatrix0.kroneckerProduct(matrix0);
      cRSMatrix0.getColumn(4);
      MockRandom mockRandom0 = new MockRandom((-1253L));
      // Undeclared exception!
      try { 
        CRSMatrix.random(4, 4, (double) 4, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1510;
      Matrix matrix0 = Matrix.constant(1510, 1510, 1510);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1511
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      cRSMatrix0.blankOfShape(0, 2);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      mockRandom0.longs((long) 0);
      mockRandom0.longs(0L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 0, (double) 2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      cRSMatrix0.norm();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 32, 0);
      cRSMatrix0.rowMajorIterator();
      CRSMatrix.zero(1387, 0, 0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 3165;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3165, 3165, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberFormat.getCurrencyInstance();
      cRSMatrix0.toCSV(numberFormat0);
      cRSMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.min();
      cRSMatrix0.equals((Object) "q.aA'i,M");
      // Undeclared exception!
      try { 
        cRSMatrix0.set(13, 8, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CRSMatrix.fromCSV("");
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1484.639;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-2147.3217863);
      doubleArray1[3] = 677.94108921;
      doubleArray1[4] = (-4224.1800762587);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 677.94108921;
      doubleArray2[2] = (-4224.1800762587);
      doubleArray2[3] = 677.94108921;
      doubleArray2[4] = 1484.639;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1484.639;
      doubleArray3[1] = (-4224.1800762587);
      doubleArray3[2] = (-4224.1800762587);
      doubleArray3[3] = 677.94108921;
      doubleArray3[4] = 677.94108921;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 677.94108921;
      doubleArray4[1] = (-4224.1800762587);
      doubleArray4[2] = (-2147.3217863);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 677.94108921;
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1484.639;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 677.94108921;
      doubleArray5[4] = 1484.639;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-4224.1800762587);
      doubleArray6[2] = (-2147.3217863);
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = 1037.269415002975;
      doubleArray6[5] = 1484.639;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-2147.3217863);
      doubleArray7[1] = 1037.269415002975;
      doubleArray7[2] = 1484.639;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = (-4224.1800762587);
      doubleArray7[6] = (-1.0);
      doubleArray7[7] = 677.94108921;
      doubleArray7[8] = (-4224.1800762587);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 1484.639;
      doubleArray8[1] = (-2147.3217863);
      doubleArray8[2] = 677.94108921;
      doubleArray8[3] = 1037.269415002975;
      doubleArray8[4] = (-3435.140788095);
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = Double.POSITIVE_INFINITY;
      doubleArray8[7] = (-2147.3217863);
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 1484.639;
      doubleArray9[1] = (-4224.1800762587);
      doubleArray9[2] = (-2147.3217863);
      doubleArray9[3] = 1484.639;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.getColumn(0);
      cRSMatrix0.product();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad row argument 0; out of bounds
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copyOfShape(2, 2);
      MockRandom mockRandom0 = new MockRandom(1);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1, (-4784), (double) (-4784), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(784, 784, 784);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.identity(0);
      CRSMatrix.fromBinary(byteArray0);
      int int1 = 0;
      double double0 = (-1.0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 32;
      CRSMatrix.identity(32);
      double double0 = 198.9822451018592;
      int int1 = (-1378);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket(sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-306), (-306));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3634;
      doubleArray0[2] = (double) 3634;
      doubleArray0[3] = 652.7881019685913;
      doubleArray0[4] = (-4169.244413907);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 3634;
      doubleArray0[7] = (double) 3634;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      RowMajorSparseMatrix.from1DArray(3634, 9, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byte byte1 = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-1946));
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1693;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(1693, 1693, 0.0, (Random) mockRandom0);
      MatrixVectorOperation<Double> matrixVectorOperation0 = (MatrixVectorOperation<Double>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      int int1 = 2719;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1693;
      doubleArray0[1] = (double) (-655);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-655);
      doubleArray0[4] = (double) (-655);
      doubleArray0[5] = (double) 1693;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-655), 1693, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -655x1693
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1156);
      int int1 = 4;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1156), 4, 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 4;
      int int1 = 656;
      int int2 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 656, 0);
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn((-643), vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -578
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      int int1 = 13;
      Matrix matrix0 = cRSMatrix0.rotate();
      cRSMatrix0.subtract(matrix0);
      cRSMatrix0.toMatrixMarket();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(0, 13, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 16;
      CRSMatrix.zero(16, 16);
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((double) 16, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric((-548), (double) 16, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -548x-548
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2896), (-3717), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2896x-3717
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 100.0);
      Matrix matrix0 = cRSMatrix0.blankOfRows(0);
      cRSMatrix0.minInColumn(2079);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cRSMatrix1.nonZeroIteratorOfColumn((-605));
      // Undeclared exception!
      try { 
        cRSMatrix1.getRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 551;
      int int1 = (-2089);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(551, (-2089));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 551x-2089
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      double double0 = Double.POSITIVE_INFINITY;
      long long0 = 74L;
      MockRandom mockRandom0 = new MockRandom(74L);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, Double.POSITIVE_INFINITY, (Random) mockRandom0);
      mockRandom0.nextDouble();
      mockRandom0.nextBoolean();
      cRSMatrix0.isColumnMajor();
      int int1 = 811;
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(811);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 812
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(818, 818, 942);
      RowMajorSparseMatrix.zero(818, 818);
      int int0 = (-2389);
      int int1 = 2624;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRow(2624, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2624
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-3092.60907055548), (Random) mockRandom0);
      mockRandom0.nextBoolean();
      cRSMatrix0.setAll((-1660.6199));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3092.60907055548);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1660.6199);
      doubleArray0[3] = (-3092.60907055548);
      doubleArray0[4] = (-3092.60907055548);
      doubleArray0[5] = (-3092.60907055548);
      doubleArray0[6] = (double) 0;
      CRSMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(0, 0, (-1660.6199));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 2390;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CRSMatrix.randomSymmetric(2390, 0.0, (Random) mockRandom0);
      int int1 = 0;
      double double1 = (-799.847970291);
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)0;
      mockRandom0.nextFloat();
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-20);
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(4, (double) 4, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 16.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.matrix.sparse.CRSMatrix$5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 7;
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = (-323);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(2, (-323), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 360;
      int int1 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(360, 13, 13);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.setRow(13, 3044.43906211);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(360, (-2717.828109749303), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -352230523.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 864;
      double double0 = (-1353.372869925);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(864, (-1353.372869925));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(864, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 865
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1827, 0);
      cRSMatrix0.product();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(0, (-848));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 313;
      int int1 = (-1089);
      int int2 = 2955;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(313, (-1089), 2955);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 313x-1089
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1295L);
      mockRandom0.nextLong();
      mockRandom0.nextLong();
      mockRandom0.nextFloat();
      mockRandom0.setSeed(0L);
      mockRandom0.nextGaussian();
      mockRandom0.nextInt((-4465));
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (-1737.2301988074175), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 130;
      doubleArray0[5] = (double) 130;
      doubleArray0[6] = (double) 130;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 130;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(130, 130, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.copyOfRows(9);
      cRSMatrix0.nonZeroAt(0, 1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.setColumn((-853), 83.57203723730156);
      cRSMatrix0.nonZeroIteratorOfRow(0);
      cRSMatrix0.max();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(465, 0, 0);
      CRSMatrix.identity(465);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-2437), (-2437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2437x-2437
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-530);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-530);
      doubleArray0[1] = (double) (-2790);
      doubleArray0[2] = (double) (-2790);
      doubleArray0[3] = (double) (-530);
      doubleArray0[4] = (double) (-530);
      doubleArray0[5] = (double) (-530);
      doubleArray0[6] = (double) (-2790);
      doubleArray0[7] = (double) (-2790);
      doubleArray0[8] = (double) (-2790);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-2790), (-530), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2790x-530
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 415;
      intArray0[1] = (-2959);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(0, 415, (-2959), doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2959.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 554.235391891728;
      doubleArray1[1] = 2617.522;
      doubleArray1[2] = 1337.829766;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      int int1 = (-81);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfRows((-81));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -81x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(4, 0, 100.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)48;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = (-667);
      long long0 = 0L;
      sequenceInputStream0.skip(0L);
      sequenceInputStream0.mark((-667));
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket(sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 426.374;
      doubleArray1[2] = 3055.6;
      doubleArray1[3] = (-1208.89559672772);
      doubleArray1[4] = 100.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2227.3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1208.89559672772);
      doubleArray2[1] = 3055.6;
      doubleArray2[2] = 3055.6;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 426.374;
      doubleArray2[6] = 3055.6;
      doubleArray2[7] = 3055.6;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1420.5619321537429;
      doubleArray1[2] = 815.931529165;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 2956.0385444568;
      doubleArray1[5] = (-1605.443799);
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-281.14345333899774);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (-1605.443799);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1420.5619321537429;
      doubleArray3[2] = 815.931529165;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1605.443799);
      doubleArray4[1] = (-1605.443799);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 2956.0385444568;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1420.5619321537429;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-1321);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-1321), (-1321), (-1321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1321x-1321
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1739;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 1739;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 1739;
      doubleArray0[6] = (double) 1739;
      doubleArray0[7] = (double) 1739;
      doubleArray0[8] = (double) 1739;
      // Undeclared exception!
      CRSMatrix.from1DArray(1739, 8, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1986;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1986);
      bufferedInputStream0.mark(1986);
      try { 
        CRSMatrix.fromMatrixMarket(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 5;
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 801, 0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      numberFormat0.setMaximumIntegerDigits(0);
      cRSMatrix0.mkString(numberFormat0);
      cRSMatrix0.subtract(92.015);
      cRSMatrix0.toColumnMajorSparseMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.getColumn((-1483));
      // Undeclared exception!
      try { 
        cRSMatrix0.forEach((Consumer<? super Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1474.4777;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1474.4777;
      doubleArray2[1] = 1474.4777;
      doubleArray2[2] = 1474.4777;
      doubleArray2[3] = 1474.4777;
      doubleArray2[4] = 1474.4777;
      doubleArray2[5] = 1474.4777;
      doubleArray2[6] = (-234.3267766);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1474.4777;
      doubleArray3[1] = (-234.3267766);
      doubleArray3[2] = (-234.3267766);
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-3998.12252355769), (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.apply((MatrixVectorOperation<CRSMatrix>) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-313), (-156.1), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -313x-313
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3253, 3253, 2318);
      cRSMatrix0.max();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2318;
      doubleArray0[1] = (double) 3253;
      doubleArray0[2] = (double) 3641;
      doubleArray0[3] = (double) (-2580);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 3253;
      // Undeclared exception!
      CRSMatrix.from1DArray(2318, 3641, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-1341);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1341);
      doubleArray0[2] = (double) 2494;
      doubleArray0[3] = (double) (-1341);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1341), 2494, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1341x2494
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(91, 16, 91);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(0, vectorProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        CRSMatrix.zero(91, (-2956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 91x-2956
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 917);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 917;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 917;
      intArray0[7] = 3;
      intArray0[8] = (-1893);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-453);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-453), (-453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -453x-453
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-36);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)8;
      byteArray0[2] = (byte)8;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.copy();
      Matrix.unit(0, 0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(551, 551);
      int int0 = 2803;
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(2803);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2803
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CRSMatrix cRSMatrix0 = new CRSMatrix(36, 11, 4);
      cRSMatrix0.removeLastColumn();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 11;
      doubleArray1[3] = (double) 36;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 36;
      doubleArray2[1] = (double) 11;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-360.31);
      doubleArray1[2] = 1697.3977226409;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 3186.5382594;
      doubleArray2[1] = 1697.3977226409;
      doubleArray2[2] = 3186.5382594;
      doubleArray2[3] = (-360.31);
      doubleArray2[4] = 1697.3977226409;
      doubleArray2[5] = (-360.31);
      doubleArray2[6] = 3186.5382594;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 3186.5382594;
      doubleArray3[1] = 1697.3977226409;
      doubleArray3[2] = (-360.31);
      doubleArray3[3] = (-360.31);
      doubleArray3[4] = 3186.5382594;
      doubleArray3[5] = (-367.5363767);
      doubleArray3[6] = 1697.3977226409;
      doubleArray3[7] = (-360.31);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-367.5363767);
      doubleArray3[2] = (-360.31);
      doubleArray4[2] = (-360.31);
      doubleArray4[3] = (-367.5363767);
      doubleArray4[4] = (-360.31);
      doubleArray0[3] = doubleArray4;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CRSMatrix.zero(8, 3);
      MockRandom mockRandom0 = new MockRandom((-504L));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 592;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(592);
      cRSMatrix0.min();
      int int1 = 0;
      CRSMatrix.randomSymmetric(0, 4891.99365385, (Random) null);
      SparseMatrix.identity(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("GX4mC1ZHq9;3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = (-5089);
      int int1 = 174;
      // Undeclared exception!
      try { 
        CRSMatrix.random((-5089), 174, Double.NEGATIVE_INFINITY, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.setColumn((-853), 83.57203723730156);
      cRSMatrix0.nonZeroIteratorOfRow(0);
      cRSMatrix0.max();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CRSMatrix.fromCSV("");
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1484.639;
      doubleArray1[1] = 1484.639;
      doubleArray1[2] = (-2147.3217863);
      doubleArray1[3] = 677.94108921;
      doubleArray1[4] = (-4224.1800762587);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 677.94108921;
      doubleArray2[2] = (-4224.1800762587);
      doubleArray2[3] = 677.94108921;
      doubleArray2[4] = 1484.639;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1484.639;
      doubleArray3[1] = (-4224.1800762587);
      doubleArray3[2] = (-4224.1800762587);
      doubleArray3[3] = 677.94108921;
      doubleArray3[4] = 677.94108921;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 677.94108921;
      doubleArray4[1] = (-4224.1800762587);
      doubleArray4[2] = (-2147.3217863);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 677.94108921;
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1484.639;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 677.94108921;
      doubleArray5[4] = 1484.639;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-4224.1800762587);
      doubleArray6[2] = (-2147.3217863);
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = 1037.269415002975;
      doubleArray6[4] = 1484.639;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-2147.3217863);
      doubleArray7[1] = 1037.269415002975;
      doubleArray7[2] = 1484.639;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = (-4224.1800762587);
      doubleArray7[6] = (-1.0);
      doubleArray7[7] = 677.94108921;
      doubleArray7[8] = (-4224.1800762587);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 1484.639;
      doubleArray8[1] = (-2147.3217863);
      doubleArray8[2] = 677.94108921;
      doubleArray8[3] = 1037.269415002975;
      doubleArray8[4] = (-3435.140788095);
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = Double.POSITIVE_INFINITY;
      doubleArray8[7] = (-2147.3217863);
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = 1484.639;
      doubleArray9[1] = (-4224.1800762587);
      doubleArray9[2] = (-2147.3217863);
      doubleArray9[3] = 1484.639;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 16;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-3257.6061)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn((-643), vectorAccumulator0);
      int int0 = (-578);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(2, (double) (-578), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2312.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 948;
      CRSMatrix cRSMatrix0 = new CRSMatrix(948, 948, 948);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(948, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 949
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 32;
      int int1 = 1051;
      int int2 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(32, 1051, 1);
      // Undeclared exception!
      cRSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(174);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1405.213418652693);
      doubleArray1[2] = 873.4142069317;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 61;
      doubleArray0[1] = (double) 61;
      doubleArray0[3] = (-2787.84413);
      doubleArray0[4] = (double) 61;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      int[] intArray0 = new int[5];
      intArray0[0] = 61;
      intArray0[1] = 61;
      doubleArray0[0] = (double) 61;
      intArray0[3] = 61;
      intArray0[4] = 61;
      CRSMatrix cRSMatrix0 = new CRSMatrix(61, 61, 61, doubleArray0, intArray0, intArray0);
      cRSMatrix0.setAll((-3278.408730547));
      MockRandom mockRandom0 = new MockRandom((-2261L));
      mockRandom0.ints((long) 61);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(13, 61, 0.0, (Random) mockRandom0);
      cRSMatrix1.multiplyByItsTranspose();
      cRSMatrix0.toBinary();
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.toBinary();
      int int1 = 32;
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 36.0, (-1.0), (-528.9477247161748), (double)16).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 303.6;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
