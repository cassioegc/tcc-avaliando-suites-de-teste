/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 14:48:14 GMT 2021
 */

package org.la4j.matrix;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SparseMatrix_ESTest extends SparseMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      sparseMatrix0.add((double) (-160));
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      MockRandom mockRandom0 = new MockRandom((-1196L));
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(1796, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2338.6161490690747);
      doubleArray1[1] = (-1107.5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[2] = 330.1688499012;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.nonZeroIterator();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block((Matrix) null, (Matrix) null, sparseMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 0);
      columnMajorSparseMatrix0.isColumnMajor();
      Matrix.block(columnMajorSparseMatrix0, matrix0, matrix0, matrix0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.forEach(consumer0);
      SparseMatrix.zero(0, 0);
      RowMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
      int int1 = (-577);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-577), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -577x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      ((SparseMatrix)cCSMatrix0).ensureCardinalityIsCorrect(0, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(1210, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      MockRandom mockRandom0 = new MockRandom(0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.iterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(882.003442212).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      int int1 = 0;
      ColumnMajorSparseMatrix.identity(0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator1);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity((-6827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      columnMajorSparseMatrix0.copy();
      int int0 = (-38);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.nonZeroIteratorOfColumn((-38));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -38
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 1796, 1589);
      sparseMatrix0.density();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      MockRandom mockRandom0 = new MockRandom((-1196L));
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(1796, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom((-1L));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1L)).when(matrixAccumulator0).accumulate();
      mockRandom0.doubles();
      rowMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.iterator();
      // Undeclared exception!
      try { 
        SparseMatrix.block(columnMajorSparseMatrix0, sparseMatrix0, (Matrix) null, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom((-1L));
      SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.getRow(8);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      columnMajorSparseMatrix0.iterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix.identity(0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator1);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity((-6827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 1566);
      sparseMatrix0.isRowMajor();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      MockRandom mockRandom0 = new MockRandom((-1196L));
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(1796, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 2532;
      Matrix.diagonal(2532, 1.0);
      MatrixMatrixOperation<ColumnMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int1 = 32;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1395, 2622, 32);
      int int2 = (-3);
      int int3 = (-1691);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      ColumnMajorSparseMatrix.identity(32);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.foldNonZeroInRow(4084, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4084
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 100.0);
      rowMajorSparseMatrix0.toMatrixMarket((NumberFormat) null);
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = 100.0;
      doubleArray1[4] = 100.0;
      doubleArray1[5] = 100.0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 100.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 100.0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 100.0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 11.26963167389;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 100.0;
      doubleArray5[1] = 11.26963167389;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 100.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RAW_LU");
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom((-1L));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1L)).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      int int0 = 0;
      SparseMatrix sparseMatrix1 = SparseMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.iterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(sparseMatrix1, rowMajorSparseMatrix0, rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom((-1L));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1626.0).when(matrixAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.iterator();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(sparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      SparseMatrix.identity(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2043;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2043, 96.867496841399);
      assertEquals(4.894762604013706E-4, sparseMatrix0.density(), 0.01);
      assertEquals(96.867496841399, sparseMatrix0.max(), 0.01);
      assertEquals(2043, sparseMatrix0.rows());
      assertEquals(2043, sparseMatrix0.columns());
      assertEquals(2043, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int1 = sparseMatrix0.cardinality();
      assertEquals(4.894762604013706E-4, sparseMatrix0.density(), 0.01);
      assertEquals(96.867496841399, sparseMatrix0.max(), 0.01);
      assertEquals(2043, sparseMatrix0.rows());
      assertEquals(2043, sparseMatrix0.columns());
      assertEquals(2043, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(2043, int1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow(32, vectorProcedure0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      try { 
        SparseMatrix.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(48);
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2782.4612804962258), (-2782.4612804962258), (double)48, (-2782.4612804962258), 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = columnMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertEquals(48, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator1).accumulate();
      double[] doubleArray1 = columnMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(48, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom(10L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-132), (double) 48, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -132x-132
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 888;
      int int1 = 44;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(888, 44);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(888, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(44, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.max();
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(888, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(44, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.getColumn(888);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(643, 643);
      assertEquals(0.0015552099533437014, sparseMatrix0.density(), 0.01);
      assertEquals(643, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(643.0, sparseMatrix0.max(), 0.01);
      assertEquals(643, sparseMatrix0.cardinality());
      assertEquals(643, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      boolean boolean0 = sparseMatrix0.isZeroAt(16, 16);
      assertEquals(0.0015552099533437014, sparseMatrix0.density(), 0.01);
      assertEquals(643, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(643.0, sparseMatrix0.max(), 0.01);
      assertEquals(643, sparseMatrix0.cardinality());
      assertEquals(643, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(boolean0);
      
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(643, 643, 643);
      assertNotSame(sparseMatrix1, sparseMatrix0);
      assertTrue(sparseMatrix1.isRowMajor());
      assertEquals(0.0, sparseMatrix1.density(), 0.01);
      assertEquals(643, sparseMatrix1.rows());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertEquals(643, sparseMatrix1.columns());
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertEquals(0, sparseMatrix1.cardinality());
      assertFalse(sparseMatrix1.equals((Object)sparseMatrix0));
      assertNotNull(sparseMatrix1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 5095;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(5095, (-1.0));
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(5095, sparseMatrix0.columns());
      assertEquals(1.9627085377821394E-4, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(5095, sparseMatrix0.rows());
      assertEquals(5095, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        SparseMatrix.diagonal((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(815, 815);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(815, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(815, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.nonZeroIteratorOfRow(815);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(815, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(815, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1540.1444;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1540.1444, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      int int1 = 1870;
      Matrix matrix0 = Matrix.constant(0, 0, Double.NEGATIVE_INFINITY);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      int int2 = 660;
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(1870, 660, 1540, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad row argument 1870; out of bounds
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int1 = 440;
      VectorIterator vectorIterator0 = sparseMatrix0.nonZeroIteratorOfColumn(440);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(vectorIterator0);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(0, 0, 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1326;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(1326, 1326, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 32;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.copy();
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, cCSMatrix0.cardinality());
      assertEquals(0.03125, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(32, cCSMatrix0.columns());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      int int1 = 0;
      VectorIterator vectorIterator0 = columnMajorSparseMatrix0.nonZeroIteratorOfColumn(0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotNull(vectorIterator0);
      
      int int2 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      
      boolean boolean0 = columnMajorSparseMatrix0.isZeroAt((-1664), 0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(boolean0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.rotate();
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      assertEquals(32, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotNull(cRSMatrix0);
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow((-811), vectorProcedure1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.multiply(2.0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertEquals(32, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(32, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(32, cCSMatrix1.cardinality());
      assertEquals(2.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(32, cCSMatrix1.rows());
      assertEquals(0.03125, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix1);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("Can not decode BasicVector from the given byte array.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-116L));
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 1322.127, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      columnMajorSparseMatrix0.swapColumns(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)columnMajorSparseMatrix0.getRow(8);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)1, (byte)8, (byte)0, (byte)40}, byteArray0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket(byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        SparseMatrix.identity((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 4384;
      MockRandom mockRandom0 = new MockRandom(4384);
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(4384, 0.0, (Random) mockRandom0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(4384, sparseMatrix0.columns());
      assertEquals(4384, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = sparseMatrix0.foldNonZeroInColumn(2271, vectorAccumulator0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(4384, sparseMatrix0.columns());
      assertEquals(4384, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.nonZeroAt((-862), 4384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -862
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.random(16, 32, (double) 1, (Random) mockRandom0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.9, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(16, rowMajorSparseMatrix1.rows());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(512, rowMajorSparseMatrix1.cardinality());
      assertEquals(32, rowMajorSparseMatrix1.columns());
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(rowMajorSparseMatrix1);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.getOrElse(32, 32, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(32, 32, 1.0, (Random) mockRandom0);
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1024, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.9, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      boolean boolean0 = rowMajorSparseMatrix0.isColumnMajor();
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1024, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.9, rowMajorSparseMatrix0.max(), 0.01);
      assertFalse(boolean0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = rowMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator0);
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1024, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.9, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(32, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean1 = rowMajorSparseMatrix0.isRowMajor();
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(32, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1024, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.9, rowMajorSparseMatrix0.max(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long long0 = (-3372L);
      // Undeclared exception!
      try { 
        mockRandom0.ints((-3372L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      long long0 = ((SparseMatrix)cRSMatrix0).capacity();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.copy();
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(boolean1);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(linkedList0.contains(integer0));
      assertNotNull(rowMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      assertEquals(1, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(linkedList0.contains(integer0));
      assertNotNull(columnMajorMatrixIterator0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator1 = rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      assertNotSame(columnMajorMatrixIterator1, columnMajorMatrixIterator0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorMatrixIterator1.equals((Object)columnMajorMatrixIterator0));
      assertTrue(linkedList0.contains(integer0));
      assertNotNull(columnMajorMatrixIterator1);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = rowMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(linkedList0.contains(integer0));
      assertEquals(0.0, double0, 0.01);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(sparseMatrix0);
      
      int int0 = 0;
      SparseMatrix sparseMatrix1 = SparseMatrix.diagonal(0, 0.0);
      assertNotSame(sparseMatrix1, sparseMatrix0);
      assertNotSame(sparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertTrue(sparseMatrix1.isRowMajor());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
      assertEquals(0, sparseMatrix1.rows());
      assertEquals(0, sparseMatrix1.columns());
      assertEquals(0, sparseMatrix1.cardinality());
      assertTrue(sparseMatrix1.equals((Object)sparseMatrix0));
      assertFalse(sparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(sparseMatrix1);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator2 = columnMajorSparseMatrix0.iterator();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorMatrixIterator2.equals((Object)columnMajorMatrixIterator0));
      assertFalse(columnMajorMatrixIterator2.equals((Object)columnMajorMatrixIterator1));
      assertNotNull(columnMajorMatrixIterator2);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(sparseMatrix1, rowMajorSparseMatrix0, rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixIterator matrixIterator0 = rowMajorSparseMatrix0.iterator();
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(matrixIterator0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.rotate();
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.zero(0, 0, 0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 48;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(48);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = columnMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertEquals(48, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachInRow(48, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      decimalFormat0.setMinimumIntegerDigits(740);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("\udecimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("\udecimalFormat0.toLocalizedPattern());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(740, decimalFormat0.getMinimumIntegerDigits());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Number number0 = decimalFormat0.parse("", parsePosition0);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("\udecimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("\u00A4#00,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000.00", decimalFormat0.toLocalizedPattern());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(740, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertNull(number0);
      
      String string0 = columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0, "", (String) null);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("\udecimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("\udecimalFormat0.toLocalizedPattern());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(740, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1302.35648255414);
      doubleArray2[2] = 5829.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1302.35648255414);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-348.3856044174);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 5829.0;
      doubleArray6[1] = (-1302.35648255414);
      doubleArray6[2] = 5829.0;
      doubleArray6[3] = (-348.3856044174);
      doubleArray6[4] = (-1302.35648255414);
      doubleArray6[5] = 5829.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-1302.35648255414);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-1302.35648255414);
      doubleArray7[3] = 5829.0;
      doubleArray7[4] = (-1302.35648255414);
      doubleArray7[5] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(8, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(8, doubleArray0.length);
      assertNotNull(matrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(8, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(16, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(8, doubleArray0.length);
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(8, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(16, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(16, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(8, doubleArray0.length);
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = columnMajorSparseMatrix0.iterator();
      assertEquals(8, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(16, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(16, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(8, doubleArray0.length);
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      String string0 = columnMajorSparseMatrix0.toCSV();
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = columnMajorSparseMatrix0.toCSV();
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(493, 0.0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(493, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(493, rowMajorSparseMatrix0.cardinality());
      assertEquals(493, rowMajorSparseMatrix0.columns());
      assertEquals(0.002028397565922921, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = columnMajorSparseMatrix0.nonZeroRowMajorIterator();
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorMatrixIterator0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 493, 493);
      assertNotSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(10, sparseMatrix0.rows());
      assertEquals(493, sparseMatrix0.columns());
      assertFalse(sparseMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      double double0 = (-1999.07283218);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.randomSymmetric(0, (-1999.07283218), (Random) mockRandom0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.toRowMajorSparseMatrix();
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        ((SparseMatrix)cRSMatrix0).ensureCardinalityIsCorrect(1408L, 1L, 1408L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 403.690038825);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.eachNonZeroInColumn((-513), vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = (-1.0);
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(2, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals((-1.0), sparseMatrix0.min(), 0.01);
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.75, sparseMatrix0.density(), 0.01);
      assertEquals(3, sparseMatrix0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 1384);
      assertEquals(1384, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = columnMajorSparseMatrix0.nonZeroColumnMajorIterator();
      assertEquals(1384, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      
      int int0 = 0;
      boolean boolean0 = columnMajorSparseMatrix0.nonZeroAt(0, 0);
      assertEquals(1384, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(32);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      double double1 = columnMajorSparseMatrix0.getOrElse(17, 17, 1384);
      assertEquals(1384, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(32, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1384.0, double1, 0.01);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 714);
      assertNotNull(pushbackInputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3341.23015958115;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.cardinality());
      assertEquals(3341.23015958115, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(1, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(6, doubleArray0.length);
      assertNotNull(sparseMatrix0);
      assertArrayEquals(new double[] {3341.23015958115, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(37, 0.0, (Random) mockRandom0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertEquals(37, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertEquals(37, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(37, sparseMatrix0.columns());
      assertEquals(37, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.multiply((double) 37);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertEquals(37, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(37, sparseMatrix0.columns());
      assertEquals(37, sparseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 2472.3;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2871.5;
      doubleArray1[4] = 2614.761;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(Double.NEGATIVE_INFINITY, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(2871.5, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, doubleArray0.length);
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.getColumn((-175));
      assertEquals(Double.NEGATIVE_INFINITY, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(2871.5, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4251;
      doubleArray0[2] = (double) 4251;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4251;
      // Undeclared exception!
      SparseMatrix.from1DArray(4251, 1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-764);
      doubleArray0[1] = (double) (-764);
      doubleArray0[2] = (double) (-764);
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-764), (-1175), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -764x-1175
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(1265, 1265);
      assertEquals(1265.0, cCSMatrix0.max(), 0.01);
      assertEquals(1265, cCSMatrix0.rows());
      assertEquals(1265, cCSMatrix0.columns());
      assertEquals(1265, cCSMatrix0.cardinality());
      assertEquals(7.905138339920949E-4, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      long long0 = ((SparseMatrix)cCSMatrix0).capacity();
      assertEquals(1265.0, cCSMatrix0.max(), 0.01);
      assertEquals(1265, cCSMatrix0.rows());
      assertEquals(1265, cCSMatrix0.columns());
      assertEquals(1265, cCSMatrix0.cardinality());
      assertEquals(7.905138339920949E-4, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1600225L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = 48;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 48);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      try { 
        SparseMatrix.fromMatrixMarket(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(0, 0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        ((SparseMatrix)cCSMatrix0).ensureCardinalityIsCorrect(0, 0, (-1177L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1177.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.manhattanNorm();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, (SparseVector) null);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      Vector vector1 = columnMajorSparseMatrix0.multiply(vector0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, vector0.length());
      assertEquals(0, vector1.length());
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(544, 0.0, (Random) mockRandom0);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(544, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(544, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.eachNonZeroInRow(544, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 545
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = (-2355);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-2355), (-2355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2355x-2355
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(1000, 1312, 0.0, (Random) mockRandom0);
      assertEquals(1000, rowMajorSparseMatrix0.cardinality());
      assertEquals(1312, rowMajorSparseMatrix0.columns());
      assertEquals(7.621951219512195E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.9, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1000, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = rowMajorSparseMatrix0.foldNonZeroInColumn((-1717986917), vectorAccumulator0);
      assertEquals(1000, rowMajorSparseMatrix0.cardinality());
      assertEquals(1312, rowMajorSparseMatrix0.columns());
      assertEquals(7.621951219512195E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.9, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1000, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 3989.8760488688;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-544.48252776);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, doubleArray0.length);
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-923), (-2343), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -923x-2343
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 2403;
      int int1 = 742;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 2403, 742);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2403, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      assertSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2403, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2403, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(10, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.density(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix1);
      
      // Undeclared exception!
      columnMajorSparseMatrix1.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(911, 911);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(911, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(911, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      boolean boolean0 = rowMajorSparseMatrix0.isColumnMajor();
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(911, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(911, rowMajorSparseMatrix0.columns());
      assertFalse(boolean0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.identity(911);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(1.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(911, rowMajorSparseMatrix1.columns());
      assertEquals(911, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(911, rowMajorSparseMatrix1.cardinality());
      assertEquals(0.0010976948408342481, rowMajorSparseMatrix1.density(), 0.01);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(rowMajorSparseMatrix1);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.nonZeroIteratorOfRow(1896);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1896
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1700);
      assertEquals(1700, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(5.88235294117647E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1700, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1700, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(1156L);
      assertNotNull(mockRandom0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.randomSymmetric(1700, 0.0, (Random) mockRandom0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1700, rowMajorSparseMatrix1.columns());
      assertEquals(1700, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(rowMajorSparseMatrix1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1700;
      intArray0[1] = 1700;
      intArray0[2] = 1700;
      intArray0[3] = 1700;
      intArray0[4] = 1700;
      intArray0[5] = 1169;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1700' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 5095;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(5095, (-1.0));
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(5095, sparseMatrix0.rows());
      assertEquals(5095, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(5095, sparseMatrix0.cardinality());
      assertEquals(1.9627085377821394E-4, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.isZeroAt(5095, 5095);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.random(671, (-28), (double) 671, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 1;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1.0, sparseMatrix0.density(), 0.01);
      assertEquals(1, sparseMatrix0.cardinality());
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.isZeroAt(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3808.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1210.4724;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-741.65896285);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1210.4724;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3495.86357;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1426.8790216927;
      doubleArray4[1] = (-2123.223);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1.0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 730.0401457;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 573;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(573, 573);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(573, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(573, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = sparseMatrix0.toColumnMajorSparseMatrix();
      assertSame(sparseMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(573, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(573, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(573, columnMajorSparseMatrix0.rows());
      assertEquals(573, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      // Undeclared exception!
      sparseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.zero(4438, (-1001));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4438x-1001
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-667.775);
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(5, doubleArray0.length);
      assertNotNull(sparseMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-667.775)}, doubleArray0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = sparseMatrix0.foldRows(vectorAccumulator0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-667.775)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(508, 508, 0.0, (Random) mockRandom0);
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(508, sparseMatrix0.cardinality());
      assertEquals(508, sparseMatrix0.rows());
      assertEquals(0.001968503937007874, sparseMatrix0.density(), 0.01);
      assertEquals(508, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) Integer.MAX_VALUE);
      assertNotNull(intStream0);
      
      IntStream intStream1 = mockRandom0.ints((long) 0, 0, Integer.MAX_VALUE);
      assertNotSame(intStream1, intStream0);
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotNull(intStream1);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      long long1 = mockRandom0.nextLong();
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      SparseMatrix sparseMatrix1 = SparseMatrix.diagonal(0, 1090.81444401);
      assertNotSame(sparseMatrix1, sparseMatrix0);
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
      assertEquals(0, sparseMatrix1.rows());
      assertTrue(sparseMatrix1.isRowMajor());
      assertEquals(0, sparseMatrix1.cardinality());
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertEquals(0, sparseMatrix1.columns());
      assertTrue(sparseMatrix1.equals((Object)sparseMatrix0));
      assertNotNull(sparseMatrix1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 2;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(2, 0.0, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = columnMajorSparseMatrix0.nonZeroIteratorOfColumn(2);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.columns());
      assertNotNull(vectorIterator0);
      
      SparseMatrix sparseMatrix0 = columnMajorSparseMatrix0.toSparseMatrix();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      int int1 = 48;
      // Undeclared exception!
      try { 
        sparseMatrix0.getRow(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(2437, 2437, (-336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -336.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = columnMajorSparseMatrix0.nonZeroColumnMajorIterator();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      
      double double0 = columnMajorSparseMatrix0.density();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(1, (-1792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-1792
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      double double0 = sparseMatrix0.diagonalProduct();
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      assertSame(sparseMatrix0, sparseMatrix1);
      assertSame(sparseMatrix1, sparseMatrix0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix1.rows());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertEquals(0, sparseMatrix1.cardinality());
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
      assertEquals(0, sparseMatrix1.columns());
      assertTrue(sparseMatrix1.isRowMajor());
      assertNotNull(sparseMatrix1);
      
      int int0 = 3808;
      int int1 = 0;
      Matrix matrix0 = Matrix.constant(3808, 0, 2492.536668054342);
      assertEquals(3808, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      int int2 = sparseMatrix1.cardinality();
      assertSame(sparseMatrix0, sparseMatrix1);
      assertSame(sparseMatrix1, sparseMatrix0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix1.rows());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertEquals(0, sparseMatrix1.cardinality());
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
      assertEquals(0, sparseMatrix1.columns());
      assertTrue(sparseMatrix1.isRowMajor());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = 631;
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.getColumn(631);
      assertSame(sparseMatrix0, sparseMatrix1);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int4 = 0;
      sparseMatrix1.setColumn(0, 1.0);
      assertSame(sparseMatrix0, sparseMatrix1);
      assertSame(sparseMatrix1, sparseMatrix0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix1.rows());
      assertEquals(0.0, sparseMatrix1.max(), 0.01);
      assertEquals(0.0, sparseMatrix1.min(), 0.01);
      assertEquals(0, sparseMatrix1.cardinality());
      assertEquals(Double.NaN, sparseMatrix1.density(), 0.01);
      assertEquals(0, sparseMatrix1.columns());
      assertTrue(sparseMatrix1.isRowMajor());
      
      int int5 = 0;
      int int6 = (-426);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(0, (-426), 631);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-426
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("org.la4j.matrix.SparseMatrix$4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 529;
      MockRandom mockRandom0 = new MockRandom(529);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(529, 677.476553, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 279841.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(815, 815);
      assertEquals(815, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(815, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.blankOfRows(3);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n3 3 0\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, rowMajorSparseMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(48);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2782.4612804962258), (-2782.4612804962258), (double)48, (-2782.4612804962258), 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = columnMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertEquals(48, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(722.6045, 0.0, 0.0, 0.0, 722.6045).when(vectorAccumulator1).accumulate();
      double[] doubleArray1 = columnMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(48, columnMajorSparseMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.020833333333333332, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(48, columnMajorSparseMatrix0.columns());
      assertEquals(48, columnMajorSparseMatrix0.cardinality());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(48, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom(10L);
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(48, 48, 0.0, (Random) mockRandom0);
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(48, sparseMatrix0.rows());
      assertEquals(48, sparseMatrix0.columns());
      assertEquals(0.020833333333333332, sparseMatrix0.density(), 0.01);
      assertEquals(48, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[0][4];
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      rowMajorSparseMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom(0);
      SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      MockRandom mockRandom0 = new MockRandom((-1L));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.iterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      ColumnMajorSparseMatrix.identity(0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldNonZeroInRows(vectorAccumulator1);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity((-6827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      columnMajorSparseMatrix0.copy();
      columnMajorSparseMatrix0.nonZeroIteratorOfColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      columnMajorSparseMatrix0.isZeroAt((-1664), 0);
      columnMajorSparseMatrix0.rotate();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow((-811), vectorProcedure1);
      columnMajorSparseMatrix0.multiply(2.0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("Can not decode BasicVector from the given byte array.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      int int0 = (-30);
      MockRandom mockRandom0 = new MockRandom((-30));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)88;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric((-30), (double) (-30), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -30x-30
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix.diagonal(0, 292.9813491);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 292.9813491;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 292.9813491;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-526), (-526), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -526x-526
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int int0 = 1796;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(0, 1796, 1566);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
