/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 31 15:20:20 GMT 2021
 */

package org.la4j.matrix;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.text.NumberFormat;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RowMajorSparseMatrix_ESTest extends RowMajorSparseMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(5, 5);
      rowMajorSparseMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.fromCSV("6");
      rowMajorSparseMatrix1.isRowMajor();
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs(0L, (-1L), 0L);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric((-1021), (double) 5, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1021x-1021
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 4272;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4272;
      doubleArray0[1] = (double) 4272;
      doubleArray0[2] = (double) 4272;
      doubleArray0[3] = (double) 4272;
      doubleArray0[4] = (double) 4272;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[5] = (double) 4272;
      doubleArray0[6] = (double) 4272;
      doubleArray0[7] = (double) 4272;
      doubleArray0[8] = (double) 4272;
      // Undeclared exception!
      RowMajorSparseMatrix.from1DArray(4272, 4272, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.removeFirstRow();
      rowMajorSparseMatrix0.rotate();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      rowMajorSparseMatrix0.isRowMajor();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(1, mockRandom0);
      denseVector0.toMatrixMarket();
      denseVector0.slice(1, 1);
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 1;
      doubleArray0[3] = doubleArray4;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 1, (double) 1, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 8, 8);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      RowMajorSparseMatrix.diagonal(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[6];
      double double0 = 664.0116792;
      doubleArray0[0] = 664.0116792;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      double double1 = Double.NEGATIVE_INFINITY;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(1, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2147483648.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2147483629;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2147483629;
      // Undeclared exception!
      RowMajorSparseMatrix.from1DArray(2147483629, 2147483629, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2147483617;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2147483617;
      // Undeclared exception!
      RowMajorSparseMatrix.zero(2147483617, 2147483617);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1046.399);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1170.73277447;
      doubleArray2[5] = 146.17321276485362;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1170.73277447;
      doubleArray4[2] = (-1046.399);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1170.73277447;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 146.17321276485362;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 100.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 146.17321276485362;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-1046.399);
      doubleArray6[7] = 146.17321276485362;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-594.842269274);
      doubleArray7[2] = 1385.3;
      doubleArray7[3] = 100.0;
      doubleArray7[4] = 100.0;
      doubleArray7[5] = (-1046.399);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (-1.0);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 100.0;
      doubleArray8[3] = (-594.842269274);
      doubleArray8[4] = 1170.73277447;
      doubleArray8[5] = 1170.73277447;
      doubleArray0[7] = doubleArray8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)45;
      mockRandom0.nextBytes(byteArray0);
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(sparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, sparseMatrix0);
      Matrix matrix0 = rowMajorSparseMatrix1.sliceTopLeft(1, 1);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, rowMajorSparseMatrix0, sparseMatrix0, rowMajorSparseMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      matrix0.spliterator();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1646.10292641);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1660;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1660;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.from1DArray(0, 1660, doubleArray0);
      assertEquals(1660, rowMajorSparseMatrix1.columns());
      
      double[][] doubleArray1 = new double[1][7];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray1[0] = doubleArray2;
      RowMajorSparseMatrix.from2DArray(doubleArray1);
      RowMajorSparseMatrix rowMajorSparseMatrix2 = RowMajorSparseMatrix.identity(0);
      assertTrue(rowMajorSparseMatrix2.equals((Object)rowMajorSparseMatrix0));
      
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix3 = RowMajorSparseMatrix.randomSymmetric(993, 0.0, (Random) mockRandom0);
      assertEquals(993, rowMajorSparseMatrix3.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1844;
      int int1 = 0;
      double[] doubleArray0 = null;
      RowMajorSparseMatrix.from1DArray(1844, 0, (double[]) null);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("Y)H(m{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1099, (-2358.52));
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      rowMajorSparseMatrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      RowMajorSparseMatrix.block(matrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      DenseMatrix.from1DArray(0, 0, doubleArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = rowMajorSparseMatrix0.multiplyByItsTranspose();
      RowMajorSparseMatrix.block(matrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Vector vector0 = Vector.zero(0);
      matrix0.insertRow(0, vector0);
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1170L);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random((-3200), (-3200), 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      RowMajorSparseMatrix.identity(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket(pushbackInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-477);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.diagonal((-477), (-242.15746081));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 887;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 887;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.from1DArray(0, 887, doubleArray0);
      assertEquals(887, rowMajorSparseMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 48;
      double double0 = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(48, 0.0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      matrix0.trace();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, denseMatrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom(4);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(4, 4, 0.0, (Random) mockRandom0);
      rowMajorSparseMatrix0.spliterator();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric((-2152), (-3190.89572663), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2152x-2152
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      Matrix.randomSymmetric(0, (Random) null);
      rowMajorSparseMatrix0.isRowMajor();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1605);
      Random random0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(0, (-1605), (double) 0, (Random) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 413;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(413, 413, 413);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.apply((MatrixOperation<RowMajorSparseMatrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      rowMajorSparseMatrix0.blank();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray((-1603), (-1603), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1603x-1603
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RowMajorSparseMatrix.fromCSV("");
      RowMajorSparseMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom(2098L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      rowMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.diagonal((-1905), 1072.4431035);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-1374);
      int int1 = (-968);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray((-1374), (-968), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1374x-968
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      rowMajorSparseMatrix0.shuffle();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix1.transpose();
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RowMajorSparseMatrix.zero(0, 0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RowMajorSparseMatrix.identity(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      boolean boolean0 = rowMajorSparseMatrix0.isRowMajor();
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(boolean0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric((-2260), (double) (-2260), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2260x-2260
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-29L));
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric((-878), (double) (-878), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -878x-878
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1990, 3197.713660181816);
      boolean boolean0 = rowMajorSparseMatrix0.isRowMajor();
      assertTrue(boolean0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1990, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1375.835;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2498.012521796;
      doubleArray1[3] = (-2598.698572);
      doubleArray1[4] = (-1048.411691631);
      doubleArray1[5] = 652.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2598.698572);
      doubleArray2[2] = 1375.835;
      doubleArray2[3] = (-1048.411691631);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 2498.012521796;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1048.411691631);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2498.012521796;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-2598.698572);
      doubleArray5[3] = (-2598.698572);
      doubleArray5[4] = 652.1;
      doubleArray5[5] = (-1048.411691631);
      doubleArray5[6] = (-2598.698572);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1048.411691631);
      doubleArray6[2] = (-2598.698572);
      doubleArray6[3] = (-2598.698572);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 1375.835;
      doubleArray7[1] = (-792.5167814586);
      doubleArray7[2] = (-2598.698572);
      doubleArray7[3] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-2598.698572);
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = (-1048.411691631);
      doubleArray9[1] = 0.0;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 729;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(729, 5, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 5;
      int int1 = (-313);
      int int2 = 1;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(5, (-313), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 5x-313
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1657);
      Random random0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(0, (-1657), 3314.5704727141, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(0, 0, 519.9, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2772, 2772, 2772);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1.0);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(2, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1872, 1872);
      // Undeclared exception!
      rowMajorSparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-498);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.identity((-498));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RowMajorSparseMatrix.identity(32);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      int int1 = 4;
      int int2 = 0;
      RowMajorSparseMatrix.zero(0, 4, 0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 3007;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3007, 3007);
      rowMajorSparseMatrix0.rotate();
      int int1 = (-694);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-694), 3007);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -694x3007
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RowMajorSparseMatrix.identity(6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-854), 0, 2209);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -854x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0.0);
      rowMajorSparseMatrix0.add(0.0);
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      rowMajorSparseMatrix0.rotate();
      rowMajorSparseMatrix0.isRowMajor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      try { 
        RowMajorSparseMatrix.fromMatrixMarket(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1211);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix1.iteratorOfNonZeroRows();
      RowMajorSparseMatrix.identity(0);
      // Undeclared exception!
      rowMajorSparseMatrix1.rotate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      
      RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.diagonalProduct();
      Matrix.identity(875);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("Je|p+y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      rowMajorSparseMatrix0.removeFirstRow();
      rowMajorSparseMatrix0.rotate();
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      rowMajorSparseMatrix0.isRowMajor();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(5, 5);
      rowMajorSparseMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.fromCSV("");
      rowMajorSparseMatrix1.isRowMajor();
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric((-1021), (double) 5, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1021x-1021
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.apply((MatrixVectorOperation<Object>) null, (Vector) sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      matrix0.spliterator();
      rowMajorSparseMatrix1.transpose();
      rowMajorSparseMatrix1.isRowMajor();
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      MockRandom mockRandom0 = new MockRandom((-916L));
      // Undeclared exception!
      try { 
        SparseVector.random(1626, 1375.073, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(2991, (-2324), (double) (-136), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int0 = 978;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 956484.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
